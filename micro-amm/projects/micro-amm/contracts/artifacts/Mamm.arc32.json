{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLiquidity(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLiquidity(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateSwapFee(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateProtocolFee(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAdmin(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateTreasury(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateMinimumBalance(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "primary_token_reserve": {
          "type": "uint64",
          "key": "ptr"
        },
        "secondary_token_reserve": {
          "type": "uint64",
          "key": "str"
        },
        "primary_token_id": {
          "type": "uint64",
          "key": "pti"
        },
        "secondary_token_id": {
          "type": "uint64",
          "key": "sti"
        },
        "total_lp_supply": {
          "type": "uint64",
          "key": "tlps"
        },
        "k_value": {
          "type": "uint64",
          "key": "k"
        },
        "lp_token_id": {
          "type": "uint64",
          "key": "lp"
        },
        "lp_token_name": {
          "type": "bytes",
          "key": "lpn"
        },
        "lp_token_symbol": {
          "type": "bytes",
          "key": "lps"
        },
        "lp_token_decimals": {
          "type": "uint64",
          "key": "lpd"
        },
        "lp_token_url": {
          "type": "bytes",
          "key": "lpu"
        },
        "swap_fee_bps": {
          "type": "uint64",
          "key": "sfbps"
        },
        "protocol_fee_bps": {
          "type": "uint64",
          "key": "pfbps"
        },
        "admin": {
          "type": "bytes",
          "key": "admin"
        },
        "treasury_address": {
          "type": "bytes",
          "key": "treasury"
        },
        "minimum_balance": {
          "type": "uint64",
          "key": "minbal"
        },
        "contract_version": {
          "type": "uint64",
          "key": "version"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 5,
      "num_uints": 12
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "Mamm",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initApplication",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay"
          },
          {
            "name": "primaryAssetId",
            "type": "uint64"
          },
          {
            "name": "secondaryAssetId",
            "type": "uint64"
          },
          {
            "name": "lpAssetName",
            "type": "string"
          },
          {
            "name": "lpAssetURL",
            "type": "string"
          },
          {
            "name": "swapFeeBps",
            "type": "uint64"
          },
          {
            "name": "protocolFeeBps",
            "type": "uint64"
          },
          {
            "name": "treasuryAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addLiquidity",
        "args": [
          {
            "name": "primaryAmount",
            "type": "uint64"
          },
          {
            "name": "secondaryAmount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeLiquidity",
        "args": [
          {
            "name": "burnTxn",
            "type": "axfer"
          },
          {
            "name": "lpTokensBurned",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "swap",
        "args": [
          {
            "name": "inputAmount",
            "type": "uint64"
          },
          {
            "name": "swapType",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateSwapFee",
        "args": [
          {
            "name": "newFee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateProtocolFee",
        "args": [
          {
            "name": "newFee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateAdmin",
        "args": [
          {
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateTreasury",
        "args": [
          {
            "name": "newTreasury",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateMinimumBalance",
        "args": [
          {
            "name": "newMBR",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}