#pragma version 11
intcblock 0 1 4 1_000 32 99999999999999 6
bytecblock 0x 0x61646d696e 0x707469 0x737469 0x707472 0x737472 0x746c7073 0x6c707469 0x6c70 0x6b 0x7472656173757279 0x6d696e62616c 0x7366627073 0x7066627073 0x656e64 0x6c706e 0x6c7073 0x6c7064 0x6c7075

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 6 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/Mamm.algo.ts:63
	// this.admin.value = this.txn.sender
	bytec 1 //  "admin"
	txn Sender
	app_global_put
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 1 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/Mamm.algo.ts:67
	// assert(this.admin.value === this.txn.sender, 'Only admin can delete the application')
	bytec 1 //  "admin"
	app_global_get
	txn Sender
	==

	// Only admin can delete the application
	assert

	// contracts/Mamm.algo.ts:68
	// assert(this.contract_ending.value === 1, 'Contract needs to be ending first')
	bytec 14 //  "end"
	app_global_get
	intc 1 // 1
	==

	// Contract needs to be ending first
	assert

	// contracts/Mamm.algo.ts:69
	// assert(this.primary_token_reserve.value === 0, 'Primary reserve must be empty')
	bytec 4 //  "ptr"
	app_global_get
	intc 0 // 0
	==

	// Primary reserve must be empty
	assert

	// contracts/Mamm.algo.ts:70
	// assert(this.secondary_token_reserve.value === 0, 'Secondary reserve must be empty')
	bytec 5 //  "str"
	app_global_get
	intc 0 // 0
	==

	// Secondary reserve must be empty
	assert

	// contracts/Mamm.algo.ts:73
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.primary_token_id.value),
	//       assetReceiver: this.admin.value,
	//       assetAmount: 0,
	//       assetCloseTo: this.admin.value,
	//       fee: 1_000,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:74
	// xferAsset: AssetID.fromUint64(this.primary_token_id.value)
	bytec 2 //  "pti"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:75
	// assetReceiver: this.admin.value
	bytec 1 //  "admin"
	app_global_get
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:76
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts/Mamm.algo.ts:77
	// assetCloseTo: this.admin.value
	bytec 1 //  "admin"
	app_global_get
	itxn_field AssetCloseTo

	// contracts/Mamm.algo.ts:78
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Mamm.algo.ts:80
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.secondary_token_id.value),
	//       assetReceiver: this.admin.value,
	//       assetAmount: 0,
	//       assetCloseTo: this.admin.value,
	//       fee: 1_000,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:81
	// xferAsset: AssetID.fromUint64(this.secondary_token_id.value)
	bytec 3 //  "sti"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:82
	// assetReceiver: this.admin.value
	bytec 1 //  "admin"
	app_global_get
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:83
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts/Mamm.algo.ts:84
	// assetCloseTo: this.admin.value
	bytec 1 //  "admin"
	app_global_get
	itxn_field AssetCloseTo

	// contracts/Mamm.algo.ts:85
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Mamm.algo.ts:87
	// this.minimum_balance.value = TOKEN_MBR * 2
	bytec 11 //  "minbal"
	pushint 200000
	app_global_put

	// contracts/Mamm.algo.ts:94
	// this.deleteApplication()
	callsub deleteApplication
	retsub

// initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void
*abi_route_initApplication:
	// treasuryAddress: address
	txna ApplicationArgs 7
	dup
	len
	intc 4 // 32
	==

	// argument 0 (treasuryAddress) for initApplication must be a address
	assert

	// protocolFeeBps: uint64
	txna ApplicationArgs 6
	btoi

	// swapFeeBps: uint64
	txna ApplicationArgs 5
	btoi

	// lpAssetURL: string
	txna ApplicationArgs 4
	extract 2 0

	// lpAssetName: string
	txna ApplicationArgs 3
	extract 2 0

	// secondaryAssetId: uint64
	txna ApplicationArgs 2
	btoi

	// primaryAssetId: uint64
	txna ApplicationArgs 1
	btoi

	// mbrTxn: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 7 (mbrTxn) for initApplication must be a pay transaction
	assert

	// execute initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void
	callsub initApplication
	intc 1 // 1
	return

// initApplication(mbrTxn: PayTxn, primaryAssetId: uint64, secondaryAssetId: uint64, lpAssetName: string, lpAssetURL: string, swapFeeBps: uint64, protocolFeeBps: uint64, treasuryAddress: Address): void
initApplication:
	proto 8 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/Mamm.algo.ts:108
	// assert(this.admin.value === this.txn.sender, 'Only admin can initialize the application')
	bytec 1 //  "admin"
	app_global_get
	txn Sender
	==

	// Only admin can initialize the application
	assert

	// contracts/Mamm.algo.ts:110
	// this.primary_token_reserve.value = 0
	bytec 4 //  "ptr"
	intc 0 // 0
	app_global_put

	// contracts/Mamm.algo.ts:111
	// this.secondary_token_reserve.value = 0
	bytec 5 //  "str"
	intc 0 // 0
	app_global_put

	// contracts/Mamm.algo.ts:112
	// this.total_lp_supply.value = 0
	bytec 6 //  "tlps"
	intc 0 // 0
	app_global_put

	// contracts/Mamm.algo.ts:113
	// this.k_value.value = 0
	bytec 9 //  "k"
	intc 0 // 0
	app_global_put

	// contracts/Mamm.algo.ts:114
	// this.lp_token_id.value = 0
	bytec 8 //  "lp"
	intc 0 // 0
	app_global_put

	// contracts/Mamm.algo.ts:115
	// this.lp_token_name.value = lpAssetName
	bytec 15 //  "lpn"
	frame_dig -4 // lpAssetName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/Mamm.algo.ts:116
	// this.lp_token_symbol.value = 'MLP'
	bytec 16 //  "lps"
	pushbytes 0x00034d4c50
	app_global_put

	// contracts/Mamm.algo.ts:117
	// this.lp_token_decimals.value = 6
	bytec 17 //  "lpd"
	intc 6 // 6
	app_global_put

	// contracts/Mamm.algo.ts:118
	// this.lp_token_url.value = lpAssetURL
	bytec 18 //  "lpu"
	frame_dig -5 // lpAssetURL: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/Mamm.algo.ts:119
	// this.contract_version.value = VERSION
	pushbytes 0x76657273696f6e // "version"
	pushint 1000
	app_global_put

	// contracts/Mamm.algo.ts:120
	// this.minimum_balance.value = TOKEN_MBR * 4
	bytec 11 //  "minbal"
	pushint 400000
	app_global_put

	// contracts/Mamm.algo.ts:121
	// this.swap_fee_bps.value = swapFeeBps
	bytec 12 //  "sfbps"
	frame_dig -6 // swapFeeBps: uint64
	app_global_put

	// contracts/Mamm.algo.ts:122
	// this.protocol_fee_bps.value = protocolFeeBps
	bytec 13 //  "pfbps"
	frame_dig -7 // protocolFeeBps: uint64
	app_global_put

	// contracts/Mamm.algo.ts:123
	// this.treasury_address.value = treasuryAddress
	bytec 10 //  "treasury"
	frame_dig -8 // treasuryAddress: Address
	app_global_put

	// contracts/Mamm.algo.ts:125
	// verifyPayTxn(mbrTxn, { receiver: this.app.address, amount: TOKEN_MBR * 4 + 3_000 })
	// verify receiver
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Amount
	pushint 403000
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","expected":"TOKEN_MBR * 4 + 3_000"}
	assert

	// contracts/Mamm.algo.ts:127
	// this.primary_token_id.value = primaryAssetId
	bytec 2 //  "pti"
	frame_dig -2 // primaryAssetId: uint64
	app_global_put

	// contracts/Mamm.algo.ts:128
	// this.secondary_token_id.value = secondaryAssetId
	bytec 3 //  "sti"
	frame_dig -3 // secondaryAssetId: uint64
	app_global_put

	// contracts/Mamm.algo.ts:131
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.primary_token_id.value),
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//       fee: 1_000,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:132
	// xferAsset: AssetID.fromUint64(this.primary_token_id.value)
	bytec 2 //  "pti"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:133
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:134
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts/Mamm.algo.ts:135
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Mamm.algo.ts:137
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.secondary_token_id.value),
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//       fee: 1_000,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:138
	// xferAsset: AssetID.fromUint64(this.secondary_token_id.value)
	bytec 3 //  "sti"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:139
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:140
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts/Mamm.algo.ts:141
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Mamm.algo.ts:145
	// lpAssetId = sendAssetCreation({
	//       configAssetTotal: LP_TOKEN_SUPPLY,
	//       configAssetDecimals: this.lp_token_decimals.value,
	//       configAssetName: this.lp_token_name.value,
	//       configAssetUnitName: this.lp_token_symbol.value,
	//       configAssetURL: this.lp_token_url.value,
	//       fee: 1_000,
	//     })
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:146
	// configAssetTotal: LP_TOKEN_SUPPLY
	intc 5 // 99999999999999
	itxn_field ConfigAssetTotal

	// contracts/Mamm.algo.ts:147
	// configAssetDecimals: this.lp_token_decimals.value
	bytec 17 //  "lpd"
	app_global_get
	itxn_field ConfigAssetDecimals

	// contracts/Mamm.algo.ts:148
	// configAssetName: this.lp_token_name.value
	bytec 15 //  "lpn"
	app_global_get
	extract 2 0
	itxn_field ConfigAssetName

	// contracts/Mamm.algo.ts:149
	// configAssetUnitName: this.lp_token_symbol.value
	bytec 16 //  "lps"
	app_global_get
	extract 2 0
	itxn_field ConfigAssetUnitName

	// contracts/Mamm.algo.ts:150
	// configAssetURL: this.lp_token_url.value
	bytec 18 //  "lpu"
	app_global_get
	extract 2 0
	itxn_field ConfigAssetURL

	// contracts/Mamm.algo.ts:151
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury 0 // lpAssetId: uint64

	// contracts/Mamm.algo.ts:153
	// this.lp_token_id.value = lpAssetId.id
	bytec 8 //  "lp"
	frame_dig 0 // lpAssetId: uint64
	app_global_put

	// contracts/Mamm.algo.ts:154
	// this.total_lp_supply.value = LP_TOKEN_SUPPLY
	bytec 6 //  "tlps"
	intc 5 // 99999999999999
	app_global_put
	retsub

// addLiquidity(uint64,uint64,axfer,axfer)void
*abi_route_addLiquidity:
	// secondaryAssetTransfer: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 2 //  axfer
	==

	// argument 0 (secondaryAssetTransfer) for addLiquidity must be a axfer transaction
	assert

	// primaryAssetTransfer: axfer
	txn GroupIndex
	pushint 2
	-
	dup
	gtxns TypeEnum
	intc 2 //  axfer
	==

	// argument 1 (primaryAssetTransfer) for addLiquidity must be a axfer transaction
	assert

	// secondaryAmount: uint64
	txna ApplicationArgs 2
	btoi

	// primaryAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute addLiquidity(uint64,uint64,axfer,axfer)void
	callsub addLiquidity
	intc 1 // 1
	return

// addLiquidity(primaryAmount: uint64, secondaryAmount: uint64, primaryAssetTransfer: AssetTransferTxn, secondaryAssetTransfer: AssetTransferTxn): void
addLiquidity:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 6

	// contracts/Mamm.algo.ts:164
	// primaryReserve = this.primary_token_reserve.value
	bytec 4 //  "ptr"
	app_global_get
	frame_bury 0 // primaryReserve: uint64

	// contracts/Mamm.algo.ts:165
	// secondaryReserve = this.secondary_token_reserve.value
	bytec 5 //  "str"
	app_global_get
	frame_bury 1 // secondaryReserve: uint64

	// contracts/Mamm.algo.ts:166
	// totalLPSupply = this.total_lp_supply.value
	bytec 6 //  "tlps"
	app_global_get
	frame_bury 2 // totalLPSupply: uint64

	// contracts/Mamm.algo.ts:167
	// lpTokensIssued = this.lp_tokens_issued.value
	bytec 7 //  "lpti"
	app_global_get
	frame_bury 3 // lpTokensIssued: uint64

	// contracts/Mamm.algo.ts:170
	// verifyAssetTransferTxn(primaryAssetTransfer, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.primary_token_id.value),
	//       assetAmount: primaryAmount,
	//     })
	// verify sender
	frame_dig -3 // primaryAssetTransfer: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"primaryAssetTransfer","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -3 // primaryAssetTransfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"primaryAssetTransfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -3 // primaryAssetTransfer: AssetTransferTxn
	gtxns XferAsset
	bytec 2 //  "pti"
	app_global_get
	==

	// transaction verification failed: {"txn":"primaryAssetTransfer","field":"xferAsset","expected":"AssetID.fromUint64(this.primary_token_id.value)"}
	assert

	// verify assetAmount
	frame_dig -3 // primaryAssetTransfer: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -1 // primaryAmount: uint64
	==

	// transaction verification failed: {"txn":"primaryAssetTransfer","field":"assetAmount","expected":"primaryAmount"}
	assert

	// contracts/Mamm.algo.ts:176
	// verifyAssetTransferTxn(secondaryAssetTransfer, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.secondary_token_id.value),
	//       assetAmount: secondaryAmount,
	//     })
	// verify sender
	frame_dig -4 // secondaryAssetTransfer: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"secondaryAssetTransfer","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -4 // secondaryAssetTransfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"secondaryAssetTransfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -4 // secondaryAssetTransfer: AssetTransferTxn
	gtxns XferAsset
	bytec 3 //  "sti"
	app_global_get
	==

	// transaction verification failed: {"txn":"secondaryAssetTransfer","field":"xferAsset","expected":"AssetID.fromUint64(this.secondary_token_id.value)"}
	assert

	// verify assetAmount
	frame_dig -4 // secondaryAssetTransfer: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // secondaryAmount: uint64
	==

	// transaction verification failed: {"txn":"secondaryAssetTransfer","field":"assetAmount","expected":"secondaryAmount"}
	assert

	// *if0_condition
	// contracts/Mamm.algo.ts:186
	// lpTokensIssued === 0
	frame_dig 3 // lpTokensIssued: uint64
	intc 0 // 0
	==
	bz *if0_else

	// *if0_consequent
	// contracts/Mamm.algo.ts:187
	// lpTokensMinted = sqrt(primaryAmount * secondaryAmount)
	frame_dig -1 // primaryAmount: uint64
	frame_dig -2 // secondaryAmount: uint64
	*
	sqrt
	frame_bury 4 // lpTokensMinted: uint64
	b *if0_end

*if0_else:
	// contracts/Mamm.algo.ts:191
	// mintFromPrimary = wideRatio([primaryAmount, totalLPSupply], [primaryReserve])
	frame_dig -1 // primaryAmount: uint64
	frame_dig 2 // totalLPSupply: uint64
	mulw
	intc 0 // 0
	frame_dig 0 // primaryReserve: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 5 // mintFromPrimary: uint64

	// contracts/Mamm.algo.ts:192
	// mintFromSecondary = wideRatio([secondaryAmount * totalLPSupply], [secondaryReserve])
	intc 0 // 0
	frame_dig -2 // secondaryAmount: uint64
	frame_dig 2 // totalLPSupply: uint64
	*
	intc 0 // 0
	frame_dig 1 // secondaryReserve: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 6 // mintFromSecondary: uint64

	// contracts/Mamm.algo.ts:193
	// lpTokensMinted = this.min(mintFromPrimary, mintFromSecondary)
	frame_dig 6 // mintFromSecondary: uint64
	frame_dig 5 // mintFromPrimary: uint64
	callsub min
	frame_bury 4 // lpTokensMinted: uint64

*if0_end:
	// contracts/Mamm.algo.ts:197
	// this.primary_token_reserve.value = primaryReserve + primaryAmount
	bytec 4 //  "ptr"
	frame_dig 0 // primaryReserve: uint64
	frame_dig -1 // primaryAmount: uint64
	+
	app_global_put

	// contracts/Mamm.algo.ts:198
	// this.secondary_token_reserve.value = secondaryReserve + secondaryAmount
	bytec 5 //  "str"
	frame_dig 1 // secondaryReserve: uint64
	frame_dig -2 // secondaryAmount: uint64
	+
	app_global_put

	// contracts/Mamm.algo.ts:199
	// this.total_lp_supply.value = totalLPSupply - lpTokensMinted
	bytec 6 //  "tlps"
	frame_dig 2 // totalLPSupply: uint64
	frame_dig 4 // lpTokensMinted: uint64
	-
	app_global_put

	// contracts/Mamm.algo.ts:200
	// this.k_value.value = (primaryReserve + primaryAmount) * (secondaryReserve + secondaryAmount)
	bytec 9 //  "k"
	frame_dig 0 // primaryReserve: uint64
	frame_dig -1 // primaryAmount: uint64
	+
	frame_dig 1 // secondaryReserve: uint64
	frame_dig -2 // secondaryAmount: uint64
	+
	*
	app_global_put

	// contracts/Mamm.algo.ts:201
	// this.lp_tokens_issued.value = lpTokensIssued + lpTokensMinted
	bytec 7 //  "lpti"
	frame_dig 3 // lpTokensIssued: uint64
	frame_dig 4 // lpTokensMinted: uint64
	+
	app_global_put

	// contracts/Mamm.algo.ts:204
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.lp_token_id.value),
	//       assetReceiver: this.txn.sender,
	//       assetAmount: lpTokensMinted,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:205
	// xferAsset: AssetID.fromUint64(this.lp_token_id.value)
	bytec 8 //  "lp"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:206
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:207
	// assetAmount: lpTokensMinted
	frame_dig 4 // lpTokensMinted: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// removeLiquidity(axfer,uint64)void
*abi_route_removeLiquidity:
	// lpTokensBurned: uint64
	txna ApplicationArgs 1
	btoi

	// burnTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 2 //  axfer
	==

	// argument 1 (burnTxn) for removeLiquidity must be a axfer transaction
	assert

	// execute removeLiquidity(axfer,uint64)void
	callsub removeLiquidity
	intc 1 // 1
	return

// removeLiquidity(burnTxn: AssetTransferTxn, lpTokensBurned: uint64): void
removeLiquidity:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts/Mamm.algo.ts:212
	// primaryReserve = this.primary_token_reserve.value
	bytec 4 //  "ptr"
	app_global_get
	frame_bury 0 // primaryReserve: uint64

	// contracts/Mamm.algo.ts:213
	// secondaryReserve = this.secondary_token_reserve.value
	bytec 5 //  "str"
	app_global_get
	frame_bury 1 // secondaryReserve: uint64

	// contracts/Mamm.algo.ts:214
	// totalLPSupply = this.total_lp_supply.value
	bytec 6 //  "tlps"
	app_global_get
	frame_bury 2 // totalLPSupply: uint64

	// contracts/Mamm.algo.ts:217
	// assert(lpTokensBurned > 0, 'Invalid LP amount')
	frame_dig -2 // lpTokensBurned: uint64
	intc 0 // 0
	>

	// Invalid LP amount
	assert

	// contracts/Mamm.algo.ts:218
	// assert(lpTokensBurned <= totalLPSupply, 'Not enough LP supply')
	frame_dig -2 // lpTokensBurned: uint64
	frame_dig 2 // totalLPSupply: uint64
	<=

	// Not enough LP supply
	assert

	// contracts/Mamm.algo.ts:220
	// verifyAssetTransferTxn(burnTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.lp_token_id.value),
	//       assetAmount: lpTokensBurned,
	//     })
	// verify sender
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"burnTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"burnTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns XferAsset
	bytec 8 //  "lp"
	app_global_get
	==

	// transaction verification failed: {"txn":"burnTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.lp_token_id.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // lpTokensBurned: uint64
	==

	// transaction verification failed: {"txn":"burnTxn","field":"assetAmount","expected":"lpTokensBurned"}
	assert

	// contracts/Mamm.algo.ts:228
	// primaryWithdrawn = wideRatio([lpTokensBurned, primaryReserve], [totalLPSupply])
	frame_dig -2 // lpTokensBurned: uint64
	frame_dig 0 // primaryReserve: uint64
	mulw
	intc 0 // 0
	frame_dig 2 // totalLPSupply: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 3 // primaryWithdrawn: uint64

	// contracts/Mamm.algo.ts:229
	// secondaryWithdrawn = wideRatio([lpTokensBurned, secondaryReserve], [totalLPSupply])
	frame_dig -2 // lpTokensBurned: uint64
	frame_dig 1 // secondaryReserve: uint64
	mulw
	intc 0 // 0
	frame_dig 2 // totalLPSupply: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 4 // secondaryWithdrawn: uint64

	// contracts/Mamm.algo.ts:232
	// this.primary_token_reserve.value = primaryReserve - primaryWithdrawn
	bytec 4 //  "ptr"
	frame_dig 0 // primaryReserve: uint64
	frame_dig 3 // primaryWithdrawn: uint64
	-
	app_global_put

	// contracts/Mamm.algo.ts:233
	// this.secondary_token_reserve.value = secondaryReserve - secondaryWithdrawn
	bytec 5 //  "str"
	frame_dig 1 // secondaryReserve: uint64
	frame_dig 4 // secondaryWithdrawn: uint64
	-
	app_global_put

	// contracts/Mamm.algo.ts:234
	// this.total_lp_supply.value = totalLPSupply - lpTokensBurned
	bytec 6 //  "tlps"
	frame_dig 2 // totalLPSupply: uint64
	frame_dig -2 // lpTokensBurned: uint64
	-
	app_global_put

	// contracts/Mamm.algo.ts:235
	// this.k_value.value = (primaryReserve - primaryWithdrawn) * (secondaryReserve - secondaryWithdrawn)
	bytec 9 //  "k"
	frame_dig 0 // primaryReserve: uint64
	frame_dig 3 // primaryWithdrawn: uint64
	-
	frame_dig 1 // secondaryReserve: uint64
	frame_dig 4 // secondaryWithdrawn: uint64
	-
	*
	app_global_put

	// contracts/Mamm.algo.ts:238
	// this.total_lp_supply.value = this.total_lp_supply.value + lpTokensBurned
	bytec 6 //  "tlps"
	dup
	app_global_get
	frame_dig -2 // lpTokensBurned: uint64
	+
	app_global_put

	// contracts/Mamm.algo.ts:239
	// this.lp_tokens_issued.value = this.lp_tokens_issued.value - lpTokensBurned
	bytec 7 //  "lpti"
	dup
	app_global_get
	frame_dig -2 // lpTokensBurned: uint64
	-
	app_global_put

	// *if1_condition
	// contracts/Mamm.algo.ts:242
	// this.primary_token_id.value !== 0
	bytec 2 //  "pti"
	app_global_get
	intc 0 // 0
	!=
	bz *if1_else

	// *if1_consequent
	// contracts/Mamm.algo.ts:243
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.primary_token_id.value),
	//         assetReceiver: this.txn.sender,
	//         assetAmount: primaryWithdrawn,
	//       })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:244
	// xferAsset: AssetID.fromUint64(this.primary_token_id.value)
	bytec 2 //  "pti"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:245
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:246
	// assetAmount: primaryWithdrawn
	frame_dig 3 // primaryWithdrawn: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if1_end

*if1_else:
	// contracts/Mamm.algo.ts:249
	// sendPayment({
	//         receiver: this.txn.sender,
	//         amount: primaryWithdrawn,
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:250
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/Mamm.algo.ts:251
	// amount: primaryWithdrawn
	frame_dig 3 // primaryWithdrawn: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	// *if2_condition
	// contracts/Mamm.algo.ts:254
	// this.secondary_token_id.value !== 0
	bytec 3 //  "sti"
	app_global_get
	intc 0 // 0
	!=
	bz *if2_else

	// *if2_consequent
	// contracts/Mamm.algo.ts:255
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.secondary_token_id.value),
	//         assetReceiver: this.txn.sender,
	//         assetAmount: secondaryWithdrawn,
	//       })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:256
	// xferAsset: AssetID.fromUint64(this.secondary_token_id.value)
	bytec 3 //  "sti"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:257
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:258
	// assetAmount: secondaryWithdrawn
	frame_dig 4 // secondaryWithdrawn: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if2_end

*if2_else:
	// contracts/Mamm.algo.ts:261
	// sendPayment({
	//         receiver: this.txn.sender,
	//         amount: secondaryWithdrawn,
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:262
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/Mamm.algo.ts:263
	// amount: secondaryWithdrawn
	frame_dig 4 // secondaryWithdrawn: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if2_end:
	retsub

// swap(uint64,uint64)void
*abi_route_swap:
	// swapType: uint64
	txna ApplicationArgs 2
	btoi

	// inputAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute swap(uint64,uint64)void
	callsub swap
	intc 1 // 1
	return

// swap(inputAmount: uint64, swapType: uint64): void
swap:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 15

	// contracts/Mamm.algo.ts:271
	// primaryReserve = this.primary_token_reserve.value
	bytec 4 //  "ptr"
	app_global_get
	frame_bury 0 // primaryReserve: uint64

	// contracts/Mamm.algo.ts:272
	// secondaryReserve = this.secondary_token_reserve.value
	bytec 5 //  "str"
	app_global_get
	frame_bury 1 // secondaryReserve: uint64

	// contracts/Mamm.algo.ts:273
	// swapFeeBps = this.swap_fee_bps.value
	bytec 12 //  "sfbps"
	app_global_get
	frame_bury 2 // swapFeeBps: uint64

	// contracts/Mamm.algo.ts:274
	// protocolFeeBps = this.protocol_fee_bps.value
	bytec 13 //  "pfbps"
	app_global_get
	frame_bury 3 // protocolFeeBps: uint64

	// contracts/Mamm.algo.ts:275
	// protocolReceiver = this.treasury_address.value
	bytec 10 //  "treasury"
	app_global_get
	frame_bury 4 // protocolReceiver: address

	// contracts/Mamm.algo.ts:277
	// reserveIn: uint64 = 0
	intc 0 // 0
	frame_bury 5 // reserveIn: uint64

	// contracts/Mamm.algo.ts:278
	// reserveOut: uint64 = 0
	intc 0 // 0
	frame_bury 6 // reserveOut: uint64

	// *if3_condition
	// contracts/Mamm.algo.ts:281
	// swapType === 0
	frame_dig -2 // swapType: uint64
	intc 0 // 0
	==
	bz *if3_elseif1_condition

	// *if3_consequent
	// contracts/Mamm.algo.ts:282
	// reserveIn = primaryReserve
	frame_dig 0 // primaryReserve: uint64
	frame_bury 5 // reserveIn: uint64

	// contracts/Mamm.algo.ts:283
	// reserveOut = secondaryReserve
	frame_dig 1 // secondaryReserve: uint64
	frame_bury 6 // reserveOut: uint64
	b *if3_end

*if3_elseif1_condition:
	// contracts/Mamm.algo.ts:284
	// swapType === 1
	frame_dig -2 // swapType: uint64
	intc 1 // 1
	==
	bz *if3_else

	// *if3_elseif1_consequent
	// contracts/Mamm.algo.ts:285
	// reserveIn = secondaryReserve
	frame_dig 1 // secondaryReserve: uint64
	frame_bury 5 // reserveIn: uint64

	// contracts/Mamm.algo.ts:286
	// reserveOut = primaryReserve
	frame_dig 0 // primaryReserve: uint64
	frame_bury 6 // reserveOut: uint64
	b *if3_end

*if3_else:
	// contracts/Mamm.algo.ts:288
	// assert(false, 'Invalid swap type')
	intc 0 // 0

	// Invalid swap type
	assert

*if3_end:
	// contracts/Mamm.algo.ts:292
	// assert(inputAmount > 0, 'Invalid input amount')
	frame_dig -1 // inputAmount: uint64
	intc 0 // 0
	>

	// Invalid input amount
	assert

	// contracts/Mamm.algo.ts:296
	// totalFee = wideRatio([inputAmount, swapFeeBps], [10000])
	frame_dig -1 // inputAmount: uint64
	frame_dig 2 // swapFeeBps: uint64
	mulw
	intc 0 // 0
	pushint 10000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 7 // totalFee: uint64

	// contracts/Mamm.algo.ts:297
	// protocolFee = wideRatio([totalFee, protocolFeeBps], [swapFeeBps])
	frame_dig 7 // totalFee: uint64
	frame_dig 3 // protocolFeeBps: uint64
	mulw
	intc 0 // 0
	frame_dig 2 // swapFeeBps: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 8 // protocolFee: uint64

	// contracts/Mamm.algo.ts:298
	// lpFee = totalFee - protocolFee
	frame_dig 7 // totalFee: uint64
	frame_dig 8 // protocolFee: uint64
	-
	frame_bury 9 // lpFee: uint64

	// contracts/Mamm.algo.ts:301
	// inputAfterFee = inputAmount - totalFee
	frame_dig -1 // inputAmount: uint64
	frame_dig 7 // totalFee: uint64
	-
	frame_bury 10 // inputAfterFee: uint64

	// contracts/Mamm.algo.ts:304
	// numerator = reserveOut * inputAfterFee
	frame_dig 6 // reserveOut: uint64
	frame_dig 10 // inputAfterFee: uint64
	*
	frame_bury 11 // numerator: uint64

	// contracts/Mamm.algo.ts:305
	// denominator = reserveIn + inputAfterFee
	frame_dig 5 // reserveIn: uint64
	frame_dig 10 // inputAfterFee: uint64
	+
	frame_bury 12 // denominator: uint64

	// contracts/Mamm.algo.ts:306
	// outputAmount = numerator / denominator
	frame_dig 11 // numerator: uint64
	frame_dig 12 // denominator: uint64
	/
	frame_bury 13 // outputAmount: uint64

	// contracts/Mamm.algo.ts:309
	// assert(outputAmount > 0, 'Swap too small')
	frame_dig 13 // outputAmount: uint64
	intc 0 // 0
	>

	// Swap too small
	assert

	// contracts/Mamm.algo.ts:312
	// newReserveIn = reserveIn + inputAfterFee + lpFee
	frame_dig 5 // reserveIn: uint64
	frame_dig 10 // inputAfterFee: uint64
	+
	frame_dig 9 // lpFee: uint64
	+
	frame_bury 14 // newReserveIn: uint64

	// contracts/Mamm.algo.ts:313
	// newReserveOut = reserveOut - outputAmount
	frame_dig 6 // reserveOut: uint64
	frame_dig 13 // outputAmount: uint64
	-
	frame_bury 15 // newReserveOut: uint64

	// *if4_condition
	// contracts/Mamm.algo.ts:315
	// swapType === 0
	frame_dig -2 // swapType: uint64
	intc 0 // 0
	==
	bz *if4_else

	// *if4_consequent
	// contracts/Mamm.algo.ts:316
	// this.primary_token_reserve.value = newReserveIn
	bytec 4 //  "ptr"
	frame_dig 14 // newReserveIn: uint64
	app_global_put

	// contracts/Mamm.algo.ts:317
	// this.secondary_token_reserve.value = newReserveOut
	bytec 5 //  "str"
	frame_dig 15 // newReserveOut: uint64
	app_global_put
	b *if4_end

*if4_else:
	// contracts/Mamm.algo.ts:319
	// this.secondary_token_reserve.value = newReserveIn
	bytec 5 //  "str"
	frame_dig 14 // newReserveIn: uint64
	app_global_put

	// contracts/Mamm.algo.ts:320
	// this.primary_token_reserve.value = newReserveOut
	bytec 4 //  "ptr"
	frame_dig 15 // newReserveOut: uint64
	app_global_put

*if4_end:
	// contracts/Mamm.algo.ts:324
	// this.k_value.value = newReserveIn * newReserveOut
	bytec 9 //  "k"
	frame_dig 14 // newReserveIn: uint64
	frame_dig 15 // newReserveOut: uint64
	*
	app_global_put

	// *if5_condition
	// contracts/Mamm.algo.ts:327
	// protocolFee > 0
	frame_dig 8 // protocolFee: uint64
	intc 0 // 0
	>
	bz *if5_end

	// *if5_consequent
	// *if6_condition
	// contracts/Mamm.algo.ts:328
	// swapType === 0
	frame_dig -2 // swapType: uint64
	intc 0 // 0
	==
	bz *if6_else

	// *if6_consequent
	// *if7_condition
	// contracts/Mamm.algo.ts:329
	// this.primary_token_id.value !== 0
	bytec 2 //  "pti"
	app_global_get
	intc 0 // 0
	!=
	bz *if7_else

	// *if7_consequent
	// contracts/Mamm.algo.ts:330
	// sendAssetTransfer({
	//             xferAsset: AssetID.fromUint64(this.primary_token_id.value),
	//             assetReceiver: protocolReceiver,
	//             assetAmount: protocolFee,
	//           })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:331
	// xferAsset: AssetID.fromUint64(this.primary_token_id.value)
	bytec 2 //  "pti"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:332
	// assetReceiver: protocolReceiver
	frame_dig 4 // protocolReceiver: address
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:333
	// assetAmount: protocolFee
	frame_dig 8 // protocolFee: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if7_end

*if7_else:
	// contracts/Mamm.algo.ts:336
	// sendPayment({
	//             receiver: protocolReceiver,
	//             amount: protocolFee,
	//           })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:337
	// receiver: protocolReceiver
	frame_dig 4 // protocolReceiver: address
	itxn_field Receiver

	// contracts/Mamm.algo.ts:338
	// amount: protocolFee
	frame_dig 8 // protocolFee: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if7_end:
	b *if6_end

*if6_else:
	// *if8_condition
	// contracts/Mamm.algo.ts:342
	// this.secondary_token_id.value !== 0
	bytec 3 //  "sti"
	app_global_get
	intc 0 // 0
	!=
	bz *if8_else

	// *if8_consequent
	// contracts/Mamm.algo.ts:343
	// sendAssetTransfer({
	//             xferAsset: AssetID.fromUint64(this.secondary_token_id.value),
	//             assetReceiver: protocolReceiver,
	//             assetAmount: protocolFee,
	//           })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:344
	// xferAsset: AssetID.fromUint64(this.secondary_token_id.value)
	bytec 3 //  "sti"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:345
	// assetReceiver: protocolReceiver
	frame_dig 4 // protocolReceiver: address
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:346
	// assetAmount: protocolFee
	frame_dig 8 // protocolFee: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if8_end

*if8_else:
	// contracts/Mamm.algo.ts:349
	// sendPayment({
	//             receiver: protocolReceiver,
	//             amount: protocolFee,
	//           })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:350
	// receiver: protocolReceiver
	frame_dig 4 // protocolReceiver: address
	itxn_field Receiver

	// contracts/Mamm.algo.ts:351
	// amount: protocolFee
	frame_dig 8 // protocolFee: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if8_end:

*if6_end:

*if5_end:
	// *if9_condition
	// contracts/Mamm.algo.ts:358
	// swapType === 0
	frame_dig -2 // swapType: uint64
	intc 0 // 0
	==
	bz *if9_end

	// *if9_consequent
	// *if10_condition
	// contracts/Mamm.algo.ts:359
	// this.secondary_token_id.value === 0
	bytec 3 //  "sti"
	app_global_get
	intc 0 // 0
	==
	bz *if10_else

	// *if10_consequent
	// contracts/Mamm.algo.ts:360
	// sendPayment({
	//           receiver: this.txn.sender,
	//           amount: outputAmount,
	//         })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:361
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/Mamm.algo.ts:362
	// amount: outputAmount
	frame_dig 13 // outputAmount: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if10_end

*if10_else:
	// contracts/Mamm.algo.ts:365
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.secondary_token_id.value),
	//           assetReceiver: this.txn.sender,
	//           assetAmount: outputAmount,
	//         })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:366
	// xferAsset: AssetID.fromUint64(this.secondary_token_id.value)
	bytec 3 //  "sti"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:367
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:368
	// assetAmount: outputAmount
	frame_dig 13 // outputAmount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if10_end:

*if9_end:
	// *if11_condition
	// contracts/Mamm.algo.ts:372
	// swapType === 1
	frame_dig -2 // swapType: uint64
	intc 1 // 1
	==
	bz *if11_end

	// *if11_consequent
	// *if12_condition
	// contracts/Mamm.algo.ts:373
	// this.primary_token_id.value === 0
	bytec 2 //  "pti"
	app_global_get
	intc 0 // 0
	==
	bz *if12_else

	// *if12_consequent
	// contracts/Mamm.algo.ts:374
	// sendPayment({
	//           receiver: this.txn.sender,
	//           amount: outputAmount,
	//         })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:375
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/Mamm.algo.ts:376
	// amount: outputAmount
	frame_dig 13 // outputAmount: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if12_end

*if12_else:
	// contracts/Mamm.algo.ts:379
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.primary_token_id.value),
	//           assetReceiver: this.txn.sender,
	//           assetAmount: outputAmount,
	//         })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:380
	// xferAsset: AssetID.fromUint64(this.primary_token_id.value)
	bytec 2 //  "pti"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:381
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:382
	// assetAmount: outputAmount
	frame_dig 13 // outputAmount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if12_end:

*if11_end:
	retsub

// min(a: uint64, b: uint64): uint64
min:
	proto 2 1

	// contracts/Mamm.algo.ts:390
	// return a < b ? a : b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	<
	bz *ternary0_false
	frame_dig -1 // a: uint64
	b *ternary0_end

*ternary0_false:
	frame_dig -2 // b: uint64

*ternary0_end:
	retsub

// updateSwapFee(uint64)void
*abi_route_updateSwapFee:
	// newFee: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateSwapFee(uint64)void
	callsub updateSwapFee
	intc 1 // 1
	return

// updateSwapFee(newFee: uint64): void
updateSwapFee:
	proto 1 0

	// contracts/Mamm.algo.ts:397
	// assert(this.admin.value === this.txn.sender, 'Only admin can update the swap fee')
	bytec 1 //  "admin"
	app_global_get
	txn Sender
	==

	// Only admin can update the swap fee
	assert

	// contracts/Mamm.algo.ts:398
	// this.swap_fee_bps.value = newFee
	bytec 12 //  "sfbps"
	frame_dig -1 // newFee: uint64
	app_global_put
	retsub

// updateProtocolFee(uint64)void
*abi_route_updateProtocolFee:
	// newFee: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateProtocolFee(uint64)void
	callsub updateProtocolFee
	intc 1 // 1
	return

// updateProtocolFee(newFee: uint64): void
updateProtocolFee:
	proto 1 0

	// contracts/Mamm.algo.ts:403
	// assert(this.admin.value === this.txn.sender, 'Only admin can update the protocol fee')
	bytec 1 //  "admin"
	app_global_get
	txn Sender
	==

	// Only admin can update the protocol fee
	assert

	// contracts/Mamm.algo.ts:404
	// this.protocol_fee_bps.value = newFee
	bytec 13 //  "pfbps"
	frame_dig -1 // newFee: uint64
	app_global_put
	retsub

// updateAdmin(address)void
*abi_route_updateAdmin:
	// newAdmin: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 0 (newAdmin) for updateAdmin must be a address
	assert

	// execute updateAdmin(address)void
	callsub updateAdmin
	intc 1 // 1
	return

// updateAdmin(newAdmin: Address): void
updateAdmin:
	proto 1 0

	// contracts/Mamm.algo.ts:409
	// assert(this.admin.value === this.txn.sender, 'Only admin can update the admin address')
	bytec 1 //  "admin"
	app_global_get
	txn Sender
	==

	// Only admin can update the admin address
	assert

	// contracts/Mamm.algo.ts:410
	// this.admin.value = newAdmin
	bytec 1 //  "admin"
	frame_dig -1 // newAdmin: Address
	app_global_put
	retsub

// updateTreasury(address)void
*abi_route_updateTreasury:
	// newTreasury: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 0 (newTreasury) for updateTreasury must be a address
	assert

	// execute updateTreasury(address)void
	callsub updateTreasury
	intc 1 // 1
	return

// updateTreasury(newTreasury: Address): void
updateTreasury:
	proto 1 0

	// contracts/Mamm.algo.ts:415
	// assert(this.admin.value === this.txn.sender, 'Only admin can update the treasury address')
	bytec 1 //  "admin"
	app_global_get
	txn Sender
	==

	// Only admin can update the treasury address
	assert

	// contracts/Mamm.algo.ts:416
	// this.treasury_address.value = newTreasury
	bytec 10 //  "treasury"
	frame_dig -1 // newTreasury: Address
	app_global_put
	retsub

// updateMinimumBalance(uint64)void
*abi_route_updateMinimumBalance:
	// newMBR: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateMinimumBalance(uint64)void
	callsub updateMinimumBalance
	intc 1 // 1
	return

// updateMinimumBalance(newMBR: uint64): void
updateMinimumBalance:
	proto 1 0

	// contracts/Mamm.algo.ts:421
	// assert(this.admin.value === this.txn.sender, 'Only admin can update the minimum balance requirement')
	bytec 1 //  "admin"
	app_global_get
	txn Sender
	==

	// Only admin can update the minimum balance requirement
	assert

	// contracts/Mamm.algo.ts:422
	// this.minimum_balance.value = newMBR
	bytec 11 //  "minbal"
	frame_dig -1 // newMBR: uint64
	app_global_put
	retsub

// updateContractEnding(uint64)void
*abi_route_updateContractEnding:
	// newEnding: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateContractEnding(uint64)void
	callsub updateContractEnding
	intc 1 // 1
	return

// updateContractEnding(newEnding: uint64): void
updateContractEnding:
	proto 1 0

	// contracts/Mamm.algo.ts:426
	// assert(this.admin.value === this.txn.sender, 'Only admin can update the contract ending')
	bytec 1 //  "admin"
	app_global_get
	txn Sender
	==

	// Only admin can update the contract ending
	assert

	// contracts/Mamm.algo.ts:427
	// this.contract_ending.value = newEnding
	bytec 14 //  "end"
	frame_dig -1 // newEnding: uint64
	app_global_put
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x0c2ffa79 // method "initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void"
	pushbytes 0xfc228d23 // method "addLiquidity(uint64,uint64,axfer,axfer)void"
	pushbytes 0x1256dc48 // method "removeLiquidity(axfer,uint64)void"
	pushbytes 0xaf507524 // method "swap(uint64,uint64)void"
	pushbytes 0xe1ce854d // method "updateSwapFee(uint64)void"
	pushbytes 0xf61555df // method "updateProtocolFee(uint64)void"
	pushbytes 0xeed1a1c0 // method "updateAdmin(address)void"
	pushbytes 0x61c274af // method "updateTreasury(address)void"
	pushbytes 0x736aa924 // method "updateMinimumBalance(uint64)void"
	pushbytes 0x1a49d9ba // method "updateContractEnding(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_initApplication *abi_route_addLiquidity *abi_route_removeLiquidity *abi_route_swap *abi_route_updateSwapFee *abi_route_updateProtocolFee *abi_route_updateAdmin *abi_route_updateTreasury *abi_route_updateMinimumBalance *abi_route_updateContractEnding

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err