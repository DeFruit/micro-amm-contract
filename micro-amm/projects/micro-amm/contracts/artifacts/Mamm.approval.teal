#pragma version 11
intcblock 0 1 4 300000 6
bytecblock 0x 0x746c7073 0x707472 0x737472 0x6c70 0x61646d696e 0x6c706e 0x6c7073 0x6c7064 0x6c7075 0x707469 0x737469 0x6b

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 4 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/Mamm.algo.ts:39
	// this.admin.value = this.txn.sender
	bytec 5 //  "admin"
	txn Sender
	app_global_put
	retsub

// initApplication(pay,uint64,uint64,string,string)void
*abi_route_initApplication:
	// lpAssetURL: string
	txna ApplicationArgs 4
	extract 2 0

	// lpAssetName: string
	txna ApplicationArgs 3
	extract 2 0

	// secondaryAssetId: uint64
	txna ApplicationArgs 2
	btoi

	// primaryAssetId: uint64
	txna ApplicationArgs 1
	btoi

	// mbrTxn: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 4 (mbrTxn) for initApplication must be a pay transaction
	assert

	// execute initApplication(pay,uint64,uint64,string,string)void
	callsub initApplication
	intc 1 // 1
	return

// initApplication(mbrTxn: PayTxn, primaryAssetId: uint64, secondaryAssetId: uint64, lpAssetName: string, lpAssetURL: string): void
initApplication:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/Mamm.algo.ts:49
	// assert(this.admin.value === this.txn.sender, 'Only admin can initialize the application')
	bytec 5 //  "admin"
	app_global_get
	txn Sender
	==

	// Only admin can initialize the application
	assert

	// contracts/Mamm.algo.ts:51
	// this.primary_token_reserve.value = 0
	bytec 2 //  "ptr"
	intc 0 // 0
	app_global_put

	// contracts/Mamm.algo.ts:52
	// this.secondary_token_reserve.value = 0
	bytec 3 //  "str"
	intc 0 // 0
	app_global_put

	// contracts/Mamm.algo.ts:53
	// this.total_lp_supply.value = 0
	bytec 1 //  "tlps"
	intc 0 // 0
	app_global_put

	// contracts/Mamm.algo.ts:54
	// this.k_value.value = 0
	bytec 12 //  "k"
	intc 0 // 0
	app_global_put

	// contracts/Mamm.algo.ts:55
	// this.lp_token_id.value = 0
	bytec 4 //  "lp"
	intc 0 // 0
	app_global_put

	// contracts/Mamm.algo.ts:56
	// this.lp_token_name.value = lpAssetName
	bytec 6 //  "lpn"
	frame_dig -4 // lpAssetName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/Mamm.algo.ts:57
	// this.lp_token_symbol.value = 'MLP'
	bytec 7 //  "lps"
	pushbytes 0x00034d4c50
	app_global_put

	// contracts/Mamm.algo.ts:58
	// this.lp_token_decimals.value = 6
	bytec 8 //  "lpd"
	intc 4 // 6
	app_global_put

	// contracts/Mamm.algo.ts:59
	// this.lp_token_url.value = lpAssetURL
	bytec 9 //  "lpu"
	frame_dig -5 // lpAssetURL: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/Mamm.algo.ts:60
	// this.contract_version.value = VERSION
	pushbytes 0x76657273696f6e // "version"
	pushint 1000
	app_global_put

	// contracts/Mamm.algo.ts:61
	// this.minimum_balance.value = TOKEN_MBR * 3
	pushbytes 0x6d696e62616c // "minbal"
	intc 3 // 300000
	app_global_put

	// contracts/Mamm.algo.ts:63
	// verifyPayTxn(mbrTxn, { receiver: this.app.address, amount: TOKEN_MBR * 3 })
	// verify receiver
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Amount
	intc 3 // 300000
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","expected":"TOKEN_MBR * 3"}
	assert

	// contracts/Mamm.algo.ts:65
	// this.primary_token_id.value = primaryAssetId
	bytec 10 //  "pti"
	frame_dig -2 // primaryAssetId: uint64
	app_global_put

	// contracts/Mamm.algo.ts:66
	// this.secondary_token_id.value = secondaryAssetId
	bytec 11 //  "sti"
	frame_dig -3 // secondaryAssetId: uint64
	app_global_put

	// contracts/Mamm.algo.ts:69
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.primary_token_id.value),
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:70
	// xferAsset: AssetID.fromUint64(this.primary_token_id.value)
	bytec 10 //  "pti"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:71
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:72
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Mamm.algo.ts:74
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.secondary_token_id.value),
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:75
	// xferAsset: AssetID.fromUint64(this.secondary_token_id.value)
	bytec 11 //  "sti"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:76
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:77
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Mamm.algo.ts:81
	// lpAssetId = sendAssetCreation({
	//       configAssetTotal: 99_999_999_999_999,
	//       configAssetDecimals: this.lp_token_decimals.value,
	//       configAssetName: this.lp_token_name.value,
	//       configAssetUnitName: this.lp_token_symbol.value,
	//       configAssetURL: this.lp_token_url.value,
	//     })
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:82
	// configAssetTotal: 99_999_999_999_999
	pushint 99_999_999_999_999
	itxn_field ConfigAssetTotal

	// contracts/Mamm.algo.ts:83
	// configAssetDecimals: this.lp_token_decimals.value
	bytec 8 //  "lpd"
	app_global_get
	itxn_field ConfigAssetDecimals

	// contracts/Mamm.algo.ts:84
	// configAssetName: this.lp_token_name.value
	bytec 6 //  "lpn"
	app_global_get
	extract 2 0
	itxn_field ConfigAssetName

	// contracts/Mamm.algo.ts:85
	// configAssetUnitName: this.lp_token_symbol.value
	bytec 7 //  "lps"
	app_global_get
	extract 2 0
	itxn_field ConfigAssetUnitName

	// contracts/Mamm.algo.ts:86
	// configAssetURL: this.lp_token_url.value
	bytec 9 //  "lpu"
	app_global_get
	extract 2 0
	itxn_field ConfigAssetURL

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury 0 // lpAssetId: uint64

	// contracts/Mamm.algo.ts:88
	// this.lp_token_id.value = lpAssetId.id
	bytec 4 //  "lp"
	frame_dig 0 // lpAssetId: uint64
	app_global_put
	retsub

// addLiquidity(uint64,uint64)void
*abi_route_addLiquidity:
	// secondaryAmount: uint64
	txna ApplicationArgs 2
	btoi

	// primaryAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute addLiquidity(uint64,uint64)void
	callsub addLiquidity
	intc 1 // 1
	return

// addLiquidity(primaryAmount: uint64, secondaryAmount: uint64): void
addLiquidity:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts/Mamm.algo.ts:92
	// primaryReserve = this.primary_token_reserve.value
	bytec 2 //  "ptr"
	app_global_get
	frame_bury 0 // primaryReserve: uint64

	// contracts/Mamm.algo.ts:93
	// secondaryReserve = this.secondary_token_reserve.value
	bytec 3 //  "str"
	app_global_get
	frame_bury 1 // secondaryReserve: uint64

	// contracts/Mamm.algo.ts:94
	// totalLPSupply = this.total_lp_supply.value
	bytec 1 //  "tlps"
	app_global_get
	frame_bury 2 // totalLPSupply: uint64

	// *if0_condition
	// contracts/Mamm.algo.ts:99
	// totalLPSupply === 0
	frame_dig 2 // totalLPSupply: uint64
	intc 0 // 0
	==
	bz *if0_else

	// *if0_consequent
	// contracts/Mamm.algo.ts:100
	// lpTokensMinted = sqrt(primaryAmount * secondaryAmount)
	frame_dig -1 // primaryAmount: uint64
	frame_dig -2 // secondaryAmount: uint64
	*
	sqrt
	frame_bury 3 // lpTokensMinted: uint64
	b *if0_end

*if0_else:
	// contracts/Mamm.algo.ts:104
	// mintFromOra = (primaryAmount * totalLPSupply) / primaryReserve
	frame_dig -1 // primaryAmount: uint64
	frame_dig 2 // totalLPSupply: uint64
	*
	frame_dig 0 // primaryReserve: uint64
	/
	frame_bury 4 // mintFromOra: uint64

	// contracts/Mamm.algo.ts:105
	// mintFromAlgo = (secondaryAmount * totalLPSupply) / secondaryReserve
	frame_dig -2 // secondaryAmount: uint64
	frame_dig 2 // totalLPSupply: uint64
	*
	frame_dig 1 // secondaryReserve: uint64
	/
	frame_bury 5 // mintFromAlgo: uint64

	// contracts/Mamm.algo.ts:106
	// lpTokensMinted = this.min(mintFromOra, mintFromAlgo)
	frame_dig 5 // mintFromAlgo: uint64
	frame_dig 4 // mintFromOra: uint64
	callsub min
	frame_bury 3 // lpTokensMinted: uint64

*if0_end:
	// contracts/Mamm.algo.ts:110
	// this.primary_token_reserve.value = primaryReserve + primaryAmount
	bytec 2 //  "ptr"
	frame_dig 0 // primaryReserve: uint64
	frame_dig -1 // primaryAmount: uint64
	+
	app_global_put

	// contracts/Mamm.algo.ts:111
	// this.secondary_token_reserve.value = secondaryReserve + secondaryAmount
	bytec 3 //  "str"
	frame_dig 1 // secondaryReserve: uint64
	frame_dig -2 // secondaryAmount: uint64
	+
	app_global_put

	// contracts/Mamm.algo.ts:112
	// this.total_lp_supply.value = totalLPSupply + lpTokensMinted
	bytec 1 //  "tlps"
	frame_dig 2 // totalLPSupply: uint64
	frame_dig 3 // lpTokensMinted: uint64
	+
	app_global_put

	// contracts/Mamm.algo.ts:113
	// this.k_value.value = (primaryReserve + primaryAmount) * (secondaryReserve + secondaryAmount)
	bytec 12 //  "k"
	frame_dig 0 // primaryReserve: uint64
	frame_dig -1 // primaryAmount: uint64
	+
	frame_dig 1 // secondaryReserve: uint64
	frame_dig -2 // secondaryAmount: uint64
	+
	*
	app_global_put

	// contracts/Mamm.algo.ts:116
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.lp_token_id.value),
	//       assetReceiver: this.txn.sender,
	//       assetAmount: lpTokensMinted,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Mamm.algo.ts:117
	// xferAsset: AssetID.fromUint64(this.lp_token_id.value)
	bytec 4 //  "lp"
	app_global_get
	itxn_field XferAsset

	// contracts/Mamm.algo.ts:118
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/Mamm.algo.ts:119
	// assetAmount: lpTokensMinted
	frame_dig 3 // lpTokensMinted: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// min(a: uint64, b: uint64): uint64
min:
	proto 2 1

	// contracts/Mamm.algo.ts:124
	// return a < b ? a : b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	<
	bz *ternary0_false
	frame_dig -1 // a: uint64
	b *ternary0_end

*ternary0_false:
	frame_dig -2 // b: uint64

*ternary0_end:
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xb6436df2 // method "initApplication(pay,uint64,uint64,string,string)void"
	pushbytes 0x132dd567 // method "addLiquidity(uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_initApplication *abi_route_addLiquidity

	// this contract does not implement the given ABI method for call NoOp
	err