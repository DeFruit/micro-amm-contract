/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Mamm","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"initApplication","args":[{"name":"mbrTxn","type":"pay"},{"name":"primaryAssetId","type":"uint64"},{"name":"secondaryAssetId","type":"uint64"},{"name":"lpAssetName","type":"string"},{"name":"lpAssetURL","type":"string"},{"name":"swapFeeBps","type":"uint64"},{"name":"protocolFeeBps","type":"uint64"},{"name":"treasuryAddress","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLiquidity","args":[{"name":"primaryAmount","type":"uint64"},{"name":"secondaryAmount","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"removeLiquidity","args":[{"name":"burnTxn","type":"axfer"},{"name":"lpTokensBurned","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"swap","args":[{"name":"inputAmount","type":"uint64"},{"name":"swapType","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":5,"ints":12},"local":{"bytes":0,"ints":0}},"keys":{"global":{"primary_token_reserve":{"key":"cHRy","keyType":"AVMBytes","valueType":"uint64"},"secondary_token_reserve":{"key":"c3Ry","keyType":"AVMBytes","valueType":"uint64"},"primary_token_id":{"key":"cHRp","keyType":"AVMBytes","valueType":"uint64"},"secondary_token_id":{"key":"c3Rp","keyType":"AVMBytes","valueType":"uint64"},"total_lp_supply":{"key":"dGxwcw==","keyType":"AVMBytes","valueType":"uint64"},"k_value":{"key":"aw==","keyType":"AVMBytes","valueType":"uint64"},"lp_token_id":{"key":"bHA=","keyType":"AVMBytes","valueType":"uint64"},"lp_token_name":{"key":"bHBu","keyType":"AVMBytes","valueType":"string"},"lp_token_symbol":{"key":"bHBz","keyType":"AVMBytes","valueType":"string"},"lp_token_decimals":{"key":"bHBk","keyType":"AVMBytes","valueType":"uint64"},"lp_token_url":{"key":"bHB1","keyType":"AVMBytes","valueType":"string"},"swap_fee_bps":{"key":"c2ZicHM=","keyType":"AVMBytes","valueType":"uint64"},"protocol_fee_bps":{"key":"cGZicHM=","keyType":"AVMBytes","valueType":"uint64"},"admin":{"key":"YWRtaW4=","keyType":"AVMBytes","valueType":"address"},"treasury_address":{"key":"dHJlYXN1cnk=","keyType":"AVMBytes","valueType":"address"},"minimum_balance":{"key":"bWluYmFs","keyType":"AVMBytes","valueType":"uint64"},"contract_version":{"key":"dmVyc2lvbg==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/Mamm.algo.ts:13","pc":[0]},{"teal":2,"source":"contracts/Mamm.algo.ts:13","pc":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},{"teal":3,"source":"contracts/Mamm.algo.ts:13","pc":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88]},{"teal":15,"source":"contracts/Mamm.algo.ts:13","pc":[89,90]},{"teal":16,"source":"contracts/Mamm.algo.ts:13","pc":[91]},{"teal":17,"source":"contracts/Mamm.algo.ts:13","pc":[92,93]},{"teal":18,"source":"contracts/Mamm.algo.ts:13","pc":[94]},{"teal":19,"source":"contracts/Mamm.algo.ts:13","pc":[95,96]},{"teal":20,"source":"contracts/Mamm.algo.ts:13","pc":[97]},{"teal":21,"source":"contracts/Mamm.algo.ts:13","pc":[98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123]},{"teal":25,"source":"contracts/Mamm.algo.ts:13","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[124]},{"teal":30,"source":"contracts/Mamm.algo.ts:55","pc":[125,126,127]},{"teal":31,"source":"contracts/Mamm.algo.ts:55","pc":[128]},{"teal":32,"source":"contracts/Mamm.algo.ts:55","pc":[129]},{"teal":36,"source":"contracts/Mamm.algo.ts:55","pc":[130,131,132]},{"teal":40,"source":"contracts/Mamm.algo.ts:56","pc":[133,134]},{"teal":41,"source":"contracts/Mamm.algo.ts:56","pc":[135,136]},{"teal":42,"source":"contracts/Mamm.algo.ts:56","pc":[137]},{"teal":43,"source":"contracts/Mamm.algo.ts:55","pc":[138]},{"teal":48,"source":"contracts/Mamm.algo.ts:68","pc":[139,140,141]},{"teal":49,"source":"contracts/Mamm.algo.ts:68","pc":[142]},{"teal":50,"source":"contracts/Mamm.algo.ts:68","pc":[143]},{"teal":51,"source":"contracts/Mamm.algo.ts:68","pc":[144,145]},{"teal":52,"source":"contracts/Mamm.algo.ts:68","pc":[146]},{"teal":55,"source":"contracts/Mamm.algo.ts:68","errorMessage":"argument 0 (treasuryAddress) for initApplication must be a address","pc":[147]},{"teal":58,"source":"contracts/Mamm.algo.ts:67","pc":[148,149,150]},{"teal":59,"source":"contracts/Mamm.algo.ts:67","pc":[151]},{"teal":62,"source":"contracts/Mamm.algo.ts:66","pc":[152,153,154]},{"teal":63,"source":"contracts/Mamm.algo.ts:66","pc":[155]},{"teal":66,"source":"contracts/Mamm.algo.ts:65","pc":[156,157,158]},{"teal":67,"source":"contracts/Mamm.algo.ts:65","pc":[159,160,161]},{"teal":70,"source":"contracts/Mamm.algo.ts:64","pc":[162,163,164]},{"teal":71,"source":"contracts/Mamm.algo.ts:64","pc":[165,166,167]},{"teal":74,"source":"contracts/Mamm.algo.ts:63","pc":[168,169,170]},{"teal":75,"source":"contracts/Mamm.algo.ts:63","pc":[171]},{"teal":78,"source":"contracts/Mamm.algo.ts:62","pc":[172,173,174]},{"teal":79,"source":"contracts/Mamm.algo.ts:62","pc":[175]},{"teal":82,"source":"contracts/Mamm.algo.ts:61","pc":[176,177]},{"teal":83,"source":"contracts/Mamm.algo.ts:61","pc":[178]},{"teal":84,"source":"contracts/Mamm.algo.ts:61","pc":[179]},{"teal":85,"source":"contracts/Mamm.algo.ts:61","pc":[180]},{"teal":86,"source":"contracts/Mamm.algo.ts:61","pc":[181,182]},{"teal":87,"source":"contracts/Mamm.algo.ts:61","pc":[183]},{"teal":88,"source":"contracts/Mamm.algo.ts:61","pc":[184]},{"teal":91,"source":"contracts/Mamm.algo.ts:61","errorMessage":"argument 7 (mbrTxn) for initApplication must be a pay transaction","pc":[185]},{"teal":94,"source":"contracts/Mamm.algo.ts:60","pc":[186,187,188]},{"teal":95,"source":"contracts/Mamm.algo.ts:60","pc":[189]},{"teal":96,"source":"contracts/Mamm.algo.ts:60","pc":[190]},{"teal":100,"source":"contracts/Mamm.algo.ts:60","pc":[191,192,193]},{"teal":103,"source":"contracts/Mamm.algo.ts:60","pc":[194]},{"teal":107,"source":"contracts/Mamm.algo.ts:70","pc":[195,196]},{"teal":108,"source":"contracts/Mamm.algo.ts:70","pc":[197]},{"teal":109,"source":"contracts/Mamm.algo.ts:70","pc":[198,199]},{"teal":110,"source":"contracts/Mamm.algo.ts:70","pc":[200]},{"teal":113,"source":"contracts/Mamm.algo.ts:70","errorMessage":"Only admin can initialize the application","pc":[201]},{"teal":117,"source":"contracts/Mamm.algo.ts:72","pc":[202]},{"teal":118,"source":"contracts/Mamm.algo.ts:72","pc":[203]},{"teal":119,"source":"contracts/Mamm.algo.ts:72","pc":[204]},{"teal":123,"source":"contracts/Mamm.algo.ts:73","pc":[205]},{"teal":124,"source":"contracts/Mamm.algo.ts:73","pc":[206]},{"teal":125,"source":"contracts/Mamm.algo.ts:73","pc":[207]},{"teal":129,"source":"contracts/Mamm.algo.ts:74","pc":[208]},{"teal":130,"source":"contracts/Mamm.algo.ts:74","pc":[209]},{"teal":131,"source":"contracts/Mamm.algo.ts:74","pc":[210]},{"teal":135,"source":"contracts/Mamm.algo.ts:75","pc":[211,212]},{"teal":136,"source":"contracts/Mamm.algo.ts:75","pc":[213]},{"teal":137,"source":"contracts/Mamm.algo.ts:75","pc":[214]},{"teal":141,"source":"contracts/Mamm.algo.ts:76","pc":[215,216]},{"teal":142,"source":"contracts/Mamm.algo.ts:76","pc":[217]},{"teal":143,"source":"contracts/Mamm.algo.ts:76","pc":[218]},{"teal":147,"source":"contracts/Mamm.algo.ts:77","pc":[219,220]},{"teal":148,"source":"contracts/Mamm.algo.ts:77","pc":[221,222]},{"teal":149,"source":"contracts/Mamm.algo.ts:77","pc":[223]},{"teal":150,"source":"contracts/Mamm.algo.ts:77","pc":[224]},{"teal":151,"source":"contracts/Mamm.algo.ts:77","pc":[225]},{"teal":152,"source":"contracts/Mamm.algo.ts:77","pc":[226,227,228]},{"teal":153,"source":"contracts/Mamm.algo.ts:77","pc":[229]},{"teal":154,"source":"contracts/Mamm.algo.ts:77","pc":[230]},{"teal":155,"source":"contracts/Mamm.algo.ts:77","pc":[231]},{"teal":159,"source":"contracts/Mamm.algo.ts:78","pc":[232,233]},{"teal":160,"source":"contracts/Mamm.algo.ts:78","pc":[234,235,236,237,238,239,240]},{"teal":161,"source":"contracts/Mamm.algo.ts:78","pc":[241]},{"teal":165,"source":"contracts/Mamm.algo.ts:79","pc":[242,243]},{"teal":166,"source":"contracts/Mamm.algo.ts:79","pc":[244,245]},{"teal":167,"source":"contracts/Mamm.algo.ts:79","pc":[246]},{"teal":171,"source":"contracts/Mamm.algo.ts:80","pc":[247,248]},{"teal":172,"source":"contracts/Mamm.algo.ts:80","pc":[249,250]},{"teal":173,"source":"contracts/Mamm.algo.ts:80","pc":[251]},{"teal":174,"source":"contracts/Mamm.algo.ts:80","pc":[252]},{"teal":175,"source":"contracts/Mamm.algo.ts:80","pc":[253]},{"teal":176,"source":"contracts/Mamm.algo.ts:80","pc":[254,255,256]},{"teal":177,"source":"contracts/Mamm.algo.ts:80","pc":[257]},{"teal":178,"source":"contracts/Mamm.algo.ts:80","pc":[258]},{"teal":179,"source":"contracts/Mamm.algo.ts:80","pc":[259]},{"teal":183,"source":"contracts/Mamm.algo.ts:81","pc":[260,261,262,263,264,265,266,267,268]},{"teal":184,"source":"contracts/Mamm.algo.ts:81","pc":[269,270,271]},{"teal":185,"source":"contracts/Mamm.algo.ts:81","pc":[272]},{"teal":189,"source":"contracts/Mamm.algo.ts:82","pc":[273,274,275,276,277,278,279,280]},{"teal":190,"source":"contracts/Mamm.algo.ts:82","pc":[281,282]},{"teal":191,"source":"contracts/Mamm.algo.ts:82","pc":[283]},{"teal":195,"source":"contracts/Mamm.algo.ts:83","pc":[284,285]},{"teal":196,"source":"contracts/Mamm.algo.ts:83","pc":[286,287]},{"teal":197,"source":"contracts/Mamm.algo.ts:83","pc":[288]},{"teal":201,"source":"contracts/Mamm.algo.ts:84","pc":[289,290]},{"teal":202,"source":"contracts/Mamm.algo.ts:84","pc":[291,292]},{"teal":203,"source":"contracts/Mamm.algo.ts:84","pc":[293]},{"teal":207,"source":"contracts/Mamm.algo.ts:85","pc":[294,295]},{"teal":208,"source":"contracts/Mamm.algo.ts:85","pc":[296,297]},{"teal":209,"source":"contracts/Mamm.algo.ts:85","pc":[298]},{"teal":214,"source":"contracts/Mamm.algo.ts:87","pc":[299,300]},{"teal":215,"source":"contracts/Mamm.algo.ts:87","pc":[301,302]},{"teal":216,"source":"contracts/Mamm.algo.ts:87","pc":[303,304]},{"teal":217,"source":"contracts/Mamm.algo.ts:87","pc":[305]},{"teal":220,"source":"contracts/Mamm.algo.ts:87","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[306]},{"teal":223,"source":"contracts/Mamm.algo.ts:87","pc":[307,308]},{"teal":224,"source":"contracts/Mamm.algo.ts:87","pc":[309,310]},{"teal":225,"source":"contracts/Mamm.algo.ts:87","pc":[311,312]},{"teal":226,"source":"contracts/Mamm.algo.ts:87","pc":[313]},{"teal":229,"source":"contracts/Mamm.algo.ts:87","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"expected\":\"TOKEN_MBR * 3\"}","pc":[314]},{"teal":233,"source":"contracts/Mamm.algo.ts:89","pc":[315,316]},{"teal":234,"source":"contracts/Mamm.algo.ts:89","pc":[317,318]},{"teal":235,"source":"contracts/Mamm.algo.ts:89","pc":[319]},{"teal":239,"source":"contracts/Mamm.algo.ts:90","pc":[320,321]},{"teal":240,"source":"contracts/Mamm.algo.ts:90","pc":[322,323]},{"teal":241,"source":"contracts/Mamm.algo.ts:90","pc":[324]},{"teal":249,"source":"contracts/Mamm.algo.ts:93","pc":[325]},{"teal":250,"source":"contracts/Mamm.algo.ts:93","pc":[326]},{"teal":251,"source":"contracts/Mamm.algo.ts:93","pc":[327,328]},{"teal":255,"source":"contracts/Mamm.algo.ts:94","pc":[329,330]},{"teal":256,"source":"contracts/Mamm.algo.ts:94","pc":[331]},{"teal":257,"source":"contracts/Mamm.algo.ts:94","pc":[332,333]},{"teal":261,"source":"contracts/Mamm.algo.ts:95","pc":[334,335]},{"teal":262,"source":"contracts/Mamm.algo.ts:95","pc":[336,337]},{"teal":266,"source":"contracts/Mamm.algo.ts:96","pc":[338]},{"teal":267,"source":"contracts/Mamm.algo.ts:96","pc":[339,340]},{"teal":270,"source":"contracts/Mamm.algo.ts:93","pc":[341]},{"teal":271,"source":"contracts/Mamm.algo.ts:93","pc":[342,343]},{"teal":274,"source":"contracts/Mamm.algo.ts:93","pc":[344]},{"teal":282,"source":"contracts/Mamm.algo.ts:98","pc":[345]},{"teal":283,"source":"contracts/Mamm.algo.ts:98","pc":[346]},{"teal":284,"source":"contracts/Mamm.algo.ts:98","pc":[347,348]},{"teal":288,"source":"contracts/Mamm.algo.ts:99","pc":[349,350]},{"teal":289,"source":"contracts/Mamm.algo.ts:99","pc":[351]},{"teal":290,"source":"contracts/Mamm.algo.ts:99","pc":[352,353]},{"teal":294,"source":"contracts/Mamm.algo.ts:100","pc":[354,355]},{"teal":295,"source":"contracts/Mamm.algo.ts:100","pc":[356,357]},{"teal":299,"source":"contracts/Mamm.algo.ts:101","pc":[358]},{"teal":300,"source":"contracts/Mamm.algo.ts:101","pc":[359,360]},{"teal":303,"source":"contracts/Mamm.algo.ts:98","pc":[361]},{"teal":304,"source":"contracts/Mamm.algo.ts:98","pc":[362,363]},{"teal":307,"source":"contracts/Mamm.algo.ts:98","pc":[364]},{"teal":317,"source":"contracts/Mamm.algo.ts:105","pc":[365]},{"teal":318,"source":"contracts/Mamm.algo.ts:105","pc":[366,367]},{"teal":319,"source":"contracts/Mamm.algo.ts:105","pc":[368,369]},{"teal":323,"source":"contracts/Mamm.algo.ts:106","pc":[370]},{"teal":324,"source":"contracts/Mamm.algo.ts:106","pc":[371,372]},{"teal":328,"source":"contracts/Mamm.algo.ts:107","pc":[373,374]},{"teal":329,"source":"contracts/Mamm.algo.ts:107","pc":[375]},{"teal":330,"source":"contracts/Mamm.algo.ts:107","pc":[376,377]},{"teal":334,"source":"contracts/Mamm.algo.ts:108","pc":[378,379]},{"teal":335,"source":"contracts/Mamm.algo.ts:108","pc":[380]},{"teal":336,"source":"contracts/Mamm.algo.ts:108","pc":[381,382,383]},{"teal":337,"source":"contracts/Mamm.algo.ts:108","pc":[384,385]},{"teal":341,"source":"contracts/Mamm.algo.ts:109","pc":[386,387]},{"teal":342,"source":"contracts/Mamm.algo.ts:109","pc":[388]},{"teal":343,"source":"contracts/Mamm.algo.ts:109","pc":[389,390,391]},{"teal":344,"source":"contracts/Mamm.algo.ts:109","pc":[392,393]},{"teal":348,"source":"contracts/Mamm.algo.ts:110","pc":[394,395]},{"teal":349,"source":"contracts/Mamm.algo.ts:110","pc":[396]},{"teal":350,"source":"contracts/Mamm.algo.ts:110","pc":[397,398,399]},{"teal":351,"source":"contracts/Mamm.algo.ts:110","pc":[400,401]},{"teal":354,"source":"contracts/Mamm.algo.ts:105","pc":[402]},{"teal":355,"source":"contracts/Mamm.algo.ts:105","pc":[403,404]},{"teal":358,"source":"contracts/Mamm.algo.ts:105","pc":[405]},{"teal":359,"source":"contracts/Mamm.algo.ts:105","pc":[406,407]},{"teal":360,"source":"contracts/Mamm.algo.ts:105","pc":[408,409]},{"teal":364,"source":"contracts/Mamm.algo.ts:112","pc":[410,411]},{"teal":365,"source":"contracts/Mamm.algo.ts:112","pc":[412,413]},{"teal":366,"source":"contracts/Mamm.algo.ts:112","pc":[414]},{"teal":370,"source":"contracts/Mamm.algo.ts:113","pc":[415]},{"teal":371,"source":"contracts/Mamm.algo.ts:113","pc":[416]},{"teal":372,"source":"contracts/Mamm.algo.ts:113","pc":[417]},{"teal":373,"source":"contracts/Mamm.algo.ts:60","pc":[418]},{"teal":378,"source":"contracts/Mamm.algo.ts:117","pc":[419,420,421]},{"teal":379,"source":"contracts/Mamm.algo.ts:117","pc":[422]},{"teal":382,"source":"contracts/Mamm.algo.ts:117","pc":[423,424,425]},{"teal":383,"source":"contracts/Mamm.algo.ts:117","pc":[426]},{"teal":386,"source":"contracts/Mamm.algo.ts:117","pc":[427,428,429]},{"teal":387,"source":"contracts/Mamm.algo.ts:117","pc":[430]},{"teal":388,"source":"contracts/Mamm.algo.ts:117","pc":[431]},{"teal":392,"source":"contracts/Mamm.algo.ts:117","pc":[432,433,434]},{"teal":395,"source":"contracts/Mamm.algo.ts:117","pc":[435]},{"teal":396,"source":"contracts/Mamm.algo.ts:117","pc":[436,437]},{"teal":400,"source":"contracts/Mamm.algo.ts:118","pc":[438]},{"teal":401,"source":"contracts/Mamm.algo.ts:118","pc":[439]},{"teal":402,"source":"contracts/Mamm.algo.ts:118","pc":[440,441]},{"teal":406,"source":"contracts/Mamm.algo.ts:119","pc":[442]},{"teal":407,"source":"contracts/Mamm.algo.ts:119","pc":[443]},{"teal":408,"source":"contracts/Mamm.algo.ts:119","pc":[444,445]},{"teal":412,"source":"contracts/Mamm.algo.ts:120","pc":[446]},{"teal":413,"source":"contracts/Mamm.algo.ts:120","pc":[447]},{"teal":414,"source":"contracts/Mamm.algo.ts:120","pc":[448,449]},{"teal":419,"source":"contracts/Mamm.algo.ts:125","pc":[450,451]},{"teal":420,"source":"contracts/Mamm.algo.ts:125","pc":[452]},{"teal":421,"source":"contracts/Mamm.algo.ts:125","pc":[453]},{"teal":422,"source":"contracts/Mamm.algo.ts:125","pc":[454,455,456]},{"teal":427,"source":"contracts/Mamm.algo.ts:126","pc":[457,458]},{"teal":428,"source":"contracts/Mamm.algo.ts:126","pc":[459,460]},{"teal":429,"source":"contracts/Mamm.algo.ts:126","pc":[461]},{"teal":430,"source":"contracts/Mamm.algo.ts:126","pc":[462]},{"teal":431,"source":"contracts/Mamm.algo.ts:126","pc":[463,464]},{"teal":432,"source":"contracts/Mamm.algo.ts:125","pc":[465,466,467]},{"teal":437,"source":"contracts/Mamm.algo.ts:130","pc":[468,469]},{"teal":438,"source":"contracts/Mamm.algo.ts:130","pc":[470,471]},{"teal":439,"source":"contracts/Mamm.algo.ts:130","pc":[472]},{"teal":440,"source":"contracts/Mamm.algo.ts:130","pc":[473]},{"teal":441,"source":"contracts/Mamm.algo.ts:130","pc":[474,475]},{"teal":442,"source":"contracts/Mamm.algo.ts:130","pc":[476]},{"teal":443,"source":"contracts/Mamm.algo.ts:130","pc":[477]},{"teal":444,"source":"contracts/Mamm.algo.ts:130","pc":[478]},{"teal":445,"source":"contracts/Mamm.algo.ts:130","pc":[479]},{"teal":446,"source":"contracts/Mamm.algo.ts:130","pc":[480]},{"teal":449,"source":"contracts/Mamm.algo.ts:130","errorMessage":"wideRatio failed","pc":[481]},{"teal":450,"source":"contracts/Mamm.algo.ts:130","pc":[482,483]},{"teal":454,"source":"contracts/Mamm.algo.ts:131","pc":[484]},{"teal":455,"source":"contracts/Mamm.algo.ts:131","pc":[485,486]},{"teal":456,"source":"contracts/Mamm.algo.ts:131","pc":[487,488]},{"teal":457,"source":"contracts/Mamm.algo.ts:131","pc":[489]},{"teal":458,"source":"contracts/Mamm.algo.ts:131","pc":[490]},{"teal":459,"source":"contracts/Mamm.algo.ts:131","pc":[491,492]},{"teal":460,"source":"contracts/Mamm.algo.ts:131","pc":[493]},{"teal":461,"source":"contracts/Mamm.algo.ts:131","pc":[494]},{"teal":462,"source":"contracts/Mamm.algo.ts:131","pc":[495]},{"teal":463,"source":"contracts/Mamm.algo.ts:131","pc":[496]},{"teal":464,"source":"contracts/Mamm.algo.ts:131","pc":[497]},{"teal":467,"source":"contracts/Mamm.algo.ts:131","errorMessage":"wideRatio failed","pc":[498]},{"teal":468,"source":"contracts/Mamm.algo.ts:131","pc":[499,500]},{"teal":472,"source":"contracts/Mamm.algo.ts:132","pc":[501,502]},{"teal":473,"source":"contracts/Mamm.algo.ts:132","pc":[503,504]},{"teal":474,"source":"contracts/Mamm.algo.ts:132","pc":[505,506,507]},{"teal":475,"source":"contracts/Mamm.algo.ts:132","pc":[508,509]},{"teal":480,"source":"contracts/Mamm.algo.ts:136","pc":[510]},{"teal":481,"source":"contracts/Mamm.algo.ts:136","pc":[511,512]},{"teal":482,"source":"contracts/Mamm.algo.ts:136","pc":[513,514]},{"teal":483,"source":"contracts/Mamm.algo.ts:136","pc":[515]},{"teal":484,"source":"contracts/Mamm.algo.ts:136","pc":[516]},{"teal":488,"source":"contracts/Mamm.algo.ts:137","pc":[517]},{"teal":489,"source":"contracts/Mamm.algo.ts:137","pc":[518,519]},{"teal":490,"source":"contracts/Mamm.algo.ts:137","pc":[520,521]},{"teal":491,"source":"contracts/Mamm.algo.ts:137","pc":[522]},{"teal":492,"source":"contracts/Mamm.algo.ts:137","pc":[523]},{"teal":496,"source":"contracts/Mamm.algo.ts:138","pc":[524]},{"teal":497,"source":"contracts/Mamm.algo.ts:138","pc":[525,526]},{"teal":498,"source":"contracts/Mamm.algo.ts:138","pc":[527,528]},{"teal":499,"source":"contracts/Mamm.algo.ts:138","pc":[529]},{"teal":500,"source":"contracts/Mamm.algo.ts:138","pc":[530]},{"teal":504,"source":"contracts/Mamm.algo.ts:139","pc":[531,532]},{"teal":505,"source":"contracts/Mamm.algo.ts:139","pc":[533,534]},{"teal":506,"source":"contracts/Mamm.algo.ts:139","pc":[535,536]},{"teal":507,"source":"contracts/Mamm.algo.ts:139","pc":[537]},{"teal":508,"source":"contracts/Mamm.algo.ts:139","pc":[538,539]},{"teal":509,"source":"contracts/Mamm.algo.ts:139","pc":[540,541]},{"teal":510,"source":"contracts/Mamm.algo.ts:139","pc":[542]},{"teal":511,"source":"contracts/Mamm.algo.ts:139","pc":[543]},{"teal":512,"source":"contracts/Mamm.algo.ts:139","pc":[544]},{"teal":520,"source":"contracts/Mamm.algo.ts:142","pc":[545]},{"teal":521,"source":"contracts/Mamm.algo.ts:142","pc":[546]},{"teal":522,"source":"contracts/Mamm.algo.ts:142","pc":[547,548]},{"teal":526,"source":"contracts/Mamm.algo.ts:143","pc":[549,550]},{"teal":527,"source":"contracts/Mamm.algo.ts:143","pc":[551]},{"teal":528,"source":"contracts/Mamm.algo.ts:143","pc":[552,553]},{"teal":532,"source":"contracts/Mamm.algo.ts:144","pc":[554,555]},{"teal":533,"source":"contracts/Mamm.algo.ts:144","pc":[556,557]},{"teal":537,"source":"contracts/Mamm.algo.ts:145","pc":[558,559]},{"teal":538,"source":"contracts/Mamm.algo.ts:145","pc":[560,561]},{"teal":541,"source":"contracts/Mamm.algo.ts:142","pc":[562]},{"teal":542,"source":"contracts/Mamm.algo.ts:142","pc":[563,564]},{"teal":545,"source":"contracts/Mamm.algo.ts:142","pc":[565]},{"teal":549,"source":"contracts/Mamm.algo.ts:147","pc":[566]},{"teal":550,"source":"contracts/Mamm.algo.ts:147","pc":[567]},{"teal":551,"source":"contracts/Mamm.algo.ts:147","pc":[568]},{"teal":552,"source":"contracts/Mamm.algo.ts:147","pc":[569,570]},{"teal":553,"source":"contracts/Mamm.algo.ts:147","pc":[571]},{"teal":554,"source":"contracts/Mamm.algo.ts:147","pc":[572]},{"teal":555,"source":"contracts/Mamm.algo.ts:117","pc":[573]},{"teal":560,"source":"contracts/Mamm.algo.ts:150","pc":[574,575,576]},{"teal":561,"source":"contracts/Mamm.algo.ts:150","pc":[577]},{"teal":564,"source":"contracts/Mamm.algo.ts:150","pc":[578,579]},{"teal":565,"source":"contracts/Mamm.algo.ts:150","pc":[580]},{"teal":566,"source":"contracts/Mamm.algo.ts:150","pc":[581]},{"teal":567,"source":"contracts/Mamm.algo.ts:150","pc":[582]},{"teal":568,"source":"contracts/Mamm.algo.ts:150","pc":[583,584]},{"teal":569,"source":"contracts/Mamm.algo.ts:150","pc":[585]},{"teal":570,"source":"contracts/Mamm.algo.ts:150","pc":[586]},{"teal":573,"source":"contracts/Mamm.algo.ts:150","errorMessage":"argument 1 (burnTxn) for removeLiquidity must be a axfer transaction","pc":[587]},{"teal":576,"source":"contracts/Mamm.algo.ts:150","pc":[588,589,590]},{"teal":577,"source":"contracts/Mamm.algo.ts:150","pc":[591]},{"teal":578,"source":"contracts/Mamm.algo.ts:150","pc":[592]},{"teal":582,"source":"contracts/Mamm.algo.ts:150","pc":[593,594,595]},{"teal":585,"source":"contracts/Mamm.algo.ts:150","pc":[596]},{"teal":586,"source":"contracts/Mamm.algo.ts:150","pc":[597,598]},{"teal":590,"source":"contracts/Mamm.algo.ts:151","pc":[599]},{"teal":591,"source":"contracts/Mamm.algo.ts:151","pc":[600]},{"teal":592,"source":"contracts/Mamm.algo.ts:151","pc":[601,602]},{"teal":596,"source":"contracts/Mamm.algo.ts:152","pc":[603]},{"teal":597,"source":"contracts/Mamm.algo.ts:152","pc":[604]},{"teal":598,"source":"contracts/Mamm.algo.ts:152","pc":[605,606]},{"teal":602,"source":"contracts/Mamm.algo.ts:153","pc":[607]},{"teal":603,"source":"contracts/Mamm.algo.ts:153","pc":[608]},{"teal":604,"source":"contracts/Mamm.algo.ts:153","pc":[609,610]},{"teal":608,"source":"contracts/Mamm.algo.ts:156","pc":[611,612]},{"teal":609,"source":"contracts/Mamm.algo.ts:156","pc":[613]},{"teal":610,"source":"contracts/Mamm.algo.ts:156","pc":[614]},{"teal":613,"source":"contracts/Mamm.algo.ts:156","errorMessage":"Invalid LP amount","pc":[615]},{"teal":617,"source":"contracts/Mamm.algo.ts:157","pc":[616,617]},{"teal":618,"source":"contracts/Mamm.algo.ts:157","pc":[618,619]},{"teal":619,"source":"contracts/Mamm.algo.ts:157","pc":[620]},{"teal":622,"source":"contracts/Mamm.algo.ts:157","errorMessage":"Not enough LP supply","pc":[621]},{"teal":632,"source":"contracts/Mamm.algo.ts:159","pc":[622,623]},{"teal":633,"source":"contracts/Mamm.algo.ts:160","pc":[624,625]},{"teal":634,"source":"contracts/Mamm.algo.ts:160","pc":[626,627]},{"teal":635,"source":"contracts/Mamm.algo.ts:160","pc":[628]},{"teal":638,"source":"contracts/Mamm.algo.ts:160","errorMessage":"transaction verification failed: {\"txn\":\"burnTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[629]},{"teal":641,"source":"contracts/Mamm.algo.ts:159","pc":[630,631]},{"teal":642,"source":"contracts/Mamm.algo.ts:161","pc":[632,633]},{"teal":643,"source":"contracts/Mamm.algo.ts:161","pc":[634,635]},{"teal":644,"source":"contracts/Mamm.algo.ts:161","pc":[636]},{"teal":647,"source":"contracts/Mamm.algo.ts:161","errorMessage":"transaction verification failed: {\"txn\":\"burnTxn\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[637]},{"teal":650,"source":"contracts/Mamm.algo.ts:159","pc":[638,639]},{"teal":651,"source":"contracts/Mamm.algo.ts:162","pc":[640,641]},{"teal":652,"source":"contracts/Mamm.algo.ts:162","pc":[642,643]},{"teal":653,"source":"contracts/Mamm.algo.ts:162","pc":[644]},{"teal":654,"source":"contracts/Mamm.algo.ts:162","pc":[645]},{"teal":657,"source":"contracts/Mamm.algo.ts:162","errorMessage":"transaction verification failed: {\"txn\":\"burnTxn\",\"field\":\"xferAsset\",\"expected\":\"AssetID.fromUint64(this.lp_token_id.value)\"}","pc":[646]},{"teal":660,"source":"contracts/Mamm.algo.ts:159","pc":[647,648]},{"teal":661,"source":"contracts/Mamm.algo.ts:163","pc":[649,650]},{"teal":662,"source":"contracts/Mamm.algo.ts:163","pc":[651,652]},{"teal":663,"source":"contracts/Mamm.algo.ts:163","pc":[653]},{"teal":666,"source":"contracts/Mamm.algo.ts:163","errorMessage":"transaction verification failed: {\"txn\":\"burnTxn\",\"field\":\"assetAmount\",\"expected\":\"lpTokensBurned\"}","pc":[654]},{"teal":670,"source":"contracts/Mamm.algo.ts:167","pc":[655,656]},{"teal":671,"source":"contracts/Mamm.algo.ts:167","pc":[657,658]},{"teal":672,"source":"contracts/Mamm.algo.ts:167","pc":[659]},{"teal":673,"source":"contracts/Mamm.algo.ts:167","pc":[660]},{"teal":674,"source":"contracts/Mamm.algo.ts:167","pc":[661,662]},{"teal":675,"source":"contracts/Mamm.algo.ts:167","pc":[663]},{"teal":676,"source":"contracts/Mamm.algo.ts:167","pc":[664]},{"teal":677,"source":"contracts/Mamm.algo.ts:167","pc":[665]},{"teal":678,"source":"contracts/Mamm.algo.ts:167","pc":[666]},{"teal":679,"source":"contracts/Mamm.algo.ts:167","pc":[667]},{"teal":682,"source":"contracts/Mamm.algo.ts:167","errorMessage":"wideRatio failed","pc":[668]},{"teal":683,"source":"contracts/Mamm.algo.ts:167","pc":[669,670]},{"teal":687,"source":"contracts/Mamm.algo.ts:168","pc":[671,672]},{"teal":688,"source":"contracts/Mamm.algo.ts:168","pc":[673,674]},{"teal":689,"source":"contracts/Mamm.algo.ts:168","pc":[675]},{"teal":690,"source":"contracts/Mamm.algo.ts:168","pc":[676]},{"teal":691,"source":"contracts/Mamm.algo.ts:168","pc":[677,678]},{"teal":692,"source":"contracts/Mamm.algo.ts:168","pc":[679]},{"teal":693,"source":"contracts/Mamm.algo.ts:168","pc":[680]},{"teal":694,"source":"contracts/Mamm.algo.ts:168","pc":[681]},{"teal":695,"source":"contracts/Mamm.algo.ts:168","pc":[682]},{"teal":696,"source":"contracts/Mamm.algo.ts:168","pc":[683]},{"teal":699,"source":"contracts/Mamm.algo.ts:168","errorMessage":"wideRatio failed","pc":[684]},{"teal":700,"source":"contracts/Mamm.algo.ts:168","pc":[685,686]},{"teal":704,"source":"contracts/Mamm.algo.ts:171","pc":[687]},{"teal":705,"source":"contracts/Mamm.algo.ts:171","pc":[688,689]},{"teal":706,"source":"contracts/Mamm.algo.ts:171","pc":[690,691]},{"teal":707,"source":"contracts/Mamm.algo.ts:171","pc":[692]},{"teal":708,"source":"contracts/Mamm.algo.ts:171","pc":[693]},{"teal":712,"source":"contracts/Mamm.algo.ts:172","pc":[694]},{"teal":713,"source":"contracts/Mamm.algo.ts:172","pc":[695,696]},{"teal":714,"source":"contracts/Mamm.algo.ts:172","pc":[697,698]},{"teal":715,"source":"contracts/Mamm.algo.ts:172","pc":[699]},{"teal":716,"source":"contracts/Mamm.algo.ts:172","pc":[700]},{"teal":720,"source":"contracts/Mamm.algo.ts:173","pc":[701]},{"teal":721,"source":"contracts/Mamm.algo.ts:173","pc":[702,703]},{"teal":722,"source":"contracts/Mamm.algo.ts:173","pc":[704,705]},{"teal":723,"source":"contracts/Mamm.algo.ts:173","pc":[706]},{"teal":724,"source":"contracts/Mamm.algo.ts:173","pc":[707]},{"teal":728,"source":"contracts/Mamm.algo.ts:174","pc":[708,709]},{"teal":729,"source":"contracts/Mamm.algo.ts:174","pc":[710,711]},{"teal":730,"source":"contracts/Mamm.algo.ts:174","pc":[712,713]},{"teal":731,"source":"contracts/Mamm.algo.ts:174","pc":[714]},{"teal":732,"source":"contracts/Mamm.algo.ts:174","pc":[715,716]},{"teal":733,"source":"contracts/Mamm.algo.ts:174","pc":[717,718]},{"teal":734,"source":"contracts/Mamm.algo.ts:174","pc":[719]},{"teal":735,"source":"contracts/Mamm.algo.ts:174","pc":[720]},{"teal":736,"source":"contracts/Mamm.algo.ts:174","pc":[721]},{"teal":740,"source":"contracts/Mamm.algo.ts:177","pc":[722]},{"teal":741,"source":"contracts/Mamm.algo.ts:177","pc":[723]},{"teal":742,"source":"contracts/Mamm.algo.ts:177","pc":[724]},{"teal":743,"source":"contracts/Mamm.algo.ts:177","pc":[725,726]},{"teal":744,"source":"contracts/Mamm.algo.ts:177","pc":[727]},{"teal":745,"source":"contracts/Mamm.algo.ts:177","pc":[728]},{"teal":750,"source":"contracts/Mamm.algo.ts:180","pc":[729,730]},{"teal":751,"source":"contracts/Mamm.algo.ts:180","pc":[731]},{"teal":752,"source":"contracts/Mamm.algo.ts:180","pc":[732]},{"teal":753,"source":"contracts/Mamm.algo.ts:180","pc":[733]},{"teal":754,"source":"contracts/Mamm.algo.ts:180","pc":[734,735,736]},{"teal":763,"source":"contracts/Mamm.algo.ts:181","pc":[737]},{"teal":764,"source":"contracts/Mamm.algo.ts:181","pc":[738]},{"teal":765,"source":"contracts/Mamm.algo.ts:181","pc":[739,740]},{"teal":769,"source":"contracts/Mamm.algo.ts:182","pc":[741,742]},{"teal":770,"source":"contracts/Mamm.algo.ts:182","pc":[743]},{"teal":771,"source":"contracts/Mamm.algo.ts:182","pc":[744,745]},{"teal":775,"source":"contracts/Mamm.algo.ts:183","pc":[746,747]},{"teal":776,"source":"contracts/Mamm.algo.ts:183","pc":[748,749]},{"teal":780,"source":"contracts/Mamm.algo.ts:184","pc":[750,751]},{"teal":781,"source":"contracts/Mamm.algo.ts:184","pc":[752,753]},{"teal":784,"source":"contracts/Mamm.algo.ts:181","pc":[754]},{"teal":785,"source":"contracts/Mamm.algo.ts:181","pc":[755,756]},{"teal":788,"source":"contracts/Mamm.algo.ts:181","pc":[757]},{"teal":789,"source":"contracts/Mamm.algo.ts:180","pc":[758,759,760]},{"teal":797,"source":"contracts/Mamm.algo.ts:187","pc":[761]},{"teal":798,"source":"contracts/Mamm.algo.ts:187","pc":[762]},{"teal":799,"source":"contracts/Mamm.algo.ts:187","pc":[763,764]},{"teal":803,"source":"contracts/Mamm.algo.ts:188","pc":[765,766]},{"teal":804,"source":"contracts/Mamm.algo.ts:188","pc":[767,768]},{"teal":808,"source":"contracts/Mamm.algo.ts:189","pc":[769,770]},{"teal":809,"source":"contracts/Mamm.algo.ts:189","pc":[771,772]},{"teal":812,"source":"contracts/Mamm.algo.ts:187","pc":[773]},{"teal":813,"source":"contracts/Mamm.algo.ts:187","pc":[774,775]},{"teal":816,"source":"contracts/Mamm.algo.ts:187","pc":[776]},{"teal":822,"source":"contracts/Mamm.algo.ts:192","pc":[777,778]},{"teal":823,"source":"contracts/Mamm.algo.ts:192","pc":[779]},{"teal":824,"source":"contracts/Mamm.algo.ts:192","pc":[780]},{"teal":825,"source":"contracts/Mamm.algo.ts:192","pc":[781]},{"teal":826,"source":"contracts/Mamm.algo.ts:192","pc":[782,783,784]},{"teal":835,"source":"contracts/Mamm.algo.ts:193","pc":[785]},{"teal":836,"source":"contracts/Mamm.algo.ts:193","pc":[786]},{"teal":837,"source":"contracts/Mamm.algo.ts:193","pc":[787,788]},{"teal":841,"source":"contracts/Mamm.algo.ts:194","pc":[789,790]},{"teal":842,"source":"contracts/Mamm.algo.ts:194","pc":[791]},{"teal":843,"source":"contracts/Mamm.algo.ts:194","pc":[792,793]},{"teal":847,"source":"contracts/Mamm.algo.ts:195","pc":[794,795]},{"teal":848,"source":"contracts/Mamm.algo.ts:195","pc":[796,797]},{"teal":852,"source":"contracts/Mamm.algo.ts:196","pc":[798,799]},{"teal":853,"source":"contracts/Mamm.algo.ts:196","pc":[800,801]},{"teal":856,"source":"contracts/Mamm.algo.ts:193","pc":[802]},{"teal":857,"source":"contracts/Mamm.algo.ts:193","pc":[803,804]},{"teal":860,"source":"contracts/Mamm.algo.ts:193","pc":[805]},{"teal":861,"source":"contracts/Mamm.algo.ts:192","pc":[806,807,808]},{"teal":869,"source":"contracts/Mamm.algo.ts:199","pc":[809]},{"teal":870,"source":"contracts/Mamm.algo.ts:199","pc":[810]},{"teal":871,"source":"contracts/Mamm.algo.ts:199","pc":[811,812]},{"teal":875,"source":"contracts/Mamm.algo.ts:200","pc":[813,814]},{"teal":876,"source":"contracts/Mamm.algo.ts:200","pc":[815,816]},{"teal":880,"source":"contracts/Mamm.algo.ts:201","pc":[817,818]},{"teal":881,"source":"contracts/Mamm.algo.ts:201","pc":[819,820]},{"teal":884,"source":"contracts/Mamm.algo.ts:199","pc":[821]},{"teal":885,"source":"contracts/Mamm.algo.ts:199","pc":[822,823]},{"teal":888,"source":"contracts/Mamm.algo.ts:199","pc":[824]},{"teal":891,"source":"contracts/Mamm.algo.ts:150","pc":[825]},{"teal":896,"source":"contracts/Mamm.algo.ts:208","pc":[826,827,828]},{"teal":897,"source":"contracts/Mamm.algo.ts:208","pc":[829]},{"teal":900,"source":"contracts/Mamm.algo.ts:208","pc":[830,831,832]},{"teal":901,"source":"contracts/Mamm.algo.ts:208","pc":[833]},{"teal":904,"source":"contracts/Mamm.algo.ts:208","pc":[834,835,836]},{"teal":905,"source":"contracts/Mamm.algo.ts:208","pc":[837]},{"teal":906,"source":"contracts/Mamm.algo.ts:208","pc":[838]},{"teal":910,"source":"contracts/Mamm.algo.ts:208","pc":[839,840,841]},{"teal":913,"source":"contracts/Mamm.algo.ts:208","pc":[842]},{"teal":914,"source":"contracts/Mamm.algo.ts:208","pc":[843,844]},{"teal":918,"source":"contracts/Mamm.algo.ts:209","pc":[845]},{"teal":919,"source":"contracts/Mamm.algo.ts:209","pc":[846]},{"teal":920,"source":"contracts/Mamm.algo.ts:209","pc":[847,848]},{"teal":924,"source":"contracts/Mamm.algo.ts:210","pc":[849]},{"teal":925,"source":"contracts/Mamm.algo.ts:210","pc":[850]},{"teal":926,"source":"contracts/Mamm.algo.ts:210","pc":[851,852]},{"teal":930,"source":"contracts/Mamm.algo.ts:211","pc":[853,854]},{"teal":931,"source":"contracts/Mamm.algo.ts:211","pc":[855]},{"teal":932,"source":"contracts/Mamm.algo.ts:211","pc":[856,857]},{"teal":936,"source":"contracts/Mamm.algo.ts:212","pc":[858,859]},{"teal":937,"source":"contracts/Mamm.algo.ts:212","pc":[860]},{"teal":938,"source":"contracts/Mamm.algo.ts:212","pc":[861,862]},{"teal":942,"source":"contracts/Mamm.algo.ts:213","pc":[863,864]},{"teal":943,"source":"contracts/Mamm.algo.ts:213","pc":[865]},{"teal":944,"source":"contracts/Mamm.algo.ts:213","pc":[866,867]},{"teal":948,"source":"contracts/Mamm.algo.ts:215","pc":[868]},{"teal":949,"source":"contracts/Mamm.algo.ts:215","pc":[869,870]},{"teal":953,"source":"contracts/Mamm.algo.ts:216","pc":[871]},{"teal":954,"source":"contracts/Mamm.algo.ts:216","pc":[872,873]},{"teal":959,"source":"contracts/Mamm.algo.ts:219","pc":[874,875]},{"teal":960,"source":"contracts/Mamm.algo.ts:219","pc":[876]},{"teal":961,"source":"contracts/Mamm.algo.ts:219","pc":[877]},{"teal":962,"source":"contracts/Mamm.algo.ts:219","pc":[878,879,880]},{"teal":967,"source":"contracts/Mamm.algo.ts:220","pc":[881,882]},{"teal":968,"source":"contracts/Mamm.algo.ts:220","pc":[883,884]},{"teal":972,"source":"contracts/Mamm.algo.ts:221","pc":[885,886]},{"teal":973,"source":"contracts/Mamm.algo.ts:221","pc":[887,888]},{"teal":974,"source":"contracts/Mamm.algo.ts:219","pc":[889,890,891]},{"teal":979,"source":"contracts/Mamm.algo.ts:222","pc":[892,893]},{"teal":980,"source":"contracts/Mamm.algo.ts:222","pc":[894]},{"teal":981,"source":"contracts/Mamm.algo.ts:222","pc":[895]},{"teal":982,"source":"contracts/Mamm.algo.ts:222","pc":[896,897,898]},{"teal":987,"source":"contracts/Mamm.algo.ts:223","pc":[899,900]},{"teal":988,"source":"contracts/Mamm.algo.ts:223","pc":[901,902]},{"teal":992,"source":"contracts/Mamm.algo.ts:224","pc":[903,904]},{"teal":993,"source":"contracts/Mamm.algo.ts:224","pc":[905,906]},{"teal":994,"source":"contracts/Mamm.algo.ts:222","pc":[907,908,909]},{"teal":999,"source":"contracts/Mamm.algo.ts:226","pc":[910]},{"teal":1002,"source":"contracts/Mamm.algo.ts:226","errorMessage":"Invalid swap type","pc":[911]},{"teal":1007,"source":"contracts/Mamm.algo.ts:230","pc":[912,913]},{"teal":1008,"source":"contracts/Mamm.algo.ts:230","pc":[914]},{"teal":1009,"source":"contracts/Mamm.algo.ts:230","pc":[915]},{"teal":1012,"source":"contracts/Mamm.algo.ts:230","errorMessage":"Invalid input amount","pc":[916]},{"teal":1016,"source":"contracts/Mamm.algo.ts:234","pc":[917,918]},{"teal":1017,"source":"contracts/Mamm.algo.ts:234","pc":[919,920]},{"teal":1018,"source":"contracts/Mamm.algo.ts:234","pc":[921]},{"teal":1019,"source":"contracts/Mamm.algo.ts:234","pc":[922]},{"teal":1020,"source":"contracts/Mamm.algo.ts:234","pc":[923,924,925]},{"teal":1021,"source":"contracts/Mamm.algo.ts:234","pc":[926]},{"teal":1022,"source":"contracts/Mamm.algo.ts:234","pc":[927]},{"teal":1023,"source":"contracts/Mamm.algo.ts:234","pc":[928]},{"teal":1024,"source":"contracts/Mamm.algo.ts:234","pc":[929]},{"teal":1025,"source":"contracts/Mamm.algo.ts:234","pc":[930]},{"teal":1028,"source":"contracts/Mamm.algo.ts:234","errorMessage":"wideRatio failed","pc":[931]},{"teal":1029,"source":"contracts/Mamm.algo.ts:234","pc":[932,933]},{"teal":1033,"source":"contracts/Mamm.algo.ts:235","pc":[934,935]},{"teal":1034,"source":"contracts/Mamm.algo.ts:235","pc":[936,937]},{"teal":1035,"source":"contracts/Mamm.algo.ts:235","pc":[938]},{"teal":1036,"source":"contracts/Mamm.algo.ts:235","pc":[939]},{"teal":1037,"source":"contracts/Mamm.algo.ts:235","pc":[940,941]},{"teal":1038,"source":"contracts/Mamm.algo.ts:235","pc":[942]},{"teal":1039,"source":"contracts/Mamm.algo.ts:235","pc":[943]},{"teal":1040,"source":"contracts/Mamm.algo.ts:235","pc":[944]},{"teal":1041,"source":"contracts/Mamm.algo.ts:235","pc":[945]},{"teal":1042,"source":"contracts/Mamm.algo.ts:235","pc":[946]},{"teal":1045,"source":"contracts/Mamm.algo.ts:235","errorMessage":"wideRatio failed","pc":[947]},{"teal":1046,"source":"contracts/Mamm.algo.ts:235","pc":[948,949]},{"teal":1050,"source":"contracts/Mamm.algo.ts:236","pc":[950,951]},{"teal":1051,"source":"contracts/Mamm.algo.ts:236","pc":[952,953]},{"teal":1052,"source":"contracts/Mamm.algo.ts:236","pc":[954]},{"teal":1053,"source":"contracts/Mamm.algo.ts:236","pc":[955,956]},{"teal":1057,"source":"contracts/Mamm.algo.ts:239","pc":[957,958]},{"teal":1058,"source":"contracts/Mamm.algo.ts:239","pc":[959,960]},{"teal":1059,"source":"contracts/Mamm.algo.ts:239","pc":[961]},{"teal":1060,"source":"contracts/Mamm.algo.ts:239","pc":[962,963]},{"teal":1064,"source":"contracts/Mamm.algo.ts:242","pc":[964,965]},{"teal":1065,"source":"contracts/Mamm.algo.ts:242","pc":[966,967]},{"teal":1066,"source":"contracts/Mamm.algo.ts:242","pc":[968]},{"teal":1067,"source":"contracts/Mamm.algo.ts:242","pc":[969,970]},{"teal":1071,"source":"contracts/Mamm.algo.ts:243","pc":[971,972]},{"teal":1072,"source":"contracts/Mamm.algo.ts:243","pc":[973,974]},{"teal":1073,"source":"contracts/Mamm.algo.ts:243","pc":[975]},{"teal":1074,"source":"contracts/Mamm.algo.ts:243","pc":[976,977]},{"teal":1078,"source":"contracts/Mamm.algo.ts:244","pc":[978,979]},{"teal":1079,"source":"contracts/Mamm.algo.ts:244","pc":[980,981]},{"teal":1080,"source":"contracts/Mamm.algo.ts:244","pc":[982]},{"teal":1081,"source":"contracts/Mamm.algo.ts:244","pc":[983,984]},{"teal":1085,"source":"contracts/Mamm.algo.ts:247","pc":[985,986]},{"teal":1086,"source":"contracts/Mamm.algo.ts:247","pc":[987]},{"teal":1087,"source":"contracts/Mamm.algo.ts:247","pc":[988]},{"teal":1090,"source":"contracts/Mamm.algo.ts:247","errorMessage":"Swap too small","pc":[989]},{"teal":1094,"source":"contracts/Mamm.algo.ts:250","pc":[990,991]},{"teal":1095,"source":"contracts/Mamm.algo.ts:250","pc":[992,993]},{"teal":1096,"source":"contracts/Mamm.algo.ts:250","pc":[994]},{"teal":1097,"source":"contracts/Mamm.algo.ts:250","pc":[995,996]},{"teal":1098,"source":"contracts/Mamm.algo.ts:250","pc":[997]},{"teal":1099,"source":"contracts/Mamm.algo.ts:250","pc":[998,999]},{"teal":1103,"source":"contracts/Mamm.algo.ts:251","pc":[1000,1001]},{"teal":1104,"source":"contracts/Mamm.algo.ts:251","pc":[1002,1003]},{"teal":1105,"source":"contracts/Mamm.algo.ts:251","pc":[1004]},{"teal":1106,"source":"contracts/Mamm.algo.ts:251","pc":[1005,1006]},{"teal":1111,"source":"contracts/Mamm.algo.ts:253","pc":[1007,1008]},{"teal":1112,"source":"contracts/Mamm.algo.ts:253","pc":[1009]},{"teal":1113,"source":"contracts/Mamm.algo.ts:253","pc":[1010]},{"teal":1114,"source":"contracts/Mamm.algo.ts:253","pc":[1011,1012,1013]},{"teal":1119,"source":"contracts/Mamm.algo.ts:254","pc":[1014]},{"teal":1120,"source":"contracts/Mamm.algo.ts:254","pc":[1015,1016]},{"teal":1121,"source":"contracts/Mamm.algo.ts:254","pc":[1017]},{"teal":1125,"source":"contracts/Mamm.algo.ts:255","pc":[1018]},{"teal":1126,"source":"contracts/Mamm.algo.ts:255","pc":[1019,1020]},{"teal":1127,"source":"contracts/Mamm.algo.ts:255","pc":[1021]},{"teal":1128,"source":"contracts/Mamm.algo.ts:253","pc":[1022,1023,1024]},{"teal":1133,"source":"contracts/Mamm.algo.ts:257","pc":[1025]},{"teal":1134,"source":"contracts/Mamm.algo.ts:257","pc":[1026,1027]},{"teal":1135,"source":"contracts/Mamm.algo.ts:257","pc":[1028]},{"teal":1139,"source":"contracts/Mamm.algo.ts:258","pc":[1029]},{"teal":1140,"source":"contracts/Mamm.algo.ts:258","pc":[1030,1031]},{"teal":1141,"source":"contracts/Mamm.algo.ts:258","pc":[1032]},{"teal":1146,"source":"contracts/Mamm.algo.ts:262","pc":[1033,1034]},{"teal":1147,"source":"contracts/Mamm.algo.ts:262","pc":[1035,1036]},{"teal":1148,"source":"contracts/Mamm.algo.ts:262","pc":[1037,1038]},{"teal":1149,"source":"contracts/Mamm.algo.ts:262","pc":[1039]},{"teal":1150,"source":"contracts/Mamm.algo.ts:262","pc":[1040]},{"teal":1155,"source":"contracts/Mamm.algo.ts:265","pc":[1041,1042]},{"teal":1156,"source":"contracts/Mamm.algo.ts:265","pc":[1043]},{"teal":1157,"source":"contracts/Mamm.algo.ts:265","pc":[1044]},{"teal":1158,"source":"contracts/Mamm.algo.ts:265","pc":[1045,1046,1047]},{"teal":1164,"source":"contracts/Mamm.algo.ts:266","pc":[1048,1049]},{"teal":1165,"source":"contracts/Mamm.algo.ts:266","pc":[1050]},{"teal":1166,"source":"contracts/Mamm.algo.ts:266","pc":[1051]},{"teal":1167,"source":"contracts/Mamm.algo.ts:266","pc":[1052,1053,1054]},{"teal":1173,"source":"contracts/Mamm.algo.ts:267","pc":[1055,1056]},{"teal":1174,"source":"contracts/Mamm.algo.ts:267","pc":[1057]},{"teal":1175,"source":"contracts/Mamm.algo.ts:267","pc":[1058]},{"teal":1176,"source":"contracts/Mamm.algo.ts:267","pc":[1059]},{"teal":1177,"source":"contracts/Mamm.algo.ts:267","pc":[1060,1061,1062]},{"teal":1186,"source":"contracts/Mamm.algo.ts:268","pc":[1063]},{"teal":1187,"source":"contracts/Mamm.algo.ts:268","pc":[1064]},{"teal":1188,"source":"contracts/Mamm.algo.ts:268","pc":[1065,1066]},{"teal":1192,"source":"contracts/Mamm.algo.ts:269","pc":[1067,1068]},{"teal":1193,"source":"contracts/Mamm.algo.ts:269","pc":[1069]},{"teal":1194,"source":"contracts/Mamm.algo.ts:269","pc":[1070,1071]},{"teal":1198,"source":"contracts/Mamm.algo.ts:270","pc":[1072,1073]},{"teal":1199,"source":"contracts/Mamm.algo.ts:270","pc":[1074,1075]},{"teal":1203,"source":"contracts/Mamm.algo.ts:271","pc":[1076,1077]},{"teal":1204,"source":"contracts/Mamm.algo.ts:271","pc":[1078,1079]},{"teal":1207,"source":"contracts/Mamm.algo.ts:268","pc":[1080]},{"teal":1208,"source":"contracts/Mamm.algo.ts:268","pc":[1081,1082]},{"teal":1211,"source":"contracts/Mamm.algo.ts:268","pc":[1083]},{"teal":1212,"source":"contracts/Mamm.algo.ts:267","pc":[1084,1085,1086]},{"teal":1220,"source":"contracts/Mamm.algo.ts:274","pc":[1087]},{"teal":1221,"source":"contracts/Mamm.algo.ts:274","pc":[1088]},{"teal":1222,"source":"contracts/Mamm.algo.ts:274","pc":[1089,1090]},{"teal":1226,"source":"contracts/Mamm.algo.ts:275","pc":[1091,1092]},{"teal":1227,"source":"contracts/Mamm.algo.ts:275","pc":[1093,1094]},{"teal":1231,"source":"contracts/Mamm.algo.ts:276","pc":[1095,1096]},{"teal":1232,"source":"contracts/Mamm.algo.ts:276","pc":[1097,1098]},{"teal":1235,"source":"contracts/Mamm.algo.ts:274","pc":[1099]},{"teal":1236,"source":"contracts/Mamm.algo.ts:274","pc":[1100,1101]},{"teal":1239,"source":"contracts/Mamm.algo.ts:274","pc":[1102]},{"teal":1242,"source":"contracts/Mamm.algo.ts:266","pc":[1103,1104,1105]},{"teal":1248,"source":"contracts/Mamm.algo.ts:280","pc":[1106,1107]},{"teal":1249,"source":"contracts/Mamm.algo.ts:280","pc":[1108]},{"teal":1250,"source":"contracts/Mamm.algo.ts:280","pc":[1109]},{"teal":1251,"source":"contracts/Mamm.algo.ts:280","pc":[1110]},{"teal":1252,"source":"contracts/Mamm.algo.ts:280","pc":[1111,1112,1113]},{"teal":1261,"source":"contracts/Mamm.algo.ts:281","pc":[1114]},{"teal":1262,"source":"contracts/Mamm.algo.ts:281","pc":[1115]},{"teal":1263,"source":"contracts/Mamm.algo.ts:281","pc":[1116,1117]},{"teal":1267,"source":"contracts/Mamm.algo.ts:282","pc":[1118,1119]},{"teal":1268,"source":"contracts/Mamm.algo.ts:282","pc":[1120]},{"teal":1269,"source":"contracts/Mamm.algo.ts:282","pc":[1121,1122]},{"teal":1273,"source":"contracts/Mamm.algo.ts:283","pc":[1123,1124]},{"teal":1274,"source":"contracts/Mamm.algo.ts:283","pc":[1125,1126]},{"teal":1278,"source":"contracts/Mamm.algo.ts:284","pc":[1127,1128]},{"teal":1279,"source":"contracts/Mamm.algo.ts:284","pc":[1129,1130]},{"teal":1282,"source":"contracts/Mamm.algo.ts:281","pc":[1131]},{"teal":1283,"source":"contracts/Mamm.algo.ts:281","pc":[1132,1133]},{"teal":1286,"source":"contracts/Mamm.algo.ts:281","pc":[1134]},{"teal":1287,"source":"contracts/Mamm.algo.ts:280","pc":[1135,1136,1137]},{"teal":1295,"source":"contracts/Mamm.algo.ts:287","pc":[1138]},{"teal":1296,"source":"contracts/Mamm.algo.ts:287","pc":[1139]},{"teal":1297,"source":"contracts/Mamm.algo.ts:287","pc":[1140,1141]},{"teal":1301,"source":"contracts/Mamm.algo.ts:288","pc":[1142,1143]},{"teal":1302,"source":"contracts/Mamm.algo.ts:288","pc":[1144,1145]},{"teal":1306,"source":"contracts/Mamm.algo.ts:289","pc":[1146,1147]},{"teal":1307,"source":"contracts/Mamm.algo.ts:289","pc":[1148,1149]},{"teal":1310,"source":"contracts/Mamm.algo.ts:287","pc":[1150]},{"teal":1311,"source":"contracts/Mamm.algo.ts:287","pc":[1151,1152]},{"teal":1314,"source":"contracts/Mamm.algo.ts:287","pc":[1153]},{"teal":1324,"source":"contracts/Mamm.algo.ts:296","pc":[1154,1155]},{"teal":1325,"source":"contracts/Mamm.algo.ts:296","pc":[1156]},{"teal":1326,"source":"contracts/Mamm.algo.ts:296","pc":[1157]},{"teal":1327,"source":"contracts/Mamm.algo.ts:296","pc":[1158,1159,1160]},{"teal":1333,"source":"contracts/Mamm.algo.ts:297","pc":[1161,1162]},{"teal":1334,"source":"contracts/Mamm.algo.ts:297","pc":[1163]},{"teal":1335,"source":"contracts/Mamm.algo.ts:297","pc":[1164]},{"teal":1336,"source":"contracts/Mamm.algo.ts:297","pc":[1165]},{"teal":1337,"source":"contracts/Mamm.algo.ts:297","pc":[1166,1167,1168]},{"teal":1345,"source":"contracts/Mamm.algo.ts:298","pc":[1169]},{"teal":1346,"source":"contracts/Mamm.algo.ts:298","pc":[1170]},{"teal":1347,"source":"contracts/Mamm.algo.ts:298","pc":[1171,1172]},{"teal":1351,"source":"contracts/Mamm.algo.ts:299","pc":[1173,1174]},{"teal":1352,"source":"contracts/Mamm.algo.ts:299","pc":[1175,1176]},{"teal":1356,"source":"contracts/Mamm.algo.ts:300","pc":[1177,1178]},{"teal":1357,"source":"contracts/Mamm.algo.ts:300","pc":[1179,1180]},{"teal":1360,"source":"contracts/Mamm.algo.ts:298","pc":[1181]},{"teal":1361,"source":"contracts/Mamm.algo.ts:298","pc":[1182,1183]},{"teal":1364,"source":"contracts/Mamm.algo.ts:298","pc":[1184]},{"teal":1365,"source":"contracts/Mamm.algo.ts:297","pc":[1185,1186,1187]},{"teal":1374,"source":"contracts/Mamm.algo.ts:303","pc":[1188]},{"teal":1375,"source":"contracts/Mamm.algo.ts:303","pc":[1189]},{"teal":1376,"source":"contracts/Mamm.algo.ts:303","pc":[1190,1191]},{"teal":1380,"source":"contracts/Mamm.algo.ts:304","pc":[1192,1193]},{"teal":1381,"source":"contracts/Mamm.algo.ts:304","pc":[1194]},{"teal":1382,"source":"contracts/Mamm.algo.ts:304","pc":[1195,1196]},{"teal":1386,"source":"contracts/Mamm.algo.ts:305","pc":[1197,1198]},{"teal":1387,"source":"contracts/Mamm.algo.ts:305","pc":[1199,1200]},{"teal":1391,"source":"contracts/Mamm.algo.ts:306","pc":[1201,1202]},{"teal":1392,"source":"contracts/Mamm.algo.ts:306","pc":[1203,1204]},{"teal":1395,"source":"contracts/Mamm.algo.ts:303","pc":[1205]},{"teal":1396,"source":"contracts/Mamm.algo.ts:303","pc":[1206,1207]},{"teal":1399,"source":"contracts/Mamm.algo.ts:303","pc":[1208]},{"teal":1407,"source":"contracts/Mamm.algo.ts:310","pc":[1209,1210]},{"teal":1408,"source":"contracts/Mamm.algo.ts:310","pc":[1211]},{"teal":1409,"source":"contracts/Mamm.algo.ts:310","pc":[1212]},{"teal":1410,"source":"contracts/Mamm.algo.ts:310","pc":[1213,1214,1215]},{"teal":1416,"source":"contracts/Mamm.algo.ts:311","pc":[1216,1217]},{"teal":1417,"source":"contracts/Mamm.algo.ts:311","pc":[1218]},{"teal":1418,"source":"contracts/Mamm.algo.ts:311","pc":[1219]},{"teal":1419,"source":"contracts/Mamm.algo.ts:311","pc":[1220]},{"teal":1420,"source":"contracts/Mamm.algo.ts:311","pc":[1221,1222,1223]},{"teal":1428,"source":"contracts/Mamm.algo.ts:312","pc":[1224]},{"teal":1429,"source":"contracts/Mamm.algo.ts:312","pc":[1225]},{"teal":1430,"source":"contracts/Mamm.algo.ts:312","pc":[1226,1227]},{"teal":1434,"source":"contracts/Mamm.algo.ts:313","pc":[1228,1229]},{"teal":1435,"source":"contracts/Mamm.algo.ts:313","pc":[1230,1231]},{"teal":1439,"source":"contracts/Mamm.algo.ts:314","pc":[1232,1233]},{"teal":1440,"source":"contracts/Mamm.algo.ts:314","pc":[1234,1235]},{"teal":1443,"source":"contracts/Mamm.algo.ts:312","pc":[1236]},{"teal":1444,"source":"contracts/Mamm.algo.ts:312","pc":[1237,1238]},{"teal":1447,"source":"contracts/Mamm.algo.ts:312","pc":[1239]},{"teal":1448,"source":"contracts/Mamm.algo.ts:311","pc":[1240,1241,1242]},{"teal":1457,"source":"contracts/Mamm.algo.ts:317","pc":[1243]},{"teal":1458,"source":"contracts/Mamm.algo.ts:317","pc":[1244]},{"teal":1459,"source":"contracts/Mamm.algo.ts:317","pc":[1245,1246]},{"teal":1463,"source":"contracts/Mamm.algo.ts:318","pc":[1247,1248]},{"teal":1464,"source":"contracts/Mamm.algo.ts:318","pc":[1249]},{"teal":1465,"source":"contracts/Mamm.algo.ts:318","pc":[1250,1251]},{"teal":1469,"source":"contracts/Mamm.algo.ts:319","pc":[1252,1253]},{"teal":1470,"source":"contracts/Mamm.algo.ts:319","pc":[1254,1255]},{"teal":1474,"source":"contracts/Mamm.algo.ts:320","pc":[1256,1257]},{"teal":1475,"source":"contracts/Mamm.algo.ts:320","pc":[1258,1259]},{"teal":1478,"source":"contracts/Mamm.algo.ts:317","pc":[1260]},{"teal":1479,"source":"contracts/Mamm.algo.ts:317","pc":[1261,1262]},{"teal":1482,"source":"contracts/Mamm.algo.ts:317","pc":[1263]},{"teal":1487,"source":"contracts/Mamm.algo.ts:208","pc":[1264]},{"teal":1491,"source":"contracts/Mamm.algo.ts:327","pc":[1265,1266,1267]},{"teal":1495,"source":"contracts/Mamm.algo.ts:328","pc":[1268,1269]},{"teal":1496,"source":"contracts/Mamm.algo.ts:328","pc":[1270,1271]},{"teal":1497,"source":"contracts/Mamm.algo.ts:328","pc":[1272]},{"teal":1498,"source":"contracts/Mamm.algo.ts:328","pc":[1273,1274,1275]},{"teal":1499,"source":"contracts/Mamm.algo.ts:328","pc":[1276,1277]},{"teal":1500,"source":"contracts/Mamm.algo.ts:328","pc":[1278,1279,1280]},{"teal":1503,"source":"contracts/Mamm.algo.ts:328","pc":[1281,1282]},{"teal":1506,"source":"contracts/Mamm.algo.ts:327","pc":[1283]},{"teal":1509,"source":"contracts/Mamm.algo.ts:13","pc":[1284,1285,1286,1287,1288,1289]},{"teal":1510,"source":"contracts/Mamm.algo.ts:13","pc":[1290,1291,1292]},{"teal":1511,"source":"contracts/Mamm.algo.ts:13","pc":[1293,1294,1295,1296]},{"teal":1514,"source":"contracts/Mamm.algo.ts:13","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1297]},{"teal":1517,"source":"contracts/Mamm.algo.ts:13","pc":[1298,1299,1300,1301,1302,1303]},{"teal":1518,"source":"contracts/Mamm.algo.ts:13","pc":[1304,1305,1306,1307,1308,1309]},{"teal":1519,"source":"contracts/Mamm.algo.ts:13","pc":[1310,1311,1312,1313,1314,1315]},{"teal":1520,"source":"contracts/Mamm.algo.ts:13","pc":[1316,1317,1318,1319,1320,1321]},{"teal":1521,"source":"contracts/Mamm.algo.ts:13","pc":[1322,1323,1324]},{"teal":1522,"source":"contracts/Mamm.algo.ts:13","pc":[1325,1326,1327,1328,1329,1330,1331,1332,1333,1334]},{"teal":1525,"source":"contracts/Mamm.algo.ts:13","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1335]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"byteCode":{"approval":"CyAGAAEE///og7HeFuCnEgYmEAAEdGxwcwNwdHIDc3RyA3B0aQNzdGkCbHABawh0cmVhc3VyeQVhZG1pbgVzZmJwcwVwZmJwcwNscG4DbHBzA2xwZANscHUxGBQhBQsxGQiNDASWAAAAAAAAAAAAAASIAAAAAAAAAAAAAACIAAIjQ4oAACcJMQBniTYaB0kVgSASRDYaBhc2GgUXNhoEVwIANhoDVwIANhoCFzYaARcxFiMJSTgQIxJEiAACI0OKCAAoJwlkMQASRCoiZysiZykiZycHImcnBiJnJwyL/EkVFlcGAkxQZycNgAUAA01MUGcnDiEFZycPi/tJFRZXBgJMUGeAB3ZlcnNpb26B6AdngAZtaW5iYWwhBGcnCov6ZycLi/lnJwiL+GeL/zgHMgoSRIv/OAghBBJEJwSL/mcnBYv9Z7EkshAnBGSyETIKshQishIisgGzsSSyECcFZLIRMgqyFCKyEiKyAbOxgQOyECWyIicOZLIjJwxkVwIAsiYnDWRXAgCyJScPZFcCALInIrIBs7Q8jAAnBosAZyklZ4k2GgIXNhoBF4gAAiNDigIAKEcFKmSMACtkjAEpZIwCiwIiEkEAC4v/i/4LkowDQgAqi/+LAh0iiwAfSEhMFESMBCKL/osCCyKLAR9ISEwURIwFiwWLBIgC9YwDKosAi/8IZyuLAYv+CGcpiwKLAwhnJweLAIv/CIsBi/4IC2exJLIQJwZkshExALIUiwOyEiKyAbMpSWSLAwlniTYaARcxFiMJSTgQJBJEiAACI0OKAgAoRwQqZIwAK2SMASlkjAKL/iINRIv+iwIORIv/OAAxABJEi/84FDIKEkSL/zgRJwZkEkSL/zgSi/4SRIv+iwAdIosCH0hITBREjAOL/osBHSKLAh9ISEwURIwEKosAiwMJZyuLAYsECWcpiwKL/glnJweLAIsDCYsBiwQJC2cpSWSL/ghnJwRkIhNBABixJLIQJwRkshExALIUiwOyEiKyAbNCABCxI7IQMQCyB4sDsggisgGzJwVkIhNBABixJLIQJwVkshExALIUiwSyEiKyAbNCABCxI7IQMQCyB4sEsggisgGziTYaAhc2GgEXiAACI0OKAgAoRw8qZIwAK2SMAScKZIwCJwtkjAMnCGSMBCKMBSKMBov+IhJBAAuLAIwFiwGMBkIAFIv+IxJBAAuLAYwFiwCMBkIAAiJEi/8iDUSL/4sCHSKBkE4fSEhMFESMB4sHiwMdIosCH0hITBREjAiLB4sICYwJi/+LBwmMCosGiwoLjAuLBYsKCIwMiwuLDAqMDYsNIg1EiwWLCgiLCQiMDosGiw0JjA+L/iISQQALKosOZyuLD2dCAAgriw5nKosPZycHiw6LDwtniwgiDUEAaov+IhJBADMnBGQiE0EAGLEkshAnBGSyEYsEshSLCLISIrIBs0IAELEjshCLBLIHiwiyCCKyAbNCADAnBWQiE0EAGLEkshAnBWSyEYsEshSLCLISIrIBs0IAELEjshCLBLIHiwiyCCKyAbOL/iISQQAwJwVkIhJBABOxI7IQMQCyB4sNsggisgGzQgAVsSSyECcFZLIRMQCyFIsNshIisgGzi/4jEkEAMCcEZCISQQATsSOyEDEAsgeLDbIIIrIBs0IAFbEkshAnBGSyETEAshSLDbISIrIBs4mKAgGL/4v+DEEABYv/QgACi/6JgAS4RHs2NhoAjgH7bACABAwv+nmABBMt1WeABBJW3EiABK9QdSQ2GgCOBPtU/Gz9B/4DAA==","clear":"Cw=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Mamm contract
 */
export type MammArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void': {
      mbrTxn: AppMethodCallTransactionArgument
      primaryAssetId: bigint | number
      secondaryAssetId: bigint | number
      lpAssetName: string
      lpAssetUrl: string
      swapFeeBps: bigint | number
      protocolFeeBps: bigint | number
      treasuryAddress: string
    }
    'addLiquidity(uint64,uint64)void': {
      primaryAmount: bigint | number
      secondaryAmount: bigint | number
    }
    'removeLiquidity(axfer,uint64)void': {
      burnTxn: AppMethodCallTransactionArgument
      lpTokensBurned: bigint | number
    }
    'swap(uint64,uint64)void': {
      inputAmount: bigint | number
      swapType: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void': [mbrTxn: AppMethodCallTransactionArgument, primaryAssetId: bigint | number, secondaryAssetId: bigint | number, lpAssetName: string, lpAssetUrl: string, swapFeeBps: bigint | number, protocolFeeBps: bigint | number, treasuryAddress: string]
    'addLiquidity(uint64,uint64)void': [primaryAmount: bigint | number, secondaryAmount: bigint | number]
    'removeLiquidity(axfer,uint64)void': [burnTxn: AppMethodCallTransactionArgument, lpTokensBurned: bigint | number]
    'swap(uint64,uint64)void': [inputAmount: bigint | number, swapType: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type MammReturns = {
  'createApplication()void': void
  'initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void': void
  'addLiquidity(uint64,uint64)void': void
  'removeLiquidity(axfer,uint64)void': void
  'swap(uint64,uint64)void': void
}

/**
 * Defines the types of available calls and state of the Mamm smart contract.
 */
export type MammTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: MammArgs['obj']['createApplication()void']
      argsTuple: MammArgs['tuple']['createApplication()void']
      returns: MammReturns['createApplication()void']
    }>
    & Record<'initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void' | 'initApplication', {
      argsObj: MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']
      argsTuple: MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']
      returns: MammReturns['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']
    }>
    & Record<'addLiquidity(uint64,uint64)void' | 'addLiquidity', {
      argsObj: MammArgs['obj']['addLiquidity(uint64,uint64)void']
      argsTuple: MammArgs['tuple']['addLiquidity(uint64,uint64)void']
      returns: MammReturns['addLiquidity(uint64,uint64)void']
    }>
    & Record<'removeLiquidity(axfer,uint64)void' | 'removeLiquidity', {
      argsObj: MammArgs['obj']['removeLiquidity(axfer,uint64)void']
      argsTuple: MammArgs['tuple']['removeLiquidity(axfer,uint64)void']
      returns: MammReturns['removeLiquidity(axfer,uint64)void']
    }>
    & Record<'swap(uint64,uint64)void' | 'swap', {
      argsObj: MammArgs['obj']['swap(uint64,uint64)void']
      argsTuple: MammArgs['tuple']['swap(uint64,uint64)void']
      returns: MammReturns['swap(uint64,uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        primaryTokenReserve: bigint
        secondaryTokenReserve: bigint
        primaryTokenId: bigint
        secondaryTokenId: bigint
        totalLpSupply: bigint
        kValue: bigint
        lpTokenId: bigint
        lpTokenName: string
        lpTokenSymbol: string
        lpTokenDecimals: bigint
        lpTokenUrl: string
        swapFeeBps: bigint
        protocolFeeBps: bigint
        admin: string
        treasuryAddress: string
        minimumBalance: bigint
        contractVersion: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type MammSignatures = keyof MammTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MammNonVoidMethodSignatures = keyof MammTypes['methods'] extends infer T ? T extends keyof MammTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Mamm smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MammSignatures> = MammTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Mamm smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MammSignatures> = MammTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = MammTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type MammCreateCallParams =
  | Expand<CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type MammDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MammCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Mamm smart contract
 */
export abstract class MammParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends MammCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return MammParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Mamm smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn, params.args.primaryAssetId, params.args.secondaryAssetId, params.args.lpAssetName, params.args.lpAssetUrl, params.args.swapFeeBps, params.args.protocolFeeBps, params.args.treasuryAddress],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.primaryAmount, params.args.secondaryAmount],
    }
  }
  /**
   * Constructs a no op call for the removeLiquidity(axfer,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLiquidity(params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeLiquidity(axfer,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.burnTxn, params.args.lpTokensBurned],
    }
  }
  /**
   * Constructs a no op call for the swap(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swap(params: CallParams<MammArgs['obj']['swap(uint64,uint64)void'] | MammArgs['tuple']['swap(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.inputAmount, params.args.swapType],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Mamm smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MammFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MammFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MammClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MammClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Mamm smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MammDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? MammParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (MammCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new MammClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mamm smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(MammParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mamm smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(MammParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mamm smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(MammParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | MammReturns['createApplication()void']) }, appClient: new MammClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Mamm smart contract
 */
export class MammClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MammClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Mamm app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MammClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MammNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MammClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MammClient> {
    return new MammClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MammClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MammClient> {
    return new MammClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Mamm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Mamm smart contract using the `initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `addLiquidity(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `removeLiquidity(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeLiquidity: (params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.removeLiquidity(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `swap(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swap: (params: CallParams<MammArgs['obj']['swap(uint64,uint64)void'] | MammArgs['tuple']['swap(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.swap(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Mamm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Mamm smart contract using the `initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `addLiquidity(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `removeLiquidity(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeLiquidity: (params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.removeLiquidity(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `swap(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swap: (params: CallParams<MammArgs['obj']['swap(uint64,uint64)void'] | MammArgs['tuple']['swap(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.swap(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Mamm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Mamm smart contract using the `initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `addLiquidity(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['addLiquidity(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `removeLiquidity(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeLiquidity: async (params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.removeLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['removeLiquidity(axfer,uint64)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `swap(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swap: async (params: CallParams<MammArgs['obj']['swap(uint64,uint64)void'] | MammArgs['tuple']['swap(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.swap(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['swap(uint64,uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MammClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Mamm app
   */
  state = {
    /**
     * Methods to access global state for the current Mamm app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          primaryTokenReserve: result.primary_token_reserve,
          secondaryTokenReserve: result.secondary_token_reserve,
          primaryTokenId: result.primary_token_id,
          secondaryTokenId: result.secondary_token_id,
          totalLpSupply: result.total_lp_supply,
          kValue: result.k_value,
          lpTokenId: result.lp_token_id,
          lpTokenName: result.lp_token_name,
          lpTokenSymbol: result.lp_token_symbol,
          lpTokenDecimals: result.lp_token_decimals,
          lpTokenUrl: result.lp_token_url,
          swapFeeBps: result.swap_fee_bps,
          protocolFeeBps: result.protocol_fee_bps,
          admin: result.admin,
          treasuryAddress: result.treasury_address,
          minimumBalance: result.minimum_balance,
          contractVersion: result.contract_version,
        }
      },
      /**
       * Get the current value of the primary_token_reserve key in global state
       */
      primaryTokenReserve: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("primary_token_reserve")) as bigint | undefined },
      /**
       * Get the current value of the secondary_token_reserve key in global state
       */
      secondaryTokenReserve: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("secondary_token_reserve")) as bigint | undefined },
      /**
       * Get the current value of the primary_token_id key in global state
       */
      primaryTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("primary_token_id")) as bigint | undefined },
      /**
       * Get the current value of the secondary_token_id key in global state
       */
      secondaryTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("secondary_token_id")) as bigint | undefined },
      /**
       * Get the current value of the total_lp_supply key in global state
       */
      totalLpSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_lp_supply")) as bigint | undefined },
      /**
       * Get the current value of the k_value key in global state
       */
      kValue: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("k_value")) as bigint | undefined },
      /**
       * Get the current value of the lp_token_id key in global state
       */
      lpTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lp_token_id")) as bigint | undefined },
      /**
       * Get the current value of the lp_token_name key in global state
       */
      lpTokenName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lp_token_name")) as string | undefined },
      /**
       * Get the current value of the lp_token_symbol key in global state
       */
      lpTokenSymbol: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lp_token_symbol")) as string | undefined },
      /**
       * Get the current value of the lp_token_decimals key in global state
       */
      lpTokenDecimals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lp_token_decimals")) as bigint | undefined },
      /**
       * Get the current value of the lp_token_url key in global state
       */
      lpTokenUrl: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lp_token_url")) as string | undefined },
      /**
       * Get the current value of the swap_fee_bps key in global state
       */
      swapFeeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("swap_fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the protocol_fee_bps key in global state
       */
      protocolFeeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("protocol_fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the treasury_address key in global state
       */
      treasuryAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("treasury_address")) as string | undefined },
      /**
       * Get the current value of the minimum_balance key in global state
       */
      minimumBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minimum_balance")) as bigint | undefined },
      /**
       * Get the current value of the contract_version key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contract_version")) as bigint | undefined },
    },
  }

  public newGroup(): MammComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void method call against the Mamm contract
       */
      initApplication(params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64)void method call against the Mamm contract
       */
      addLiquidity(params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeLiquidity(axfer,uint64)void method call against the Mamm contract
       */
      removeLiquidity(params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a swap(uint64,uint64)void method call against the Mamm contract
       */
      swap(params: CallParams<MammArgs['obj']['swap(uint64,uint64)void'] | MammArgs['tuple']['swap(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Mamm contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MammComposer
  }
}
export type MammComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']>): MammComposer<[...TReturns, MammReturns['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']>): MammComposer<[...TReturns, MammReturns['addLiquidity(uint64,uint64)void'] | undefined]>

  /**
   * Calls the removeLiquidity(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidity(params?: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']>): MammComposer<[...TReturns, MammReturns['removeLiquidity(axfer,uint64)void'] | undefined]>

  /**
   * Calls the swap(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(params?: CallParams<MammArgs['obj']['swap(uint64,uint64)void'] | MammArgs['tuple']['swap(uint64,uint64)void']>): MammComposer<[...TReturns, MammReturns['swap(uint64,uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Mamm smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MammComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MammComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MammComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MammComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MammComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MammComposerResults<TReturns>>
}
export type MammComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

