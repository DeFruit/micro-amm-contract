/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Mamm","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"initApplication","args":[{"name":"mbrTxn","type":"pay"},{"name":"primaryAssetId","type":"uint64"},{"name":"secondaryAssetId","type":"uint64"},{"name":"lpAssetName","type":"string"},{"name":"lpAssetURL","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLiquidity","args":[{"name":"primaryAmount","type":"uint64"},{"name":"secondaryAmount","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":4,"ints":10},"local":{"bytes":0,"ints":0}},"keys":{"global":{"primary_token_reserve":{"key":"cHRy","keyType":"AVMBytes","valueType":"uint64"},"secondary_token_reserve":{"key":"c3Ry","keyType":"AVMBytes","valueType":"uint64"},"primary_token_id":{"key":"cHRp","keyType":"AVMBytes","valueType":"uint64"},"secondary_token_id":{"key":"c3Rp","keyType":"AVMBytes","valueType":"uint64"},"total_lp_supply":{"key":"dGxwcw==","keyType":"AVMBytes","valueType":"uint64"},"k_value":{"key":"aw==","keyType":"AVMBytes","valueType":"uint64"},"lp_token_id":{"key":"bHA=","keyType":"AVMBytes","valueType":"uint64"},"lp_token_name":{"key":"bHBu","keyType":"AVMBytes","valueType":"string"},"lp_token_symbol":{"key":"bHBz","keyType":"AVMBytes","valueType":"string"},"lp_token_decimals":{"key":"bHBk","keyType":"AVMBytes","valueType":"uint64"},"lp_token_url":{"key":"bHB1","keyType":"AVMBytes","valueType":"string"},"admin":{"key":"YWRtaW4=","keyType":"AVMBytes","valueType":"address"},"minimum_balance":{"key":"bWluYmFs","keyType":"AVMBytes","valueType":"uint64"},"contract_version":{"key":"dmVyc2lvbg==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/Mamm.algo.ts:6","pc":[0]},{"teal":2,"source":"contracts/Mamm.algo.ts:6","pc":[1,2,3,4,5,6,7,8,9]},{"teal":3,"source":"contracts/Mamm.algo.ts:6","pc":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]},{"teal":15,"source":"contracts/Mamm.algo.ts:6","pc":[61,62]},{"teal":16,"source":"contracts/Mamm.algo.ts:6","pc":[63]},{"teal":17,"source":"contracts/Mamm.algo.ts:6","pc":[64,65]},{"teal":18,"source":"contracts/Mamm.algo.ts:6","pc":[66]},{"teal":19,"source":"contracts/Mamm.algo.ts:6","pc":[67,68]},{"teal":20,"source":"contracts/Mamm.algo.ts:6","pc":[69]},{"teal":21,"source":"contracts/Mamm.algo.ts:6","pc":[70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95]},{"teal":25,"source":"contracts/Mamm.algo.ts:6","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[96]},{"teal":30,"source":"contracts/Mamm.algo.ts:38","pc":[97,98,99]},{"teal":31,"source":"contracts/Mamm.algo.ts:38","pc":[100]},{"teal":32,"source":"contracts/Mamm.algo.ts:38","pc":[101]},{"teal":36,"source":"contracts/Mamm.algo.ts:38","pc":[102,103,104]},{"teal":40,"source":"contracts/Mamm.algo.ts:39","pc":[105,106]},{"teal":41,"source":"contracts/Mamm.algo.ts:39","pc":[107,108]},{"teal":42,"source":"contracts/Mamm.algo.ts:39","pc":[109]},{"teal":43,"source":"contracts/Mamm.algo.ts:38","pc":[110]},{"teal":48,"source":"contracts/Mamm.algo.ts:47","pc":[111,112,113]},{"teal":49,"source":"contracts/Mamm.algo.ts:47","pc":[114,115,116]},{"teal":52,"source":"contracts/Mamm.algo.ts:46","pc":[117,118,119]},{"teal":53,"source":"contracts/Mamm.algo.ts:46","pc":[120,121,122]},{"teal":56,"source":"contracts/Mamm.algo.ts:45","pc":[123,124,125]},{"teal":57,"source":"contracts/Mamm.algo.ts:45","pc":[126]},{"teal":60,"source":"contracts/Mamm.algo.ts:44","pc":[127,128,129]},{"teal":61,"source":"contracts/Mamm.algo.ts:44","pc":[130]},{"teal":64,"source":"contracts/Mamm.algo.ts:43","pc":[131,132]},{"teal":65,"source":"contracts/Mamm.algo.ts:43","pc":[133]},{"teal":66,"source":"contracts/Mamm.algo.ts:43","pc":[134]},{"teal":67,"source":"contracts/Mamm.algo.ts:43","pc":[135]},{"teal":68,"source":"contracts/Mamm.algo.ts:43","pc":[136,137]},{"teal":69,"source":"contracts/Mamm.algo.ts:43","pc":[138]},{"teal":70,"source":"contracts/Mamm.algo.ts:43","pc":[139]},{"teal":73,"source":"contracts/Mamm.algo.ts:43","errorMessage":"argument 4 (mbrTxn) for initApplication must be a pay transaction","pc":[140]},{"teal":76,"source":"contracts/Mamm.algo.ts:42","pc":[141,142,143]},{"teal":77,"source":"contracts/Mamm.algo.ts:42","pc":[144]},{"teal":78,"source":"contracts/Mamm.algo.ts:42","pc":[145]},{"teal":82,"source":"contracts/Mamm.algo.ts:42","pc":[146,147,148]},{"teal":85,"source":"contracts/Mamm.algo.ts:42","pc":[149]},{"teal":89,"source":"contracts/Mamm.algo.ts:49","pc":[150,151]},{"teal":90,"source":"contracts/Mamm.algo.ts:49","pc":[152]},{"teal":91,"source":"contracts/Mamm.algo.ts:49","pc":[153,154]},{"teal":92,"source":"contracts/Mamm.algo.ts:49","pc":[155]},{"teal":95,"source":"contracts/Mamm.algo.ts:49","errorMessage":"Only admin can initialize the application","pc":[156]},{"teal":99,"source":"contracts/Mamm.algo.ts:51","pc":[157]},{"teal":100,"source":"contracts/Mamm.algo.ts:51","pc":[158]},{"teal":101,"source":"contracts/Mamm.algo.ts:51","pc":[159]},{"teal":105,"source":"contracts/Mamm.algo.ts:52","pc":[160]},{"teal":106,"source":"contracts/Mamm.algo.ts:52","pc":[161]},{"teal":107,"source":"contracts/Mamm.algo.ts:52","pc":[162]},{"teal":111,"source":"contracts/Mamm.algo.ts:53","pc":[163]},{"teal":112,"source":"contracts/Mamm.algo.ts:53","pc":[164]},{"teal":113,"source":"contracts/Mamm.algo.ts:53","pc":[165]},{"teal":117,"source":"contracts/Mamm.algo.ts:54","pc":[166,167]},{"teal":118,"source":"contracts/Mamm.algo.ts:54","pc":[168]},{"teal":119,"source":"contracts/Mamm.algo.ts:54","pc":[169]},{"teal":123,"source":"contracts/Mamm.algo.ts:55","pc":[170,171]},{"teal":124,"source":"contracts/Mamm.algo.ts:55","pc":[172]},{"teal":125,"source":"contracts/Mamm.algo.ts:55","pc":[173]},{"teal":129,"source":"contracts/Mamm.algo.ts:56","pc":[174,175]},{"teal":130,"source":"contracts/Mamm.algo.ts:56","pc":[176,177]},{"teal":131,"source":"contracts/Mamm.algo.ts:56","pc":[178]},{"teal":132,"source":"contracts/Mamm.algo.ts:56","pc":[179]},{"teal":133,"source":"contracts/Mamm.algo.ts:56","pc":[180]},{"teal":134,"source":"contracts/Mamm.algo.ts:56","pc":[181,182,183]},{"teal":135,"source":"contracts/Mamm.algo.ts:56","pc":[184]},{"teal":136,"source":"contracts/Mamm.algo.ts:56","pc":[185]},{"teal":137,"source":"contracts/Mamm.algo.ts:56","pc":[186]},{"teal":141,"source":"contracts/Mamm.algo.ts:57","pc":[187,188]},{"teal":142,"source":"contracts/Mamm.algo.ts:57","pc":[189,190,191,192,193,194,195]},{"teal":143,"source":"contracts/Mamm.algo.ts:57","pc":[196]},{"teal":147,"source":"contracts/Mamm.algo.ts:58","pc":[197,198]},{"teal":148,"source":"contracts/Mamm.algo.ts:58","pc":[199,200]},{"teal":149,"source":"contracts/Mamm.algo.ts:58","pc":[201]},{"teal":153,"source":"contracts/Mamm.algo.ts:59","pc":[202,203]},{"teal":154,"source":"contracts/Mamm.algo.ts:59","pc":[204,205]},{"teal":155,"source":"contracts/Mamm.algo.ts:59","pc":[206]},{"teal":156,"source":"contracts/Mamm.algo.ts:59","pc":[207]},{"teal":157,"source":"contracts/Mamm.algo.ts:59","pc":[208]},{"teal":158,"source":"contracts/Mamm.algo.ts:59","pc":[209,210,211]},{"teal":159,"source":"contracts/Mamm.algo.ts:59","pc":[212]},{"teal":160,"source":"contracts/Mamm.algo.ts:59","pc":[213]},{"teal":161,"source":"contracts/Mamm.algo.ts:59","pc":[214]},{"teal":165,"source":"contracts/Mamm.algo.ts:60","pc":[215,216,217,218,219,220,221,222,223]},{"teal":166,"source":"contracts/Mamm.algo.ts:60","pc":[224,225,226]},{"teal":167,"source":"contracts/Mamm.algo.ts:60","pc":[227]},{"teal":171,"source":"contracts/Mamm.algo.ts:61","pc":[228,229,230,231,232,233,234,235]},{"teal":172,"source":"contracts/Mamm.algo.ts:61","pc":[236]},{"teal":173,"source":"contracts/Mamm.algo.ts:61","pc":[237]},{"teal":178,"source":"contracts/Mamm.algo.ts:63","pc":[238,239]},{"teal":179,"source":"contracts/Mamm.algo.ts:63","pc":[240,241]},{"teal":180,"source":"contracts/Mamm.algo.ts:63","pc":[242,243]},{"teal":181,"source":"contracts/Mamm.algo.ts:63","pc":[244]},{"teal":184,"source":"contracts/Mamm.algo.ts:63","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[245]},{"teal":187,"source":"contracts/Mamm.algo.ts:63","pc":[246,247]},{"teal":188,"source":"contracts/Mamm.algo.ts:63","pc":[248,249]},{"teal":189,"source":"contracts/Mamm.algo.ts:63","pc":[250]},{"teal":190,"source":"contracts/Mamm.algo.ts:63","pc":[251]},{"teal":193,"source":"contracts/Mamm.algo.ts:63","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"expected\":\"TOKEN_MBR * 3\"}","pc":[252]},{"teal":197,"source":"contracts/Mamm.algo.ts:65","pc":[253,254]},{"teal":198,"source":"contracts/Mamm.algo.ts:65","pc":[255,256]},{"teal":199,"source":"contracts/Mamm.algo.ts:65","pc":[257]},{"teal":203,"source":"contracts/Mamm.algo.ts:66","pc":[258,259]},{"teal":204,"source":"contracts/Mamm.algo.ts:66","pc":[260,261]},{"teal":205,"source":"contracts/Mamm.algo.ts:66","pc":[262]},{"teal":213,"source":"contracts/Mamm.algo.ts:69","pc":[263]},{"teal":214,"source":"contracts/Mamm.algo.ts:69","pc":[264]},{"teal":215,"source":"contracts/Mamm.algo.ts:69","pc":[265,266]},{"teal":219,"source":"contracts/Mamm.algo.ts:70","pc":[267,268]},{"teal":220,"source":"contracts/Mamm.algo.ts:70","pc":[269]},{"teal":221,"source":"contracts/Mamm.algo.ts:70","pc":[270,271]},{"teal":225,"source":"contracts/Mamm.algo.ts:71","pc":[272,273]},{"teal":226,"source":"contracts/Mamm.algo.ts:71","pc":[274,275]},{"teal":230,"source":"contracts/Mamm.algo.ts:72","pc":[276]},{"teal":231,"source":"contracts/Mamm.algo.ts:72","pc":[277,278]},{"teal":234,"source":"contracts/Mamm.algo.ts:69","pc":[279]},{"teal":235,"source":"contracts/Mamm.algo.ts:69","pc":[280,281]},{"teal":238,"source":"contracts/Mamm.algo.ts:69","pc":[282]},{"teal":246,"source":"contracts/Mamm.algo.ts:74","pc":[283]},{"teal":247,"source":"contracts/Mamm.algo.ts:74","pc":[284]},{"teal":248,"source":"contracts/Mamm.algo.ts:74","pc":[285,286]},{"teal":252,"source":"contracts/Mamm.algo.ts:75","pc":[287,288]},{"teal":253,"source":"contracts/Mamm.algo.ts:75","pc":[289]},{"teal":254,"source":"contracts/Mamm.algo.ts:75","pc":[290,291]},{"teal":258,"source":"contracts/Mamm.algo.ts:76","pc":[292,293]},{"teal":259,"source":"contracts/Mamm.algo.ts:76","pc":[294,295]},{"teal":263,"source":"contracts/Mamm.algo.ts:77","pc":[296]},{"teal":264,"source":"contracts/Mamm.algo.ts:77","pc":[297,298]},{"teal":267,"source":"contracts/Mamm.algo.ts:74","pc":[299]},{"teal":268,"source":"contracts/Mamm.algo.ts:74","pc":[300,301]},{"teal":271,"source":"contracts/Mamm.algo.ts:74","pc":[302]},{"teal":281,"source":"contracts/Mamm.algo.ts:81","pc":[303]},{"teal":282,"source":"contracts/Mamm.algo.ts:81","pc":[304,305]},{"teal":283,"source":"contracts/Mamm.algo.ts:81","pc":[306,307]},{"teal":287,"source":"contracts/Mamm.algo.ts:82","pc":[308,309,310,311,312,313,314,315]},{"teal":288,"source":"contracts/Mamm.algo.ts:82","pc":[316,317]},{"teal":292,"source":"contracts/Mamm.algo.ts:83","pc":[318,319]},{"teal":293,"source":"contracts/Mamm.algo.ts:83","pc":[320]},{"teal":294,"source":"contracts/Mamm.algo.ts:83","pc":[321,322]},{"teal":298,"source":"contracts/Mamm.algo.ts:84","pc":[323,324]},{"teal":299,"source":"contracts/Mamm.algo.ts:84","pc":[325]},{"teal":300,"source":"contracts/Mamm.algo.ts:84","pc":[326,327,328]},{"teal":301,"source":"contracts/Mamm.algo.ts:84","pc":[329,330]},{"teal":305,"source":"contracts/Mamm.algo.ts:85","pc":[331,332]},{"teal":306,"source":"contracts/Mamm.algo.ts:85","pc":[333]},{"teal":307,"source":"contracts/Mamm.algo.ts:85","pc":[334,335,336]},{"teal":308,"source":"contracts/Mamm.algo.ts:85","pc":[337,338]},{"teal":312,"source":"contracts/Mamm.algo.ts:86","pc":[339,340]},{"teal":313,"source":"contracts/Mamm.algo.ts:86","pc":[341]},{"teal":314,"source":"contracts/Mamm.algo.ts:86","pc":[342,343,344]},{"teal":315,"source":"contracts/Mamm.algo.ts:86","pc":[345,346]},{"teal":318,"source":"contracts/Mamm.algo.ts:81","pc":[347]},{"teal":319,"source":"contracts/Mamm.algo.ts:81","pc":[348,349]},{"teal":322,"source":"contracts/Mamm.algo.ts:81","pc":[350]},{"teal":323,"source":"contracts/Mamm.algo.ts:81","pc":[351,352]},{"teal":324,"source":"contracts/Mamm.algo.ts:81","pc":[353,354]},{"teal":328,"source":"contracts/Mamm.algo.ts:88","pc":[355,356]},{"teal":329,"source":"contracts/Mamm.algo.ts:88","pc":[357,358]},{"teal":330,"source":"contracts/Mamm.algo.ts:88","pc":[359]},{"teal":331,"source":"contracts/Mamm.algo.ts:42","pc":[360]},{"teal":336,"source":"contracts/Mamm.algo.ts:91","pc":[361,362,363]},{"teal":337,"source":"contracts/Mamm.algo.ts:91","pc":[364]},{"teal":340,"source":"contracts/Mamm.algo.ts:91","pc":[365,366,367]},{"teal":341,"source":"contracts/Mamm.algo.ts:91","pc":[368]},{"teal":344,"source":"contracts/Mamm.algo.ts:91","pc":[369,370,371]},{"teal":345,"source":"contracts/Mamm.algo.ts:91","pc":[372]},{"teal":346,"source":"contracts/Mamm.algo.ts:91","pc":[373]},{"teal":350,"source":"contracts/Mamm.algo.ts:91","pc":[374,375,376]},{"teal":353,"source":"contracts/Mamm.algo.ts:91","pc":[377]},{"teal":354,"source":"contracts/Mamm.algo.ts:91","pc":[378,379]},{"teal":358,"source":"contracts/Mamm.algo.ts:92","pc":[380]},{"teal":359,"source":"contracts/Mamm.algo.ts:92","pc":[381]},{"teal":360,"source":"contracts/Mamm.algo.ts:92","pc":[382,383]},{"teal":364,"source":"contracts/Mamm.algo.ts:93","pc":[384]},{"teal":365,"source":"contracts/Mamm.algo.ts:93","pc":[385]},{"teal":366,"source":"contracts/Mamm.algo.ts:93","pc":[386,387]},{"teal":370,"source":"contracts/Mamm.algo.ts:94","pc":[388]},{"teal":371,"source":"contracts/Mamm.algo.ts:94","pc":[389]},{"teal":372,"source":"contracts/Mamm.algo.ts:94","pc":[390,391]},{"teal":377,"source":"contracts/Mamm.algo.ts:99","pc":[392,393]},{"teal":378,"source":"contracts/Mamm.algo.ts:99","pc":[394]},{"teal":379,"source":"contracts/Mamm.algo.ts:99","pc":[395]},{"teal":380,"source":"contracts/Mamm.algo.ts:99","pc":[396,397,398]},{"teal":385,"source":"contracts/Mamm.algo.ts:100","pc":[399,400]},{"teal":386,"source":"contracts/Mamm.algo.ts:100","pc":[401,402]},{"teal":387,"source":"contracts/Mamm.algo.ts:100","pc":[403]},{"teal":388,"source":"contracts/Mamm.algo.ts:100","pc":[404]},{"teal":389,"source":"contracts/Mamm.algo.ts:100","pc":[405,406]},{"teal":390,"source":"contracts/Mamm.algo.ts:99","pc":[407,408,409]},{"teal":395,"source":"contracts/Mamm.algo.ts:104","pc":[410,411]},{"teal":396,"source":"contracts/Mamm.algo.ts:104","pc":[412,413]},{"teal":397,"source":"contracts/Mamm.algo.ts:104","pc":[414]},{"teal":398,"source":"contracts/Mamm.algo.ts:104","pc":[415,416]},{"teal":399,"source":"contracts/Mamm.algo.ts:104","pc":[417]},{"teal":400,"source":"contracts/Mamm.algo.ts:104","pc":[418,419]},{"teal":404,"source":"contracts/Mamm.algo.ts:105","pc":[420,421]},{"teal":405,"source":"contracts/Mamm.algo.ts:105","pc":[422,423]},{"teal":406,"source":"contracts/Mamm.algo.ts:105","pc":[424]},{"teal":407,"source":"contracts/Mamm.algo.ts:105","pc":[425,426]},{"teal":408,"source":"contracts/Mamm.algo.ts:105","pc":[427]},{"teal":409,"source":"contracts/Mamm.algo.ts:105","pc":[428,429]},{"teal":413,"source":"contracts/Mamm.algo.ts:106","pc":[430,431]},{"teal":414,"source":"contracts/Mamm.algo.ts:106","pc":[432,433]},{"teal":415,"source":"contracts/Mamm.algo.ts:106","pc":[434,435,436]},{"teal":416,"source":"contracts/Mamm.algo.ts:106","pc":[437,438]},{"teal":421,"source":"contracts/Mamm.algo.ts:110","pc":[439]},{"teal":422,"source":"contracts/Mamm.algo.ts:110","pc":[440,441]},{"teal":423,"source":"contracts/Mamm.algo.ts:110","pc":[442,443]},{"teal":424,"source":"contracts/Mamm.algo.ts:110","pc":[444]},{"teal":425,"source":"contracts/Mamm.algo.ts:110","pc":[445]},{"teal":429,"source":"contracts/Mamm.algo.ts:111","pc":[446]},{"teal":430,"source":"contracts/Mamm.algo.ts:111","pc":[447,448]},{"teal":431,"source":"contracts/Mamm.algo.ts:111","pc":[449,450]},{"teal":432,"source":"contracts/Mamm.algo.ts:111","pc":[451]},{"teal":433,"source":"contracts/Mamm.algo.ts:111","pc":[452]},{"teal":437,"source":"contracts/Mamm.algo.ts:112","pc":[453]},{"teal":438,"source":"contracts/Mamm.algo.ts:112","pc":[454,455]},{"teal":439,"source":"contracts/Mamm.algo.ts:112","pc":[456,457]},{"teal":440,"source":"contracts/Mamm.algo.ts:112","pc":[458]},{"teal":441,"source":"contracts/Mamm.algo.ts:112","pc":[459]},{"teal":445,"source":"contracts/Mamm.algo.ts:113","pc":[460,461]},{"teal":446,"source":"contracts/Mamm.algo.ts:113","pc":[462,463]},{"teal":447,"source":"contracts/Mamm.algo.ts:113","pc":[464,465]},{"teal":448,"source":"contracts/Mamm.algo.ts:113","pc":[466]},{"teal":449,"source":"contracts/Mamm.algo.ts:113","pc":[467,468]},{"teal":450,"source":"contracts/Mamm.algo.ts:113","pc":[469,470]},{"teal":451,"source":"contracts/Mamm.algo.ts:113","pc":[471]},{"teal":452,"source":"contracts/Mamm.algo.ts:113","pc":[472]},{"teal":453,"source":"contracts/Mamm.algo.ts:113","pc":[473]},{"teal":461,"source":"contracts/Mamm.algo.ts:116","pc":[474]},{"teal":462,"source":"contracts/Mamm.algo.ts:116","pc":[475]},{"teal":463,"source":"contracts/Mamm.algo.ts:116","pc":[476,477]},{"teal":467,"source":"contracts/Mamm.algo.ts:117","pc":[478,479]},{"teal":468,"source":"contracts/Mamm.algo.ts:117","pc":[480]},{"teal":469,"source":"contracts/Mamm.algo.ts:117","pc":[481,482]},{"teal":473,"source":"contracts/Mamm.algo.ts:118","pc":[483,484]},{"teal":474,"source":"contracts/Mamm.algo.ts:118","pc":[485,486]},{"teal":478,"source":"contracts/Mamm.algo.ts:119","pc":[487,488]},{"teal":479,"source":"contracts/Mamm.algo.ts:119","pc":[489,490]},{"teal":482,"source":"contracts/Mamm.algo.ts:116","pc":[491]},{"teal":483,"source":"contracts/Mamm.algo.ts:116","pc":[492,493]},{"teal":486,"source":"contracts/Mamm.algo.ts:116","pc":[494]},{"teal":487,"source":"contracts/Mamm.algo.ts:91","pc":[495]},{"teal":491,"source":"contracts/Mamm.algo.ts:123","pc":[496,497,498]},{"teal":495,"source":"contracts/Mamm.algo.ts:124","pc":[499,500]},{"teal":496,"source":"contracts/Mamm.algo.ts:124","pc":[501,502]},{"teal":497,"source":"contracts/Mamm.algo.ts:124","pc":[503]},{"teal":498,"source":"contracts/Mamm.algo.ts:124","pc":[504,505,506]},{"teal":499,"source":"contracts/Mamm.algo.ts:124","pc":[507,508]},{"teal":500,"source":"contracts/Mamm.algo.ts:124","pc":[509,510,511]},{"teal":503,"source":"contracts/Mamm.algo.ts:124","pc":[512,513]},{"teal":506,"source":"contracts/Mamm.algo.ts:123","pc":[514]},{"teal":509,"source":"contracts/Mamm.algo.ts:6","pc":[515,516,517,518,519,520]},{"teal":510,"source":"contracts/Mamm.algo.ts:6","pc":[521,522,523]},{"teal":511,"source":"contracts/Mamm.algo.ts:6","pc":[524,525,526,527]},{"teal":514,"source":"contracts/Mamm.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[528]},{"teal":517,"source":"contracts/Mamm.algo.ts:6","pc":[529,530,531,532,533,534]},{"teal":518,"source":"contracts/Mamm.algo.ts:6","pc":[535,536,537,538,539,540]},{"teal":519,"source":"contracts/Mamm.algo.ts:6","pc":[541,542,543]},{"teal":520,"source":"contracts/Mamm.algo.ts:6","pc":[544,545,546,547,548,549]},{"teal":523,"source":"contracts/Mamm.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[550]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"byteCode":{"approval":"CyAFAAEE4KcSBiYNAAR0bHBzA3B0cgNzdHICbHAFYWRtaW4DbHBuA2xwcwNscGQDbHB1A3B0aQNzdGkBazEYFCEECzEZCI0MAbEAAAAAAAAAAAAAAaMAAAAAAAAAAAAAAIgAAiNDigAAJwUxAGeJNhoEVwIANhoDVwIANhoCFzYaARcxFiMJSTgQIxJEiAACI0OKBQAoJwVkMQASRCoiZysiZykiZycMImcnBCJnJwaL/EkVFlcGAkxQZycHgAUAA01MUGcnCCEEZycJi/tJFRZXBgJMUGeAB3ZlcnNpb26B6AdngAZtaW5iYWwlZ4v/OAcyChJEi/84CCUSRCcKi/5nJwuL/WexJLIQJwpkshEyCrIUIrISIrIBs7EkshAnC2SyETIKshQishIisgGzsYEDshCB///og7HeFrIiJwhksiMnBmRXAgCyJicHZFcCALIlJwlkVwIAsicisgGztDyMACcEiwBniTYaAhc2GgEXiAACI0OKAgAoRwUqZIwAK2SMASlkjAKLAiISQQALi/+L/guSjANCAB2L/4sCC4sACowEi/6LAguLAQqMBYsFiwSIADuMAyqLAIv/CGcriwGL/ghnKYsCiwMIZycMiwCL/wiLAYv+CAtnsSSyECcEZLIRMQCyFIsDshIisgGziYoCAYv/i/4MQQAFi/9CAAKL/omABLhEezY2GgCOAf5RAIAEtkNt8oAEEy3VZzYaAI4C/kn/QwA=","clear":"Cw=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Mamm contract
 */
export type MammArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'initApplication(pay,uint64,uint64,string,string)void': {
      mbrTxn: AppMethodCallTransactionArgument
      primaryAssetId: bigint | number
      secondaryAssetId: bigint | number
      lpAssetName: string
      lpAssetUrl: string
    }
    'addLiquidity(uint64,uint64)void': {
      primaryAmount: bigint | number
      secondaryAmount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'initApplication(pay,uint64,uint64,string,string)void': [mbrTxn: AppMethodCallTransactionArgument, primaryAssetId: bigint | number, secondaryAssetId: bigint | number, lpAssetName: string, lpAssetUrl: string]
    'addLiquidity(uint64,uint64)void': [primaryAmount: bigint | number, secondaryAmount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type MammReturns = {
  'createApplication()void': void
  'initApplication(pay,uint64,uint64,string,string)void': void
  'addLiquidity(uint64,uint64)void': void
}

/**
 * Defines the types of available calls and state of the Mamm smart contract.
 */
export type MammTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: MammArgs['obj']['createApplication()void']
      argsTuple: MammArgs['tuple']['createApplication()void']
      returns: MammReturns['createApplication()void']
    }>
    & Record<'initApplication(pay,uint64,uint64,string,string)void' | 'initApplication', {
      argsObj: MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void']
      argsTuple: MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']
      returns: MammReturns['initApplication(pay,uint64,uint64,string,string)void']
    }>
    & Record<'addLiquidity(uint64,uint64)void' | 'addLiquidity', {
      argsObj: MammArgs['obj']['addLiquidity(uint64,uint64)void']
      argsTuple: MammArgs['tuple']['addLiquidity(uint64,uint64)void']
      returns: MammReturns['addLiquidity(uint64,uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        primaryTokenReserve: bigint
        secondaryTokenReserve: bigint
        primaryTokenId: bigint
        secondaryTokenId: bigint
        totalLpSupply: bigint
        kValue: bigint
        lpTokenId: bigint
        lpTokenName: string
        lpTokenSymbol: string
        lpTokenDecimals: bigint
        lpTokenUrl: string
        admin: string
        minimumBalance: bigint
        contractVersion: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type MammSignatures = keyof MammTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MammNonVoidMethodSignatures = keyof MammTypes['methods'] extends infer T ? T extends keyof MammTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Mamm smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MammSignatures> = MammTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Mamm smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MammSignatures> = MammTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = MammTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type MammCreateCallParams =
  | Expand<CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type MammDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MammCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Mamm smart contract
 */
export abstract class MammParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends MammCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return MammParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Mamm smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(pay,uint64,uint64,string,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication(pay,uint64,uint64,string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn, params.args.primaryAssetId, params.args.secondaryAssetId, params.args.lpAssetName, params.args.lpAssetUrl],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.primaryAmount, params.args.secondaryAmount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Mamm smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MammFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MammFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MammClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MammClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Mamm smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MammDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? MammParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (MammCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new MammClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mamm smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(MammParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mamm smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(MammParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mamm smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(MammParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | MammReturns['createApplication()void']) }, appClient: new MammClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Mamm smart contract
 */
export class MammClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MammClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Mamm app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MammClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MammNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MammClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MammClient> {
    return new MammClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MammClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MammClient> {
    return new MammClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Mamm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Mamm smart contract using the `initApplication(pay,uint64,uint64,string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `addLiquidity(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.addLiquidity(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Mamm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Mamm smart contract using the `initApplication(pay,uint64,uint64,string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `addLiquidity(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.addLiquidity(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Mamm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Mamm smart contract using the `initApplication(pay,uint64,uint64,string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['initApplication(pay,uint64,uint64,string,string)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `addLiquidity(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['addLiquidity(uint64,uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MammClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Mamm app
   */
  state = {
    /**
     * Methods to access global state for the current Mamm app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          primaryTokenReserve: result.primary_token_reserve,
          secondaryTokenReserve: result.secondary_token_reserve,
          primaryTokenId: result.primary_token_id,
          secondaryTokenId: result.secondary_token_id,
          totalLpSupply: result.total_lp_supply,
          kValue: result.k_value,
          lpTokenId: result.lp_token_id,
          lpTokenName: result.lp_token_name,
          lpTokenSymbol: result.lp_token_symbol,
          lpTokenDecimals: result.lp_token_decimals,
          lpTokenUrl: result.lp_token_url,
          admin: result.admin,
          minimumBalance: result.minimum_balance,
          contractVersion: result.contract_version,
        }
      },
      /**
       * Get the current value of the primary_token_reserve key in global state
       */
      primaryTokenReserve: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("primary_token_reserve")) as bigint | undefined },
      /**
       * Get the current value of the secondary_token_reserve key in global state
       */
      secondaryTokenReserve: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("secondary_token_reserve")) as bigint | undefined },
      /**
       * Get the current value of the primary_token_id key in global state
       */
      primaryTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("primary_token_id")) as bigint | undefined },
      /**
       * Get the current value of the secondary_token_id key in global state
       */
      secondaryTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("secondary_token_id")) as bigint | undefined },
      /**
       * Get the current value of the total_lp_supply key in global state
       */
      totalLpSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_lp_supply")) as bigint | undefined },
      /**
       * Get the current value of the k_value key in global state
       */
      kValue: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("k_value")) as bigint | undefined },
      /**
       * Get the current value of the lp_token_id key in global state
       */
      lpTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lp_token_id")) as bigint | undefined },
      /**
       * Get the current value of the lp_token_name key in global state
       */
      lpTokenName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lp_token_name")) as string | undefined },
      /**
       * Get the current value of the lp_token_symbol key in global state
       */
      lpTokenSymbol: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lp_token_symbol")) as string | undefined },
      /**
       * Get the current value of the lp_token_decimals key in global state
       */
      lpTokenDecimals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lp_token_decimals")) as bigint | undefined },
      /**
       * Get the current value of the lp_token_url key in global state
       */
      lpTokenUrl: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lp_token_url")) as string | undefined },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the minimum_balance key in global state
       */
      minimumBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minimum_balance")) as bigint | undefined },
      /**
       * Get the current value of the contract_version key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contract_version")) as bigint | undefined },
    },
  }

  public newGroup(): MammComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApplication(pay,uint64,uint64,string,string)void method call against the Mamm contract
       */
      initApplication(params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64)void method call against the Mamm contract
       */
      addLiquidity(params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Mamm contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MammComposer
  }
}
export type MammComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(pay,uint64,uint64,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']>): MammComposer<[...TReturns, MammReturns['initApplication(pay,uint64,uint64,string,string)void'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']>): MammComposer<[...TReturns, MammReturns['addLiquidity(uint64,uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Mamm smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MammComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MammComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MammComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MammComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MammComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MammComposerResults<TReturns>>
}
export type MammComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

