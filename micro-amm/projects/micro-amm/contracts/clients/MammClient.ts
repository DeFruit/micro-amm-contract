/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Mamm","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"initApplication","args":[{"name":"mbrTxn","type":"pay"},{"name":"primaryAssetId","type":"uint64"},{"name":"secondaryAssetId","type":"uint64"},{"name":"lpAssetName","type":"string"},{"name":"lpAssetURL","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLiquidity","args":[{"name":"primaryAmount","type":"uint64"},{"name":"secondaryAmount","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"removeLiquidity","args":[{"name":"burnTxn","type":"axfer"},{"name":"lpTokensBurned","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":4,"ints":10},"local":{"bytes":0,"ints":0}},"keys":{"global":{"primary_token_reserve":{"key":"cHRy","keyType":"AVMBytes","valueType":"uint64"},"secondary_token_reserve":{"key":"c3Ry","keyType":"AVMBytes","valueType":"uint64"},"primary_token_id":{"key":"cHRp","keyType":"AVMBytes","valueType":"uint64"},"secondary_token_id":{"key":"c3Rp","keyType":"AVMBytes","valueType":"uint64"},"total_lp_supply":{"key":"dGxwcw==","keyType":"AVMBytes","valueType":"uint64"},"k_value":{"key":"aw==","keyType":"AVMBytes","valueType":"uint64"},"lp_token_id":{"key":"bHA=","keyType":"AVMBytes","valueType":"uint64"},"lp_token_name":{"key":"bHBu","keyType":"AVMBytes","valueType":"string"},"lp_token_symbol":{"key":"bHBz","keyType":"AVMBytes","valueType":"string"},"lp_token_decimals":{"key":"bHBk","keyType":"AVMBytes","valueType":"uint64"},"lp_token_url":{"key":"bHB1","keyType":"AVMBytes","valueType":"string"},"admin":{"key":"YWRtaW4=","keyType":"AVMBytes","valueType":"address"},"minimum_balance":{"key":"bWluYmFs","keyType":"AVMBytes","valueType":"uint64"},"contract_version":{"key":"dmVyc2lvbg==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/Mamm.algo.ts:12","pc":[0]},{"teal":2,"source":"contracts/Mamm.algo.ts:12","pc":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},{"teal":3,"source":"contracts/Mamm.algo.ts:12","pc":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67]},{"teal":15,"source":"contracts/Mamm.algo.ts:12","pc":[68,69]},{"teal":16,"source":"contracts/Mamm.algo.ts:12","pc":[70]},{"teal":17,"source":"contracts/Mamm.algo.ts:12","pc":[71,72]},{"teal":18,"source":"contracts/Mamm.algo.ts:12","pc":[73]},{"teal":19,"source":"contracts/Mamm.algo.ts:12","pc":[74,75]},{"teal":20,"source":"contracts/Mamm.algo.ts:12","pc":[76]},{"teal":21,"source":"contracts/Mamm.algo.ts:12","pc":[77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102]},{"teal":25,"source":"contracts/Mamm.algo.ts:12","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[103]},{"teal":30,"source":"contracts/Mamm.algo.ts:48","pc":[104,105,106]},{"teal":31,"source":"contracts/Mamm.algo.ts:48","pc":[107]},{"teal":32,"source":"contracts/Mamm.algo.ts:48","pc":[108]},{"teal":36,"source":"contracts/Mamm.algo.ts:48","pc":[109,110,111]},{"teal":40,"source":"contracts/Mamm.algo.ts:49","pc":[112,113]},{"teal":41,"source":"contracts/Mamm.algo.ts:49","pc":[114,115]},{"teal":42,"source":"contracts/Mamm.algo.ts:49","pc":[116]},{"teal":43,"source":"contracts/Mamm.algo.ts:48","pc":[117]},{"teal":48,"source":"contracts/Mamm.algo.ts:58","pc":[118,119,120]},{"teal":49,"source":"contracts/Mamm.algo.ts:58","pc":[121,122,123]},{"teal":52,"source":"contracts/Mamm.algo.ts:57","pc":[124,125,126]},{"teal":53,"source":"contracts/Mamm.algo.ts:57","pc":[127,128,129]},{"teal":56,"source":"contracts/Mamm.algo.ts:56","pc":[130,131,132]},{"teal":57,"source":"contracts/Mamm.algo.ts:56","pc":[133]},{"teal":60,"source":"contracts/Mamm.algo.ts:55","pc":[134,135,136]},{"teal":61,"source":"contracts/Mamm.algo.ts:55","pc":[137]},{"teal":64,"source":"contracts/Mamm.algo.ts:54","pc":[138,139]},{"teal":65,"source":"contracts/Mamm.algo.ts:54","pc":[140]},{"teal":66,"source":"contracts/Mamm.algo.ts:54","pc":[141]},{"teal":67,"source":"contracts/Mamm.algo.ts:54","pc":[142]},{"teal":68,"source":"contracts/Mamm.algo.ts:54","pc":[143,144]},{"teal":69,"source":"contracts/Mamm.algo.ts:54","pc":[145]},{"teal":70,"source":"contracts/Mamm.algo.ts:54","pc":[146]},{"teal":73,"source":"contracts/Mamm.algo.ts:54","errorMessage":"argument 4 (mbrTxn) for initApplication must be a pay transaction","pc":[147]},{"teal":76,"source":"contracts/Mamm.algo.ts:53","pc":[148,149,150]},{"teal":77,"source":"contracts/Mamm.algo.ts:53","pc":[151]},{"teal":78,"source":"contracts/Mamm.algo.ts:53","pc":[152]},{"teal":82,"source":"contracts/Mamm.algo.ts:53","pc":[153,154,155]},{"teal":85,"source":"contracts/Mamm.algo.ts:53","pc":[156]},{"teal":89,"source":"contracts/Mamm.algo.ts:60","pc":[157,158]},{"teal":90,"source":"contracts/Mamm.algo.ts:60","pc":[159]},{"teal":91,"source":"contracts/Mamm.algo.ts:60","pc":[160,161]},{"teal":92,"source":"contracts/Mamm.algo.ts:60","pc":[162]},{"teal":95,"source":"contracts/Mamm.algo.ts:60","errorMessage":"Only admin can initialize the application","pc":[163]},{"teal":99,"source":"contracts/Mamm.algo.ts:62","pc":[164]},{"teal":100,"source":"contracts/Mamm.algo.ts:62","pc":[165]},{"teal":101,"source":"contracts/Mamm.algo.ts:62","pc":[166]},{"teal":105,"source":"contracts/Mamm.algo.ts:63","pc":[167]},{"teal":106,"source":"contracts/Mamm.algo.ts:63","pc":[168]},{"teal":107,"source":"contracts/Mamm.algo.ts:63","pc":[169]},{"teal":111,"source":"contracts/Mamm.algo.ts:64","pc":[170]},{"teal":112,"source":"contracts/Mamm.algo.ts:64","pc":[171]},{"teal":113,"source":"contracts/Mamm.algo.ts:64","pc":[172]},{"teal":117,"source":"contracts/Mamm.algo.ts:65","pc":[173,174]},{"teal":118,"source":"contracts/Mamm.algo.ts:65","pc":[175]},{"teal":119,"source":"contracts/Mamm.algo.ts:65","pc":[176]},{"teal":123,"source":"contracts/Mamm.algo.ts:66","pc":[177,178]},{"teal":124,"source":"contracts/Mamm.algo.ts:66","pc":[179]},{"teal":125,"source":"contracts/Mamm.algo.ts:66","pc":[180]},{"teal":129,"source":"contracts/Mamm.algo.ts:67","pc":[181,182]},{"teal":130,"source":"contracts/Mamm.algo.ts:67","pc":[183,184]},{"teal":131,"source":"contracts/Mamm.algo.ts:67","pc":[185]},{"teal":132,"source":"contracts/Mamm.algo.ts:67","pc":[186]},{"teal":133,"source":"contracts/Mamm.algo.ts:67","pc":[187]},{"teal":134,"source":"contracts/Mamm.algo.ts:67","pc":[188,189,190]},{"teal":135,"source":"contracts/Mamm.algo.ts:67","pc":[191]},{"teal":136,"source":"contracts/Mamm.algo.ts:67","pc":[192]},{"teal":137,"source":"contracts/Mamm.algo.ts:67","pc":[193]},{"teal":141,"source":"contracts/Mamm.algo.ts:68","pc":[194,195]},{"teal":142,"source":"contracts/Mamm.algo.ts:68","pc":[196,197,198,199,200,201,202]},{"teal":143,"source":"contracts/Mamm.algo.ts:68","pc":[203]},{"teal":147,"source":"contracts/Mamm.algo.ts:69","pc":[204,205]},{"teal":148,"source":"contracts/Mamm.algo.ts:69","pc":[206,207]},{"teal":149,"source":"contracts/Mamm.algo.ts:69","pc":[208]},{"teal":153,"source":"contracts/Mamm.algo.ts:70","pc":[209,210]},{"teal":154,"source":"contracts/Mamm.algo.ts:70","pc":[211,212]},{"teal":155,"source":"contracts/Mamm.algo.ts:70","pc":[213]},{"teal":156,"source":"contracts/Mamm.algo.ts:70","pc":[214]},{"teal":157,"source":"contracts/Mamm.algo.ts:70","pc":[215]},{"teal":158,"source":"contracts/Mamm.algo.ts:70","pc":[216,217,218]},{"teal":159,"source":"contracts/Mamm.algo.ts:70","pc":[219]},{"teal":160,"source":"contracts/Mamm.algo.ts:70","pc":[220]},{"teal":161,"source":"contracts/Mamm.algo.ts:70","pc":[221]},{"teal":165,"source":"contracts/Mamm.algo.ts:71","pc":[222,223,224,225,226,227,228,229,230]},{"teal":166,"source":"contracts/Mamm.algo.ts:71","pc":[231,232,233]},{"teal":167,"source":"contracts/Mamm.algo.ts:71","pc":[234]},{"teal":171,"source":"contracts/Mamm.algo.ts:72","pc":[235,236,237,238,239,240,241,242]},{"teal":172,"source":"contracts/Mamm.algo.ts:72","pc":[243,244]},{"teal":173,"source":"contracts/Mamm.algo.ts:72","pc":[245]},{"teal":178,"source":"contracts/Mamm.algo.ts:74","pc":[246,247]},{"teal":179,"source":"contracts/Mamm.algo.ts:74","pc":[248,249]},{"teal":180,"source":"contracts/Mamm.algo.ts:74","pc":[250,251]},{"teal":181,"source":"contracts/Mamm.algo.ts:74","pc":[252]},{"teal":184,"source":"contracts/Mamm.algo.ts:74","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[253]},{"teal":187,"source":"contracts/Mamm.algo.ts:74","pc":[254,255]},{"teal":188,"source":"contracts/Mamm.algo.ts:74","pc":[256,257]},{"teal":189,"source":"contracts/Mamm.algo.ts:74","pc":[258,259]},{"teal":190,"source":"contracts/Mamm.algo.ts:74","pc":[260]},{"teal":193,"source":"contracts/Mamm.algo.ts:74","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"expected\":\"TOKEN_MBR * 3\"}","pc":[261]},{"teal":197,"source":"contracts/Mamm.algo.ts:76","pc":[262,263]},{"teal":198,"source":"contracts/Mamm.algo.ts:76","pc":[264,265]},{"teal":199,"source":"contracts/Mamm.algo.ts:76","pc":[266]},{"teal":203,"source":"contracts/Mamm.algo.ts:77","pc":[267,268]},{"teal":204,"source":"contracts/Mamm.algo.ts:77","pc":[269,270]},{"teal":205,"source":"contracts/Mamm.algo.ts:77","pc":[271]},{"teal":213,"source":"contracts/Mamm.algo.ts:80","pc":[272]},{"teal":214,"source":"contracts/Mamm.algo.ts:80","pc":[273]},{"teal":215,"source":"contracts/Mamm.algo.ts:80","pc":[274,275]},{"teal":219,"source":"contracts/Mamm.algo.ts:81","pc":[276,277]},{"teal":220,"source":"contracts/Mamm.algo.ts:81","pc":[278]},{"teal":221,"source":"contracts/Mamm.algo.ts:81","pc":[279,280]},{"teal":225,"source":"contracts/Mamm.algo.ts:82","pc":[281,282]},{"teal":226,"source":"contracts/Mamm.algo.ts:82","pc":[283,284]},{"teal":230,"source":"contracts/Mamm.algo.ts:83","pc":[285]},{"teal":231,"source":"contracts/Mamm.algo.ts:83","pc":[286,287]},{"teal":234,"source":"contracts/Mamm.algo.ts:80","pc":[288]},{"teal":235,"source":"contracts/Mamm.algo.ts:80","pc":[289,290]},{"teal":238,"source":"contracts/Mamm.algo.ts:80","pc":[291]},{"teal":246,"source":"contracts/Mamm.algo.ts:85","pc":[292]},{"teal":247,"source":"contracts/Mamm.algo.ts:85","pc":[293]},{"teal":248,"source":"contracts/Mamm.algo.ts:85","pc":[294,295]},{"teal":252,"source":"contracts/Mamm.algo.ts:86","pc":[296,297]},{"teal":253,"source":"contracts/Mamm.algo.ts:86","pc":[298]},{"teal":254,"source":"contracts/Mamm.algo.ts:86","pc":[299,300]},{"teal":258,"source":"contracts/Mamm.algo.ts:87","pc":[301,302]},{"teal":259,"source":"contracts/Mamm.algo.ts:87","pc":[303,304]},{"teal":263,"source":"contracts/Mamm.algo.ts:88","pc":[305]},{"teal":264,"source":"contracts/Mamm.algo.ts:88","pc":[306,307]},{"teal":267,"source":"contracts/Mamm.algo.ts:85","pc":[308]},{"teal":268,"source":"contracts/Mamm.algo.ts:85","pc":[309,310]},{"teal":271,"source":"contracts/Mamm.algo.ts:85","pc":[311]},{"teal":281,"source":"contracts/Mamm.algo.ts:92","pc":[312]},{"teal":282,"source":"contracts/Mamm.algo.ts:92","pc":[313,314]},{"teal":283,"source":"contracts/Mamm.algo.ts:92","pc":[315,316]},{"teal":287,"source":"contracts/Mamm.algo.ts:93","pc":[317]},{"teal":288,"source":"contracts/Mamm.algo.ts:93","pc":[318,319]},{"teal":292,"source":"contracts/Mamm.algo.ts:94","pc":[320,321]},{"teal":293,"source":"contracts/Mamm.algo.ts:94","pc":[322]},{"teal":294,"source":"contracts/Mamm.algo.ts:94","pc":[323,324]},{"teal":298,"source":"contracts/Mamm.algo.ts:95","pc":[325,326]},{"teal":299,"source":"contracts/Mamm.algo.ts:95","pc":[327]},{"teal":300,"source":"contracts/Mamm.algo.ts:95","pc":[328,329,330]},{"teal":301,"source":"contracts/Mamm.algo.ts:95","pc":[331,332]},{"teal":305,"source":"contracts/Mamm.algo.ts:96","pc":[333,334]},{"teal":306,"source":"contracts/Mamm.algo.ts:96","pc":[335]},{"teal":307,"source":"contracts/Mamm.algo.ts:96","pc":[336,337,338]},{"teal":308,"source":"contracts/Mamm.algo.ts:96","pc":[339,340]},{"teal":312,"source":"contracts/Mamm.algo.ts:97","pc":[341,342]},{"teal":313,"source":"contracts/Mamm.algo.ts:97","pc":[343]},{"teal":314,"source":"contracts/Mamm.algo.ts:97","pc":[344,345,346]},{"teal":315,"source":"contracts/Mamm.algo.ts:97","pc":[347,348]},{"teal":318,"source":"contracts/Mamm.algo.ts:92","pc":[349]},{"teal":319,"source":"contracts/Mamm.algo.ts:92","pc":[350,351]},{"teal":322,"source":"contracts/Mamm.algo.ts:92","pc":[352]},{"teal":323,"source":"contracts/Mamm.algo.ts:92","pc":[353,354]},{"teal":324,"source":"contracts/Mamm.algo.ts:92","pc":[355,356]},{"teal":328,"source":"contracts/Mamm.algo.ts:99","pc":[357,358]},{"teal":329,"source":"contracts/Mamm.algo.ts:99","pc":[359,360]},{"teal":330,"source":"contracts/Mamm.algo.ts:99","pc":[361]},{"teal":334,"source":"contracts/Mamm.algo.ts:100","pc":[362]},{"teal":335,"source":"contracts/Mamm.algo.ts:100","pc":[363]},{"teal":336,"source":"contracts/Mamm.algo.ts:100","pc":[364]},{"teal":337,"source":"contracts/Mamm.algo.ts:53","pc":[365]},{"teal":342,"source":"contracts/Mamm.algo.ts:104","pc":[366,367,368]},{"teal":343,"source":"contracts/Mamm.algo.ts:104","pc":[369]},{"teal":346,"source":"contracts/Mamm.algo.ts:104","pc":[370,371,372]},{"teal":347,"source":"contracts/Mamm.algo.ts:104","pc":[373]},{"teal":350,"source":"contracts/Mamm.algo.ts:104","pc":[374,375,376]},{"teal":351,"source":"contracts/Mamm.algo.ts:104","pc":[377]},{"teal":352,"source":"contracts/Mamm.algo.ts:104","pc":[378]},{"teal":356,"source":"contracts/Mamm.algo.ts:104","pc":[379,380,381]},{"teal":359,"source":"contracts/Mamm.algo.ts:104","pc":[382]},{"teal":360,"source":"contracts/Mamm.algo.ts:104","pc":[383,384]},{"teal":364,"source":"contracts/Mamm.algo.ts:105","pc":[385]},{"teal":365,"source":"contracts/Mamm.algo.ts:105","pc":[386]},{"teal":366,"source":"contracts/Mamm.algo.ts:105","pc":[387,388]},{"teal":370,"source":"contracts/Mamm.algo.ts:106","pc":[389]},{"teal":371,"source":"contracts/Mamm.algo.ts:106","pc":[390]},{"teal":372,"source":"contracts/Mamm.algo.ts:106","pc":[391,392]},{"teal":376,"source":"contracts/Mamm.algo.ts:107","pc":[393]},{"teal":377,"source":"contracts/Mamm.algo.ts:107","pc":[394]},{"teal":378,"source":"contracts/Mamm.algo.ts:107","pc":[395,396]},{"teal":383,"source":"contracts/Mamm.algo.ts:112","pc":[397,398]},{"teal":384,"source":"contracts/Mamm.algo.ts:112","pc":[399]},{"teal":385,"source":"contracts/Mamm.algo.ts:112","pc":[400]},{"teal":386,"source":"contracts/Mamm.algo.ts:112","pc":[401,402,403]},{"teal":391,"source":"contracts/Mamm.algo.ts:113","pc":[404,405]},{"teal":392,"source":"contracts/Mamm.algo.ts:113","pc":[406,407]},{"teal":393,"source":"contracts/Mamm.algo.ts:113","pc":[408]},{"teal":394,"source":"contracts/Mamm.algo.ts:113","pc":[409]},{"teal":395,"source":"contracts/Mamm.algo.ts:113","pc":[410,411]},{"teal":396,"source":"contracts/Mamm.algo.ts:112","pc":[412,413,414]},{"teal":401,"source":"contracts/Mamm.algo.ts:117","pc":[415,416]},{"teal":402,"source":"contracts/Mamm.algo.ts:117","pc":[417,418]},{"teal":403,"source":"contracts/Mamm.algo.ts:117","pc":[419]},{"teal":404,"source":"contracts/Mamm.algo.ts:117","pc":[420]},{"teal":405,"source":"contracts/Mamm.algo.ts:117","pc":[421,422]},{"teal":406,"source":"contracts/Mamm.algo.ts:117","pc":[423]},{"teal":407,"source":"contracts/Mamm.algo.ts:117","pc":[424]},{"teal":408,"source":"contracts/Mamm.algo.ts:117","pc":[425]},{"teal":409,"source":"contracts/Mamm.algo.ts:117","pc":[426]},{"teal":410,"source":"contracts/Mamm.algo.ts:117","pc":[427]},{"teal":413,"source":"contracts/Mamm.algo.ts:117","errorMessage":"wideRatio failed","pc":[428]},{"teal":414,"source":"contracts/Mamm.algo.ts:117","pc":[429,430]},{"teal":418,"source":"contracts/Mamm.algo.ts:118","pc":[431]},{"teal":419,"source":"contracts/Mamm.algo.ts:118","pc":[432,433]},{"teal":420,"source":"contracts/Mamm.algo.ts:118","pc":[434,435]},{"teal":421,"source":"contracts/Mamm.algo.ts:118","pc":[436]},{"teal":422,"source":"contracts/Mamm.algo.ts:118","pc":[437]},{"teal":423,"source":"contracts/Mamm.algo.ts:118","pc":[438,439]},{"teal":424,"source":"contracts/Mamm.algo.ts:118","pc":[440]},{"teal":425,"source":"contracts/Mamm.algo.ts:118","pc":[441]},{"teal":426,"source":"contracts/Mamm.algo.ts:118","pc":[442]},{"teal":427,"source":"contracts/Mamm.algo.ts:118","pc":[443]},{"teal":428,"source":"contracts/Mamm.algo.ts:118","pc":[444]},{"teal":431,"source":"contracts/Mamm.algo.ts:118","errorMessage":"wideRatio failed","pc":[445]},{"teal":432,"source":"contracts/Mamm.algo.ts:118","pc":[446,447]},{"teal":436,"source":"contracts/Mamm.algo.ts:119","pc":[448,449]},{"teal":437,"source":"contracts/Mamm.algo.ts:119","pc":[450,451]},{"teal":438,"source":"contracts/Mamm.algo.ts:119","pc":[452,453,454]},{"teal":439,"source":"contracts/Mamm.algo.ts:119","pc":[455,456]},{"teal":444,"source":"contracts/Mamm.algo.ts:123","pc":[457]},{"teal":445,"source":"contracts/Mamm.algo.ts:123","pc":[458,459]},{"teal":446,"source":"contracts/Mamm.algo.ts:123","pc":[460,461]},{"teal":447,"source":"contracts/Mamm.algo.ts:123","pc":[462]},{"teal":448,"source":"contracts/Mamm.algo.ts:123","pc":[463]},{"teal":452,"source":"contracts/Mamm.algo.ts:124","pc":[464]},{"teal":453,"source":"contracts/Mamm.algo.ts:124","pc":[465,466]},{"teal":454,"source":"contracts/Mamm.algo.ts:124","pc":[467,468]},{"teal":455,"source":"contracts/Mamm.algo.ts:124","pc":[469]},{"teal":456,"source":"contracts/Mamm.algo.ts:124","pc":[470]},{"teal":460,"source":"contracts/Mamm.algo.ts:125","pc":[471]},{"teal":461,"source":"contracts/Mamm.algo.ts:125","pc":[472,473]},{"teal":462,"source":"contracts/Mamm.algo.ts:125","pc":[474,475]},{"teal":463,"source":"contracts/Mamm.algo.ts:125","pc":[476]},{"teal":464,"source":"contracts/Mamm.algo.ts:125","pc":[477]},{"teal":468,"source":"contracts/Mamm.algo.ts:126","pc":[478,479]},{"teal":469,"source":"contracts/Mamm.algo.ts:126","pc":[480,481]},{"teal":470,"source":"contracts/Mamm.algo.ts:126","pc":[482,483]},{"teal":471,"source":"contracts/Mamm.algo.ts:126","pc":[484]},{"teal":472,"source":"contracts/Mamm.algo.ts:126","pc":[485,486]},{"teal":473,"source":"contracts/Mamm.algo.ts:126","pc":[487,488]},{"teal":474,"source":"contracts/Mamm.algo.ts:126","pc":[489]},{"teal":475,"source":"contracts/Mamm.algo.ts:126","pc":[490]},{"teal":476,"source":"contracts/Mamm.algo.ts:126","pc":[491]},{"teal":484,"source":"contracts/Mamm.algo.ts:129","pc":[492]},{"teal":485,"source":"contracts/Mamm.algo.ts:129","pc":[493]},{"teal":486,"source":"contracts/Mamm.algo.ts:129","pc":[494,495]},{"teal":490,"source":"contracts/Mamm.algo.ts:130","pc":[496,497]},{"teal":491,"source":"contracts/Mamm.algo.ts:130","pc":[498]},{"teal":492,"source":"contracts/Mamm.algo.ts:130","pc":[499,500]},{"teal":496,"source":"contracts/Mamm.algo.ts:131","pc":[501,502]},{"teal":497,"source":"contracts/Mamm.algo.ts:131","pc":[503,504]},{"teal":501,"source":"contracts/Mamm.algo.ts:132","pc":[505,506]},{"teal":502,"source":"contracts/Mamm.algo.ts:132","pc":[507,508]},{"teal":505,"source":"contracts/Mamm.algo.ts:129","pc":[509]},{"teal":506,"source":"contracts/Mamm.algo.ts:129","pc":[510,511]},{"teal":509,"source":"contracts/Mamm.algo.ts:129","pc":[512]},{"teal":513,"source":"contracts/Mamm.algo.ts:134","pc":[513]},{"teal":514,"source":"contracts/Mamm.algo.ts:134","pc":[514]},{"teal":515,"source":"contracts/Mamm.algo.ts:134","pc":[515]},{"teal":516,"source":"contracts/Mamm.algo.ts:134","pc":[516,517]},{"teal":517,"source":"contracts/Mamm.algo.ts:134","pc":[518]},{"teal":518,"source":"contracts/Mamm.algo.ts:134","pc":[519]},{"teal":519,"source":"contracts/Mamm.algo.ts:104","pc":[520]},{"teal":524,"source":"contracts/Mamm.algo.ts:137","pc":[521,522,523]},{"teal":525,"source":"contracts/Mamm.algo.ts:137","pc":[524]},{"teal":528,"source":"contracts/Mamm.algo.ts:137","pc":[525,526]},{"teal":529,"source":"contracts/Mamm.algo.ts:137","pc":[527]},{"teal":530,"source":"contracts/Mamm.algo.ts:137","pc":[528]},{"teal":531,"source":"contracts/Mamm.algo.ts:137","pc":[529]},{"teal":532,"source":"contracts/Mamm.algo.ts:137","pc":[530,531]},{"teal":533,"source":"contracts/Mamm.algo.ts:137","pc":[532]},{"teal":534,"source":"contracts/Mamm.algo.ts:137","pc":[533]},{"teal":537,"source":"contracts/Mamm.algo.ts:137","errorMessage":"argument 1 (burnTxn) for removeLiquidity must be a axfer transaction","pc":[534]},{"teal":540,"source":"contracts/Mamm.algo.ts:137","pc":[535,536,537]},{"teal":541,"source":"contracts/Mamm.algo.ts:137","pc":[538]},{"teal":542,"source":"contracts/Mamm.algo.ts:137","pc":[539]},{"teal":546,"source":"contracts/Mamm.algo.ts:137","pc":[540,541,542]},{"teal":549,"source":"contracts/Mamm.algo.ts:137","pc":[543]},{"teal":550,"source":"contracts/Mamm.algo.ts:137","pc":[544,545]},{"teal":554,"source":"contracts/Mamm.algo.ts:138","pc":[546]},{"teal":555,"source":"contracts/Mamm.algo.ts:138","pc":[547]},{"teal":556,"source":"contracts/Mamm.algo.ts:138","pc":[548,549]},{"teal":560,"source":"contracts/Mamm.algo.ts:139","pc":[550]},{"teal":561,"source":"contracts/Mamm.algo.ts:139","pc":[551]},{"teal":562,"source":"contracts/Mamm.algo.ts:139","pc":[552,553]},{"teal":566,"source":"contracts/Mamm.algo.ts:140","pc":[554]},{"teal":567,"source":"contracts/Mamm.algo.ts:140","pc":[555]},{"teal":568,"source":"contracts/Mamm.algo.ts:140","pc":[556,557]},{"teal":572,"source":"contracts/Mamm.algo.ts:143","pc":[558,559]},{"teal":573,"source":"contracts/Mamm.algo.ts:143","pc":[560]},{"teal":574,"source":"contracts/Mamm.algo.ts:143","pc":[561]},{"teal":577,"source":"contracts/Mamm.algo.ts:143","errorMessage":"Invalid LP amount","pc":[562]},{"teal":581,"source":"contracts/Mamm.algo.ts:144","pc":[563,564]},{"teal":582,"source":"contracts/Mamm.algo.ts:144","pc":[565,566]},{"teal":583,"source":"contracts/Mamm.algo.ts:144","pc":[567]},{"teal":586,"source":"contracts/Mamm.algo.ts:144","errorMessage":"Not enough LP supply","pc":[568]},{"teal":596,"source":"contracts/Mamm.algo.ts:146","pc":[569,570]},{"teal":597,"source":"contracts/Mamm.algo.ts:147","pc":[571,572]},{"teal":598,"source":"contracts/Mamm.algo.ts:147","pc":[573,574]},{"teal":599,"source":"contracts/Mamm.algo.ts:147","pc":[575]},{"teal":602,"source":"contracts/Mamm.algo.ts:147","errorMessage":"transaction verification failed: {\"txn\":\"burnTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[576]},{"teal":605,"source":"contracts/Mamm.algo.ts:146","pc":[577,578]},{"teal":606,"source":"contracts/Mamm.algo.ts:148","pc":[579,580]},{"teal":607,"source":"contracts/Mamm.algo.ts:148","pc":[581,582]},{"teal":608,"source":"contracts/Mamm.algo.ts:148","pc":[583]},{"teal":611,"source":"contracts/Mamm.algo.ts:148","errorMessage":"transaction verification failed: {\"txn\":\"burnTxn\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[584]},{"teal":614,"source":"contracts/Mamm.algo.ts:146","pc":[585,586]},{"teal":615,"source":"contracts/Mamm.algo.ts:149","pc":[587,588]},{"teal":616,"source":"contracts/Mamm.algo.ts:149","pc":[589,590]},{"teal":617,"source":"contracts/Mamm.algo.ts:149","pc":[591]},{"teal":618,"source":"contracts/Mamm.algo.ts:149","pc":[592]},{"teal":621,"source":"contracts/Mamm.algo.ts:149","errorMessage":"transaction verification failed: {\"txn\":\"burnTxn\",\"field\":\"xferAsset\",\"expected\":\"AssetID.fromUint64(this.lp_token_id.value)\"}","pc":[593]},{"teal":624,"source":"contracts/Mamm.algo.ts:146","pc":[594,595]},{"teal":625,"source":"contracts/Mamm.algo.ts:150","pc":[596,597]},{"teal":626,"source":"contracts/Mamm.algo.ts:150","pc":[598,599]},{"teal":627,"source":"contracts/Mamm.algo.ts:150","pc":[600]},{"teal":630,"source":"contracts/Mamm.algo.ts:150","errorMessage":"transaction verification failed: {\"txn\":\"burnTxn\",\"field\":\"assetAmount\",\"expected\":\"lpTokensBurned\"}","pc":[601]},{"teal":634,"source":"contracts/Mamm.algo.ts:154","pc":[602,603]},{"teal":635,"source":"contracts/Mamm.algo.ts:154","pc":[604,605]},{"teal":636,"source":"contracts/Mamm.algo.ts:154","pc":[606]},{"teal":637,"source":"contracts/Mamm.algo.ts:154","pc":[607]},{"teal":638,"source":"contracts/Mamm.algo.ts:154","pc":[608,609]},{"teal":639,"source":"contracts/Mamm.algo.ts:154","pc":[610]},{"teal":640,"source":"contracts/Mamm.algo.ts:154","pc":[611]},{"teal":641,"source":"contracts/Mamm.algo.ts:154","pc":[612]},{"teal":642,"source":"contracts/Mamm.algo.ts:154","pc":[613]},{"teal":643,"source":"contracts/Mamm.algo.ts:154","pc":[614]},{"teal":646,"source":"contracts/Mamm.algo.ts:154","errorMessage":"wideRatio failed","pc":[615]},{"teal":647,"source":"contracts/Mamm.algo.ts:154","pc":[616,617]},{"teal":651,"source":"contracts/Mamm.algo.ts:155","pc":[618,619]},{"teal":652,"source":"contracts/Mamm.algo.ts:155","pc":[620,621]},{"teal":653,"source":"contracts/Mamm.algo.ts:155","pc":[622]},{"teal":654,"source":"contracts/Mamm.algo.ts:155","pc":[623]},{"teal":655,"source":"contracts/Mamm.algo.ts:155","pc":[624,625]},{"teal":656,"source":"contracts/Mamm.algo.ts:155","pc":[626]},{"teal":657,"source":"contracts/Mamm.algo.ts:155","pc":[627]},{"teal":658,"source":"contracts/Mamm.algo.ts:155","pc":[628]},{"teal":659,"source":"contracts/Mamm.algo.ts:155","pc":[629]},{"teal":660,"source":"contracts/Mamm.algo.ts:155","pc":[630]},{"teal":663,"source":"contracts/Mamm.algo.ts:155","errorMessage":"wideRatio failed","pc":[631]},{"teal":664,"source":"contracts/Mamm.algo.ts:155","pc":[632,633]},{"teal":668,"source":"contracts/Mamm.algo.ts:158","pc":[634]},{"teal":669,"source":"contracts/Mamm.algo.ts:158","pc":[635,636]},{"teal":670,"source":"contracts/Mamm.algo.ts:158","pc":[637,638]},{"teal":671,"source":"contracts/Mamm.algo.ts:158","pc":[639]},{"teal":672,"source":"contracts/Mamm.algo.ts:158","pc":[640]},{"teal":676,"source":"contracts/Mamm.algo.ts:159","pc":[641]},{"teal":677,"source":"contracts/Mamm.algo.ts:159","pc":[642,643]},{"teal":678,"source":"contracts/Mamm.algo.ts:159","pc":[644,645]},{"teal":679,"source":"contracts/Mamm.algo.ts:159","pc":[646]},{"teal":680,"source":"contracts/Mamm.algo.ts:159","pc":[647]},{"teal":684,"source":"contracts/Mamm.algo.ts:160","pc":[648]},{"teal":685,"source":"contracts/Mamm.algo.ts:160","pc":[649,650]},{"teal":686,"source":"contracts/Mamm.algo.ts:160","pc":[651,652]},{"teal":687,"source":"contracts/Mamm.algo.ts:160","pc":[653]},{"teal":688,"source":"contracts/Mamm.algo.ts:160","pc":[654]},{"teal":692,"source":"contracts/Mamm.algo.ts:161","pc":[655,656]},{"teal":693,"source":"contracts/Mamm.algo.ts:161","pc":[657,658]},{"teal":694,"source":"contracts/Mamm.algo.ts:161","pc":[659,660]},{"teal":695,"source":"contracts/Mamm.algo.ts:161","pc":[661]},{"teal":696,"source":"contracts/Mamm.algo.ts:161","pc":[662,663]},{"teal":697,"source":"contracts/Mamm.algo.ts:161","pc":[664,665]},{"teal":698,"source":"contracts/Mamm.algo.ts:161","pc":[666]},{"teal":699,"source":"contracts/Mamm.algo.ts:161","pc":[667]},{"teal":700,"source":"contracts/Mamm.algo.ts:161","pc":[668]},{"teal":704,"source":"contracts/Mamm.algo.ts:164","pc":[669]},{"teal":705,"source":"contracts/Mamm.algo.ts:164","pc":[670]},{"teal":706,"source":"contracts/Mamm.algo.ts:164","pc":[671]},{"teal":707,"source":"contracts/Mamm.algo.ts:164","pc":[672,673]},{"teal":708,"source":"contracts/Mamm.algo.ts:164","pc":[674]},{"teal":709,"source":"contracts/Mamm.algo.ts:164","pc":[675]},{"teal":714,"source":"contracts/Mamm.algo.ts:167","pc":[676,677]},{"teal":715,"source":"contracts/Mamm.algo.ts:167","pc":[678]},{"teal":716,"source":"contracts/Mamm.algo.ts:167","pc":[679]},{"teal":717,"source":"contracts/Mamm.algo.ts:167","pc":[680]},{"teal":718,"source":"contracts/Mamm.algo.ts:167","pc":[681,682,683]},{"teal":727,"source":"contracts/Mamm.algo.ts:168","pc":[684]},{"teal":728,"source":"contracts/Mamm.algo.ts:168","pc":[685]},{"teal":729,"source":"contracts/Mamm.algo.ts:168","pc":[686,687]},{"teal":733,"source":"contracts/Mamm.algo.ts:169","pc":[688,689]},{"teal":734,"source":"contracts/Mamm.algo.ts:169","pc":[690]},{"teal":735,"source":"contracts/Mamm.algo.ts:169","pc":[691,692]},{"teal":739,"source":"contracts/Mamm.algo.ts:170","pc":[693,694]},{"teal":740,"source":"contracts/Mamm.algo.ts:170","pc":[695,696]},{"teal":744,"source":"contracts/Mamm.algo.ts:171","pc":[697,698]},{"teal":745,"source":"contracts/Mamm.algo.ts:171","pc":[699,700]},{"teal":748,"source":"contracts/Mamm.algo.ts:168","pc":[701]},{"teal":749,"source":"contracts/Mamm.algo.ts:168","pc":[702,703]},{"teal":752,"source":"contracts/Mamm.algo.ts:168","pc":[704]},{"teal":753,"source":"contracts/Mamm.algo.ts:167","pc":[705,706,707]},{"teal":761,"source":"contracts/Mamm.algo.ts:174","pc":[708]},{"teal":762,"source":"contracts/Mamm.algo.ts:174","pc":[709]},{"teal":763,"source":"contracts/Mamm.algo.ts:174","pc":[710,711]},{"teal":767,"source":"contracts/Mamm.algo.ts:175","pc":[712,713]},{"teal":768,"source":"contracts/Mamm.algo.ts:175","pc":[714,715]},{"teal":772,"source":"contracts/Mamm.algo.ts:176","pc":[716,717]},{"teal":773,"source":"contracts/Mamm.algo.ts:176","pc":[718,719]},{"teal":776,"source":"contracts/Mamm.algo.ts:174","pc":[720]},{"teal":777,"source":"contracts/Mamm.algo.ts:174","pc":[721,722]},{"teal":780,"source":"contracts/Mamm.algo.ts:174","pc":[723]},{"teal":786,"source":"contracts/Mamm.algo.ts:179","pc":[724,725]},{"teal":787,"source":"contracts/Mamm.algo.ts:179","pc":[726]},{"teal":788,"source":"contracts/Mamm.algo.ts:179","pc":[727]},{"teal":789,"source":"contracts/Mamm.algo.ts:179","pc":[728]},{"teal":790,"source":"contracts/Mamm.algo.ts:179","pc":[729,730,731]},{"teal":799,"source":"contracts/Mamm.algo.ts:180","pc":[732]},{"teal":800,"source":"contracts/Mamm.algo.ts:180","pc":[733]},{"teal":801,"source":"contracts/Mamm.algo.ts:180","pc":[734,735]},{"teal":805,"source":"contracts/Mamm.algo.ts:181","pc":[736,737]},{"teal":806,"source":"contracts/Mamm.algo.ts:181","pc":[738]},{"teal":807,"source":"contracts/Mamm.algo.ts:181","pc":[739,740]},{"teal":811,"source":"contracts/Mamm.algo.ts:182","pc":[741,742]},{"teal":812,"source":"contracts/Mamm.algo.ts:182","pc":[743,744]},{"teal":816,"source":"contracts/Mamm.algo.ts:183","pc":[745,746]},{"teal":817,"source":"contracts/Mamm.algo.ts:183","pc":[747,748]},{"teal":820,"source":"contracts/Mamm.algo.ts:180","pc":[749]},{"teal":821,"source":"contracts/Mamm.algo.ts:180","pc":[750,751]},{"teal":824,"source":"contracts/Mamm.algo.ts:180","pc":[752]},{"teal":825,"source":"contracts/Mamm.algo.ts:179","pc":[753,754,755]},{"teal":833,"source":"contracts/Mamm.algo.ts:186","pc":[756]},{"teal":834,"source":"contracts/Mamm.algo.ts:186","pc":[757]},{"teal":835,"source":"contracts/Mamm.algo.ts:186","pc":[758,759]},{"teal":839,"source":"contracts/Mamm.algo.ts:187","pc":[760,761]},{"teal":840,"source":"contracts/Mamm.algo.ts:187","pc":[762,763]},{"teal":844,"source":"contracts/Mamm.algo.ts:188","pc":[764,765]},{"teal":845,"source":"contracts/Mamm.algo.ts:188","pc":[766,767]},{"teal":848,"source":"contracts/Mamm.algo.ts:186","pc":[768]},{"teal":849,"source":"contracts/Mamm.algo.ts:186","pc":[769,770]},{"teal":852,"source":"contracts/Mamm.algo.ts:186","pc":[771]},{"teal":855,"source":"contracts/Mamm.algo.ts:137","pc":[772]},{"teal":859,"source":"contracts/Mamm.algo.ts:194","pc":[773,774,775]},{"teal":863,"source":"contracts/Mamm.algo.ts:195","pc":[776,777]},{"teal":864,"source":"contracts/Mamm.algo.ts:195","pc":[778,779]},{"teal":865,"source":"contracts/Mamm.algo.ts:195","pc":[780]},{"teal":866,"source":"contracts/Mamm.algo.ts:195","pc":[781,782,783]},{"teal":867,"source":"contracts/Mamm.algo.ts:195","pc":[784,785]},{"teal":868,"source":"contracts/Mamm.algo.ts:195","pc":[786,787,788]},{"teal":871,"source":"contracts/Mamm.algo.ts:195","pc":[789,790]},{"teal":874,"source":"contracts/Mamm.algo.ts:194","pc":[791]},{"teal":877,"source":"contracts/Mamm.algo.ts:12","pc":[792,793,794,795,796,797]},{"teal":878,"source":"contracts/Mamm.algo.ts:12","pc":[798,799,800]},{"teal":879,"source":"contracts/Mamm.algo.ts:12","pc":[801,802,803,804]},{"teal":882,"source":"contracts/Mamm.algo.ts:12","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[805]},{"teal":885,"source":"contracts/Mamm.algo.ts:12","pc":[806,807,808,809,810,811]},{"teal":886,"source":"contracts/Mamm.algo.ts:12","pc":[812,813,814,815,816,817]},{"teal":887,"source":"contracts/Mamm.algo.ts:12","pc":[818,819,820,821,822,823]},{"teal":888,"source":"contracts/Mamm.algo.ts:12","pc":[824,825,826]},{"teal":889,"source":"contracts/Mamm.algo.ts:12","pc":[827,828,829,830,831,832,833,834]},{"teal":892,"source":"contracts/Mamm.algo.ts:12","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[835]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"byteCode":{"approval":"CyAGAAEE///og7HeFuCnEgYmDQAEdGxwcwNwdHIDc3RyA3B0aQNzdGkCbHABawVhZG1pbgNscG4DbHBzA2xwZANscHUxGBQhBQsxGQiNDAK/AAAAAAAAAAAAAAKxAAAAAAAAAAAAAACIAAIjQ4oAACcIMQBniTYaBFcCADYaA1cCADYaAhc2GgEXMRYjCUk4ECMSRIgAAiNDigUAKCcIZDEAEkQqImcrImcpImcnByJnJwYiZycJi/xJFRZXBgJMUGcnCoAFAANNTFBnJwshBWcnDIv7SRUWVwYCTFBngAd2ZXJzaW9ugegHZ4AGbWluYmFsIQRni/84BzIKEkSL/zgIIQQSRCcEi/5nJwWL/WexJLIQJwRkshEyCrIUIrISIrIBs7EkshAnBWSyETIKshQishIisgGzsYEDshAlsiInC2SyIycJZFcCALImJwpkVwIAsiUnDGRXAgCyJyKyAbO0PIwAJwaLAGcpJWeJNhoCFzYaAReIAAIjQ4oCAChHBSpkjAArZIwBKWSMAosCIhJBAAuL/4v+C5KMA0IAKov/iwIdIosAH0hITBREjAQii/6LAgsiiwEfSEhMFESMBYsFiwSIAT6MAyqLAIv/CGcriwGL/ghnKYsCiwMIZycHiwCL/wiLAYv+CAtnsSSyECcGZLIRMQCyFIsDshIisgGzKUlkiwMJZ4k2GgEXMRYjCUk4ECQSRIgAAiNDigIAKEcEKmSMACtkjAEpZIwCi/4iDUSL/osCDkSL/zgAMQASRIv/OBQyChJEi/84EScGZBJEi/84Eov+EkSL/osAHSKLAh9ISEwURIwDi/6LAR0iiwIfSEhMFESMBCqLAIsDCWcriwGLBAlnKYsCi/4JZycHiwCLAwmLAYsECQtnKUlki/4IZycEZCITQQAYsSSyECcEZLIRMQCyFIsDshIisgGzQgAQsSOyEDEAsgeLA7IIIrIBsycFZCITQQAYsSSyECcFZLIRMQCyFIsEshIisgGzQgAQsSOyEDEAsgeLBLIIIrIBs4mKAgGL/4v+DEEABYv/QgACi/6JgAS4RHs2NhoAjgH9QwCABLZDbfKABBMt1WeABBJW3Eg2GgCOA/0z/iv+xgA=","clear":"Cw=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Mamm contract
 */
export type MammArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'initApplication(pay,uint64,uint64,string,string)void': {
      mbrTxn: AppMethodCallTransactionArgument
      primaryAssetId: bigint | number
      secondaryAssetId: bigint | number
      lpAssetName: string
      lpAssetUrl: string
    }
    'addLiquidity(uint64,uint64)void': {
      primaryAmount: bigint | number
      secondaryAmount: bigint | number
    }
    'removeLiquidity(axfer,uint64)void': {
      burnTxn: AppMethodCallTransactionArgument
      lpTokensBurned: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'initApplication(pay,uint64,uint64,string,string)void': [mbrTxn: AppMethodCallTransactionArgument, primaryAssetId: bigint | number, secondaryAssetId: bigint | number, lpAssetName: string, lpAssetUrl: string]
    'addLiquidity(uint64,uint64)void': [primaryAmount: bigint | number, secondaryAmount: bigint | number]
    'removeLiquidity(axfer,uint64)void': [burnTxn: AppMethodCallTransactionArgument, lpTokensBurned: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type MammReturns = {
  'createApplication()void': void
  'initApplication(pay,uint64,uint64,string,string)void': void
  'addLiquidity(uint64,uint64)void': void
  'removeLiquidity(axfer,uint64)void': void
}

/**
 * Defines the types of available calls and state of the Mamm smart contract.
 */
export type MammTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: MammArgs['obj']['createApplication()void']
      argsTuple: MammArgs['tuple']['createApplication()void']
      returns: MammReturns['createApplication()void']
    }>
    & Record<'initApplication(pay,uint64,uint64,string,string)void' | 'initApplication', {
      argsObj: MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void']
      argsTuple: MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']
      returns: MammReturns['initApplication(pay,uint64,uint64,string,string)void']
    }>
    & Record<'addLiquidity(uint64,uint64)void' | 'addLiquidity', {
      argsObj: MammArgs['obj']['addLiquidity(uint64,uint64)void']
      argsTuple: MammArgs['tuple']['addLiquidity(uint64,uint64)void']
      returns: MammReturns['addLiquidity(uint64,uint64)void']
    }>
    & Record<'removeLiquidity(axfer,uint64)void' | 'removeLiquidity', {
      argsObj: MammArgs['obj']['removeLiquidity(axfer,uint64)void']
      argsTuple: MammArgs['tuple']['removeLiquidity(axfer,uint64)void']
      returns: MammReturns['removeLiquidity(axfer,uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        primaryTokenReserve: bigint
        secondaryTokenReserve: bigint
        primaryTokenId: bigint
        secondaryTokenId: bigint
        totalLpSupply: bigint
        kValue: bigint
        lpTokenId: bigint
        lpTokenName: string
        lpTokenSymbol: string
        lpTokenDecimals: bigint
        lpTokenUrl: string
        admin: string
        minimumBalance: bigint
        contractVersion: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type MammSignatures = keyof MammTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MammNonVoidMethodSignatures = keyof MammTypes['methods'] extends infer T ? T extends keyof MammTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Mamm smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MammSignatures> = MammTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Mamm smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MammSignatures> = MammTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = MammTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type MammCreateCallParams =
  | Expand<CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type MammDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MammCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Mamm smart contract
 */
export abstract class MammParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends MammCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return MammParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Mamm smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(pay,uint64,uint64,string,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication(pay,uint64,uint64,string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn, params.args.primaryAssetId, params.args.secondaryAssetId, params.args.lpAssetName, params.args.lpAssetUrl],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.primaryAmount, params.args.secondaryAmount],
    }
  }
  /**
   * Constructs a no op call for the removeLiquidity(axfer,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLiquidity(params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeLiquidity(axfer,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.burnTxn, params.args.lpTokensBurned],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Mamm smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MammFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MammFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MammClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MammClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Mamm smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MammDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? MammParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (MammCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new MammClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mamm smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(MammParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mamm smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(MammParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mamm smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(MammParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | MammReturns['createApplication()void']) }, appClient: new MammClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Mamm smart contract
 */
export class MammClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MammClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Mamm app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MammClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MammNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MammClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MammClient> {
    return new MammClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MammClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MammClient> {
    return new MammClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Mamm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Mamm smart contract using the `initApplication(pay,uint64,uint64,string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `addLiquidity(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `removeLiquidity(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeLiquidity: (params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.removeLiquidity(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Mamm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Mamm smart contract using the `initApplication(pay,uint64,uint64,string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `addLiquidity(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `removeLiquidity(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeLiquidity: (params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.removeLiquidity(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Mamm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Mamm smart contract using the `initApplication(pay,uint64,uint64,string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['initApplication(pay,uint64,uint64,string,string)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `addLiquidity(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['addLiquidity(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `removeLiquidity(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeLiquidity: async (params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.removeLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['removeLiquidity(axfer,uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MammClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Mamm app
   */
  state = {
    /**
     * Methods to access global state for the current Mamm app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          primaryTokenReserve: result.primary_token_reserve,
          secondaryTokenReserve: result.secondary_token_reserve,
          primaryTokenId: result.primary_token_id,
          secondaryTokenId: result.secondary_token_id,
          totalLpSupply: result.total_lp_supply,
          kValue: result.k_value,
          lpTokenId: result.lp_token_id,
          lpTokenName: result.lp_token_name,
          lpTokenSymbol: result.lp_token_symbol,
          lpTokenDecimals: result.lp_token_decimals,
          lpTokenUrl: result.lp_token_url,
          admin: result.admin,
          minimumBalance: result.minimum_balance,
          contractVersion: result.contract_version,
        }
      },
      /**
       * Get the current value of the primary_token_reserve key in global state
       */
      primaryTokenReserve: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("primary_token_reserve")) as bigint | undefined },
      /**
       * Get the current value of the secondary_token_reserve key in global state
       */
      secondaryTokenReserve: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("secondary_token_reserve")) as bigint | undefined },
      /**
       * Get the current value of the primary_token_id key in global state
       */
      primaryTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("primary_token_id")) as bigint | undefined },
      /**
       * Get the current value of the secondary_token_id key in global state
       */
      secondaryTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("secondary_token_id")) as bigint | undefined },
      /**
       * Get the current value of the total_lp_supply key in global state
       */
      totalLpSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_lp_supply")) as bigint | undefined },
      /**
       * Get the current value of the k_value key in global state
       */
      kValue: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("k_value")) as bigint | undefined },
      /**
       * Get the current value of the lp_token_id key in global state
       */
      lpTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lp_token_id")) as bigint | undefined },
      /**
       * Get the current value of the lp_token_name key in global state
       */
      lpTokenName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lp_token_name")) as string | undefined },
      /**
       * Get the current value of the lp_token_symbol key in global state
       */
      lpTokenSymbol: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lp_token_symbol")) as string | undefined },
      /**
       * Get the current value of the lp_token_decimals key in global state
       */
      lpTokenDecimals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lp_token_decimals")) as bigint | undefined },
      /**
       * Get the current value of the lp_token_url key in global state
       */
      lpTokenUrl: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lp_token_url")) as string | undefined },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the minimum_balance key in global state
       */
      minimumBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minimum_balance")) as bigint | undefined },
      /**
       * Get the current value of the contract_version key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contract_version")) as bigint | undefined },
    },
  }

  public newGroup(): MammComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApplication(pay,uint64,uint64,string,string)void method call against the Mamm contract
       */
      initApplication(params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64)void method call against the Mamm contract
       */
      addLiquidity(params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeLiquidity(axfer,uint64)void method call against the Mamm contract
       */
      removeLiquidity(params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Mamm contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MammComposer
  }
}
export type MammComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(pay,uint64,uint64,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string)void']>): MammComposer<[...TReturns, MammReturns['initApplication(pay,uint64,uint64,string,string)void'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64)void']>): MammComposer<[...TReturns, MammReturns['addLiquidity(uint64,uint64)void'] | undefined]>

  /**
   * Calls the removeLiquidity(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidity(params?: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']>): MammComposer<[...TReturns, MammReturns['removeLiquidity(axfer,uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Mamm smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MammComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MammComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MammComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MammComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MammComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MammComposerResults<TReturns>>
}
export type MammComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

