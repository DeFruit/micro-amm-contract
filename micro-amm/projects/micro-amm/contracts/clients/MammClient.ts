/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Mamm","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"initApplication","args":[{"name":"mbrTxn","type":"pay"},{"name":"primaryAssetId","type":"uint64"},{"name":"secondaryAssetId","type":"uint64"},{"name":"lpAssetName","type":"string"},{"name":"lpAssetURL","type":"string"},{"name":"swapFeeBps","type":"uint64"},{"name":"protocolFeeBps","type":"uint64"},{"name":"treasuryAddress","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLiquidity","args":[{"name":"primaryAmount","type":"uint64"},{"name":"secondaryAmount","type":"uint64"},{"name":"primaryAssetTransfer","type":"axfer"},{"name":"secondaryAssetTransfer","type":"axfer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"removeLiquidity","args":[{"name":"burnTxn","type":"axfer"},{"name":"lpTokensBurned","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"swap","args":[{"name":"inputAmount","type":"uint64"},{"name":"swapType","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateSwapFee","args":[{"name":"newFee","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateProtocolFee","args":[{"name":"newFee","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateAdmin","args":[{"name":"newAdmin","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateTreasury","args":[{"name":"newTreasury","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateMinimumBalance","args":[{"name":"newMBR","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateContractEnding","args":[{"name":"newEnding","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":5,"ints":14},"local":{"bytes":0,"ints":0}},"keys":{"global":{"primary_token_reserve":{"key":"cHRy","keyType":"AVMBytes","valueType":"uint64"},"secondary_token_reserve":{"key":"c3Ry","keyType":"AVMBytes","valueType":"uint64"},"primary_token_id":{"key":"cHRp","keyType":"AVMBytes","valueType":"uint64"},"secondary_token_id":{"key":"c3Rp","keyType":"AVMBytes","valueType":"uint64"},"total_lp_supply":{"key":"dGxwcw==","keyType":"AVMBytes","valueType":"uint64"},"lp_tokens_issued":{"key":"bHB0aQ==","keyType":"AVMBytes","valueType":"uint64"},"k_value":{"key":"aw==","keyType":"AVMBytes","valueType":"uint64"},"lp_token_id":{"key":"bHA=","keyType":"AVMBytes","valueType":"uint64"},"lp_token_name":{"key":"bHBu","keyType":"AVMBytes","valueType":"string"},"lp_token_symbol":{"key":"bHBz","keyType":"AVMBytes","valueType":"string"},"lp_token_decimals":{"key":"bHBk","keyType":"AVMBytes","valueType":"uint64"},"lp_token_url":{"key":"bHB1","keyType":"AVMBytes","valueType":"string"},"swap_fee_bps":{"key":"c2ZicHM=","keyType":"AVMBytes","valueType":"uint64"},"protocol_fee_bps":{"key":"cGZicHM=","keyType":"AVMBytes","valueType":"uint64"},"admin":{"key":"YWRtaW4=","keyType":"AVMBytes","valueType":"address"},"treasury_address":{"key":"dHJlYXN1cnk=","keyType":"AVMBytes","valueType":"address"},"minimum_balance":{"key":"bWluYmFs","keyType":"AVMBytes","valueType":"uint64"},"contract_ending":{"key":"ZW5k","keyType":"AVMBytes","valueType":"uint64"},"contract_version":{"key":"dmVyc2lvbg==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/Mamm.algo.ts:15","pc":[0]},{"teal":2,"source":"contracts/Mamm.algo.ts:15","pc":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},{"teal":3,"source":"contracts/Mamm.algo.ts:15","pc":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104]},{"teal":15,"source":"contracts/Mamm.algo.ts:15","pc":[105,106]},{"teal":16,"source":"contracts/Mamm.algo.ts:15","pc":[107]},{"teal":17,"source":"contracts/Mamm.algo.ts:15","pc":[108,109]},{"teal":18,"source":"contracts/Mamm.algo.ts:15","pc":[110]},{"teal":19,"source":"contracts/Mamm.algo.ts:15","pc":[111,112]},{"teal":20,"source":"contracts/Mamm.algo.ts:15","pc":[113]},{"teal":21,"source":"contracts/Mamm.algo.ts:15","pc":[114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139]},{"teal":25,"source":"contracts/Mamm.algo.ts:15","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[140]},{"teal":30,"source":"contracts/Mamm.algo.ts:62","pc":[141,142,143]},{"teal":31,"source":"contracts/Mamm.algo.ts:62","pc":[144]},{"teal":32,"source":"contracts/Mamm.algo.ts:62","pc":[145]},{"teal":36,"source":"contracts/Mamm.algo.ts:62","pc":[146,147,148]},{"teal":40,"source":"contracts/Mamm.algo.ts:63","pc":[149]},{"teal":41,"source":"contracts/Mamm.algo.ts:63","pc":[150,151]},{"teal":42,"source":"contracts/Mamm.algo.ts:63","pc":[152]},{"teal":43,"source":"contracts/Mamm.algo.ts:62","pc":[153]},{"teal":48,"source":"contracts/Mamm.algo.ts:66","pc":[154,155,156]},{"teal":49,"source":"contracts/Mamm.algo.ts:66","pc":[157]},{"teal":50,"source":"contracts/Mamm.algo.ts:66","pc":[158]},{"teal":54,"source":"contracts/Mamm.algo.ts:66","pc":[159,160,161]},{"teal":58,"source":"contracts/Mamm.algo.ts:67","pc":[162]},{"teal":59,"source":"contracts/Mamm.algo.ts:67","pc":[163]},{"teal":60,"source":"contracts/Mamm.algo.ts:67","pc":[164,165]},{"teal":61,"source":"contracts/Mamm.algo.ts:67","pc":[166]},{"teal":64,"source":"contracts/Mamm.algo.ts:67","errorMessage":"Only admin can delete the application","pc":[167]},{"teal":68,"source":"contracts/Mamm.algo.ts:68","pc":[168,169]},{"teal":69,"source":"contracts/Mamm.algo.ts:68","pc":[170]},{"teal":70,"source":"contracts/Mamm.algo.ts:68","pc":[171]},{"teal":71,"source":"contracts/Mamm.algo.ts:68","pc":[172]},{"teal":74,"source":"contracts/Mamm.algo.ts:68","errorMessage":"Contract needs to be ending first","pc":[173]},{"teal":78,"source":"contracts/Mamm.algo.ts:69","pc":[174,175]},{"teal":79,"source":"contracts/Mamm.algo.ts:69","pc":[176]},{"teal":80,"source":"contracts/Mamm.algo.ts:69","pc":[177]},{"teal":81,"source":"contracts/Mamm.algo.ts:69","pc":[178]},{"teal":84,"source":"contracts/Mamm.algo.ts:69","errorMessage":"Primary reserve must be empty","pc":[179]},{"teal":88,"source":"contracts/Mamm.algo.ts:70","pc":[180,181]},{"teal":89,"source":"contracts/Mamm.algo.ts:70","pc":[182]},{"teal":90,"source":"contracts/Mamm.algo.ts:70","pc":[183]},{"teal":91,"source":"contracts/Mamm.algo.ts:70","pc":[184]},{"teal":94,"source":"contracts/Mamm.algo.ts:70","errorMessage":"Secondary reserve must be empty","pc":[185]},{"teal":104,"source":"contracts/Mamm.algo.ts:73","pc":[186]},{"teal":105,"source":"contracts/Mamm.algo.ts:73","pc":[187]},{"teal":106,"source":"contracts/Mamm.algo.ts:73","pc":[188,189]},{"teal":110,"source":"contracts/Mamm.algo.ts:74","pc":[190]},{"teal":111,"source":"contracts/Mamm.algo.ts:74","pc":[191]},{"teal":112,"source":"contracts/Mamm.algo.ts:74","pc":[192,193]},{"teal":116,"source":"contracts/Mamm.algo.ts:75","pc":[194]},{"teal":117,"source":"contracts/Mamm.algo.ts:75","pc":[195]},{"teal":118,"source":"contracts/Mamm.algo.ts:75","pc":[196,197]},{"teal":122,"source":"contracts/Mamm.algo.ts:76","pc":[198]},{"teal":123,"source":"contracts/Mamm.algo.ts:76","pc":[199,200]},{"teal":127,"source":"contracts/Mamm.algo.ts:77","pc":[201]},{"teal":128,"source":"contracts/Mamm.algo.ts:77","pc":[202]},{"teal":129,"source":"contracts/Mamm.algo.ts:77","pc":[203,204]},{"teal":133,"source":"contracts/Mamm.algo.ts:78","pc":[205]},{"teal":134,"source":"contracts/Mamm.algo.ts:78","pc":[206,207]},{"teal":137,"source":"contracts/Mamm.algo.ts:73","pc":[208]},{"teal":147,"source":"contracts/Mamm.algo.ts:80","pc":[209]},{"teal":148,"source":"contracts/Mamm.algo.ts:80","pc":[210]},{"teal":149,"source":"contracts/Mamm.algo.ts:80","pc":[211,212]},{"teal":153,"source":"contracts/Mamm.algo.ts:81","pc":[213]},{"teal":154,"source":"contracts/Mamm.algo.ts:81","pc":[214]},{"teal":155,"source":"contracts/Mamm.algo.ts:81","pc":[215,216]},{"teal":159,"source":"contracts/Mamm.algo.ts:82","pc":[217]},{"teal":160,"source":"contracts/Mamm.algo.ts:82","pc":[218]},{"teal":161,"source":"contracts/Mamm.algo.ts:82","pc":[219,220]},{"teal":165,"source":"contracts/Mamm.algo.ts:83","pc":[221]},{"teal":166,"source":"contracts/Mamm.algo.ts:83","pc":[222,223]},{"teal":170,"source":"contracts/Mamm.algo.ts:84","pc":[224]},{"teal":171,"source":"contracts/Mamm.algo.ts:84","pc":[225]},{"teal":172,"source":"contracts/Mamm.algo.ts:84","pc":[226,227]},{"teal":176,"source":"contracts/Mamm.algo.ts:85","pc":[228]},{"teal":177,"source":"contracts/Mamm.algo.ts:85","pc":[229,230]},{"teal":180,"source":"contracts/Mamm.algo.ts:80","pc":[231]},{"teal":184,"source":"contracts/Mamm.algo.ts:87","pc":[232,233]},{"teal":185,"source":"contracts/Mamm.algo.ts:87","pc":[234,235,236,237]},{"teal":186,"source":"contracts/Mamm.algo.ts:87","pc":[238]},{"teal":190,"source":"contracts/Mamm.algo.ts:94","pc":[239,240,241]},{"teal":191,"source":"contracts/Mamm.algo.ts:66","pc":[242]},{"teal":196,"source":"contracts/Mamm.algo.ts:106","pc":[243,244,245]},{"teal":197,"source":"contracts/Mamm.algo.ts:106","pc":[246]},{"teal":198,"source":"contracts/Mamm.algo.ts:106","pc":[247]},{"teal":199,"source":"contracts/Mamm.algo.ts:106","pc":[248,249]},{"teal":200,"source":"contracts/Mamm.algo.ts:106","pc":[250]},{"teal":203,"source":"contracts/Mamm.algo.ts:106","errorMessage":"argument 0 (treasuryAddress) for initApplication must be a address","pc":[251]},{"teal":206,"source":"contracts/Mamm.algo.ts:105","pc":[252,253,254]},{"teal":207,"source":"contracts/Mamm.algo.ts:105","pc":[255]},{"teal":210,"source":"contracts/Mamm.algo.ts:104","pc":[256,257,258]},{"teal":211,"source":"contracts/Mamm.algo.ts:104","pc":[259]},{"teal":214,"source":"contracts/Mamm.algo.ts:103","pc":[260,261,262]},{"teal":215,"source":"contracts/Mamm.algo.ts:103","pc":[263,264,265]},{"teal":218,"source":"contracts/Mamm.algo.ts:102","pc":[266,267,268]},{"teal":219,"source":"contracts/Mamm.algo.ts:102","pc":[269,270,271]},{"teal":222,"source":"contracts/Mamm.algo.ts:101","pc":[272,273,274]},{"teal":223,"source":"contracts/Mamm.algo.ts:101","pc":[275]},{"teal":226,"source":"contracts/Mamm.algo.ts:100","pc":[276,277,278]},{"teal":227,"source":"contracts/Mamm.algo.ts:100","pc":[279]},{"teal":230,"source":"contracts/Mamm.algo.ts:99","pc":[280,281]},{"teal":231,"source":"contracts/Mamm.algo.ts:99","pc":[282]},{"teal":232,"source":"contracts/Mamm.algo.ts:99","pc":[283]},{"teal":233,"source":"contracts/Mamm.algo.ts:99","pc":[284]},{"teal":234,"source":"contracts/Mamm.algo.ts:99","pc":[285,286]},{"teal":235,"source":"contracts/Mamm.algo.ts:99","pc":[287]},{"teal":236,"source":"contracts/Mamm.algo.ts:99","pc":[288]},{"teal":239,"source":"contracts/Mamm.algo.ts:99","errorMessage":"argument 7 (mbrTxn) for initApplication must be a pay transaction","pc":[289]},{"teal":242,"source":"contracts/Mamm.algo.ts:98","pc":[290,291,292]},{"teal":243,"source":"contracts/Mamm.algo.ts:98","pc":[293]},{"teal":244,"source":"contracts/Mamm.algo.ts:98","pc":[294]},{"teal":248,"source":"contracts/Mamm.algo.ts:98","pc":[295,296,297]},{"teal":251,"source":"contracts/Mamm.algo.ts:98","pc":[298]},{"teal":255,"source":"contracts/Mamm.algo.ts:108","pc":[299]},{"teal":256,"source":"contracts/Mamm.algo.ts:108","pc":[300]},{"teal":257,"source":"contracts/Mamm.algo.ts:108","pc":[301,302]},{"teal":258,"source":"contracts/Mamm.algo.ts:108","pc":[303]},{"teal":261,"source":"contracts/Mamm.algo.ts:108","errorMessage":"Only admin can initialize the application","pc":[304]},{"teal":265,"source":"contracts/Mamm.algo.ts:110","pc":[305,306]},{"teal":266,"source":"contracts/Mamm.algo.ts:110","pc":[307]},{"teal":267,"source":"contracts/Mamm.algo.ts:110","pc":[308]},{"teal":271,"source":"contracts/Mamm.algo.ts:111","pc":[309,310]},{"teal":272,"source":"contracts/Mamm.algo.ts:111","pc":[311]},{"teal":273,"source":"contracts/Mamm.algo.ts:111","pc":[312]},{"teal":277,"source":"contracts/Mamm.algo.ts:112","pc":[313,314]},{"teal":278,"source":"contracts/Mamm.algo.ts:112","pc":[315]},{"teal":279,"source":"contracts/Mamm.algo.ts:112","pc":[316]},{"teal":283,"source":"contracts/Mamm.algo.ts:113","pc":[317,318]},{"teal":284,"source":"contracts/Mamm.algo.ts:113","pc":[319]},{"teal":285,"source":"contracts/Mamm.algo.ts:113","pc":[320]},{"teal":289,"source":"contracts/Mamm.algo.ts:114","pc":[321,322]},{"teal":290,"source":"contracts/Mamm.algo.ts:114","pc":[323]},{"teal":291,"source":"contracts/Mamm.algo.ts:114","pc":[324]},{"teal":295,"source":"contracts/Mamm.algo.ts:115","pc":[325,326]},{"teal":296,"source":"contracts/Mamm.algo.ts:115","pc":[327,328]},{"teal":297,"source":"contracts/Mamm.algo.ts:115","pc":[329]},{"teal":298,"source":"contracts/Mamm.algo.ts:115","pc":[330]},{"teal":299,"source":"contracts/Mamm.algo.ts:115","pc":[331]},{"teal":300,"source":"contracts/Mamm.algo.ts:115","pc":[332,333,334]},{"teal":301,"source":"contracts/Mamm.algo.ts:115","pc":[335]},{"teal":302,"source":"contracts/Mamm.algo.ts:115","pc":[336]},{"teal":303,"source":"contracts/Mamm.algo.ts:115","pc":[337]},{"teal":307,"source":"contracts/Mamm.algo.ts:116","pc":[338,339]},{"teal":308,"source":"contracts/Mamm.algo.ts:116","pc":[340,341,342,343,344,345,346]},{"teal":309,"source":"contracts/Mamm.algo.ts:116","pc":[347]},{"teal":313,"source":"contracts/Mamm.algo.ts:117","pc":[348,349]},{"teal":314,"source":"contracts/Mamm.algo.ts:117","pc":[350,351]},{"teal":315,"source":"contracts/Mamm.algo.ts:117","pc":[352]},{"teal":319,"source":"contracts/Mamm.algo.ts:118","pc":[353,354]},{"teal":320,"source":"contracts/Mamm.algo.ts:118","pc":[355,356]},{"teal":321,"source":"contracts/Mamm.algo.ts:118","pc":[357]},{"teal":322,"source":"contracts/Mamm.algo.ts:118","pc":[358]},{"teal":323,"source":"contracts/Mamm.algo.ts:118","pc":[359]},{"teal":324,"source":"contracts/Mamm.algo.ts:118","pc":[360,361,362]},{"teal":325,"source":"contracts/Mamm.algo.ts:118","pc":[363]},{"teal":326,"source":"contracts/Mamm.algo.ts:118","pc":[364]},{"teal":327,"source":"contracts/Mamm.algo.ts:118","pc":[365]},{"teal":331,"source":"contracts/Mamm.algo.ts:119","pc":[366,367,368,369,370,371,372,373,374]},{"teal":332,"source":"contracts/Mamm.algo.ts:119","pc":[375,376,377]},{"teal":333,"source":"contracts/Mamm.algo.ts:119","pc":[378]},{"teal":337,"source":"contracts/Mamm.algo.ts:120","pc":[379,380]},{"teal":338,"source":"contracts/Mamm.algo.ts:120","pc":[381,382,383,384]},{"teal":339,"source":"contracts/Mamm.algo.ts:120","pc":[385]},{"teal":343,"source":"contracts/Mamm.algo.ts:121","pc":[386,387]},{"teal":344,"source":"contracts/Mamm.algo.ts:121","pc":[388,389]},{"teal":345,"source":"contracts/Mamm.algo.ts:121","pc":[390]},{"teal":349,"source":"contracts/Mamm.algo.ts:122","pc":[391,392]},{"teal":350,"source":"contracts/Mamm.algo.ts:122","pc":[393,394]},{"teal":351,"source":"contracts/Mamm.algo.ts:122","pc":[395]},{"teal":355,"source":"contracts/Mamm.algo.ts:123","pc":[396,397]},{"teal":356,"source":"contracts/Mamm.algo.ts:123","pc":[398,399]},{"teal":357,"source":"contracts/Mamm.algo.ts:123","pc":[400]},{"teal":362,"source":"contracts/Mamm.algo.ts:125","pc":[401,402]},{"teal":363,"source":"contracts/Mamm.algo.ts:125","pc":[403,404]},{"teal":364,"source":"contracts/Mamm.algo.ts:125","pc":[405,406]},{"teal":365,"source":"contracts/Mamm.algo.ts:125","pc":[407]},{"teal":368,"source":"contracts/Mamm.algo.ts:125","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[408]},{"teal":371,"source":"contracts/Mamm.algo.ts:125","pc":[409,410]},{"teal":372,"source":"contracts/Mamm.algo.ts:125","pc":[411,412]},{"teal":373,"source":"contracts/Mamm.algo.ts:125","pc":[413,414,415,416]},{"teal":374,"source":"contracts/Mamm.algo.ts:125","pc":[417]},{"teal":377,"source":"contracts/Mamm.algo.ts:125","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"expected\":\"TOKEN_MBR * 4 + 3_000\"}","pc":[418]},{"teal":381,"source":"contracts/Mamm.algo.ts:127","pc":[419]},{"teal":382,"source":"contracts/Mamm.algo.ts:127","pc":[420,421]},{"teal":383,"source":"contracts/Mamm.algo.ts:127","pc":[422]},{"teal":387,"source":"contracts/Mamm.algo.ts:128","pc":[423]},{"teal":388,"source":"contracts/Mamm.algo.ts:128","pc":[424,425]},{"teal":389,"source":"contracts/Mamm.algo.ts:128","pc":[426]},{"teal":398,"source":"contracts/Mamm.algo.ts:131","pc":[427]},{"teal":399,"source":"contracts/Mamm.algo.ts:131","pc":[428]},{"teal":400,"source":"contracts/Mamm.algo.ts:131","pc":[429,430]},{"teal":404,"source":"contracts/Mamm.algo.ts:132","pc":[431]},{"teal":405,"source":"contracts/Mamm.algo.ts:132","pc":[432]},{"teal":406,"source":"contracts/Mamm.algo.ts:132","pc":[433,434]},{"teal":410,"source":"contracts/Mamm.algo.ts:133","pc":[435,436]},{"teal":411,"source":"contracts/Mamm.algo.ts:133","pc":[437,438]},{"teal":415,"source":"contracts/Mamm.algo.ts:134","pc":[439]},{"teal":416,"source":"contracts/Mamm.algo.ts:134","pc":[440,441]},{"teal":420,"source":"contracts/Mamm.algo.ts:135","pc":[442]},{"teal":421,"source":"contracts/Mamm.algo.ts:135","pc":[443,444]},{"teal":424,"source":"contracts/Mamm.algo.ts:131","pc":[445]},{"teal":433,"source":"contracts/Mamm.algo.ts:137","pc":[446]},{"teal":434,"source":"contracts/Mamm.algo.ts:137","pc":[447]},{"teal":435,"source":"contracts/Mamm.algo.ts:137","pc":[448,449]},{"teal":439,"source":"contracts/Mamm.algo.ts:138","pc":[450]},{"teal":440,"source":"contracts/Mamm.algo.ts:138","pc":[451]},{"teal":441,"source":"contracts/Mamm.algo.ts:138","pc":[452,453]},{"teal":445,"source":"contracts/Mamm.algo.ts:139","pc":[454,455]},{"teal":446,"source":"contracts/Mamm.algo.ts:139","pc":[456,457]},{"teal":450,"source":"contracts/Mamm.algo.ts:140","pc":[458]},{"teal":451,"source":"contracts/Mamm.algo.ts:140","pc":[459,460]},{"teal":455,"source":"contracts/Mamm.algo.ts:141","pc":[461]},{"teal":456,"source":"contracts/Mamm.algo.ts:141","pc":[462,463]},{"teal":459,"source":"contracts/Mamm.algo.ts:137","pc":[464]},{"teal":470,"source":"contracts/Mamm.algo.ts:145","pc":[465]},{"teal":471,"source":"contracts/Mamm.algo.ts:145","pc":[466,467]},{"teal":472,"source":"contracts/Mamm.algo.ts:145","pc":[468,469]},{"teal":476,"source":"contracts/Mamm.algo.ts:146","pc":[470,471]},{"teal":477,"source":"contracts/Mamm.algo.ts:146","pc":[472,473]},{"teal":481,"source":"contracts/Mamm.algo.ts:147","pc":[474,475]},{"teal":482,"source":"contracts/Mamm.algo.ts:147","pc":[476]},{"teal":483,"source":"contracts/Mamm.algo.ts:147","pc":[477,478]},{"teal":487,"source":"contracts/Mamm.algo.ts:148","pc":[479,480]},{"teal":488,"source":"contracts/Mamm.algo.ts:148","pc":[481]},{"teal":489,"source":"contracts/Mamm.algo.ts:148","pc":[482,483,484]},{"teal":490,"source":"contracts/Mamm.algo.ts:148","pc":[485,486]},{"teal":494,"source":"contracts/Mamm.algo.ts:149","pc":[487,488]},{"teal":495,"source":"contracts/Mamm.algo.ts:149","pc":[489]},{"teal":496,"source":"contracts/Mamm.algo.ts:149","pc":[490,491,492]},{"teal":497,"source":"contracts/Mamm.algo.ts:149","pc":[493,494]},{"teal":501,"source":"contracts/Mamm.algo.ts:150","pc":[495,496]},{"teal":502,"source":"contracts/Mamm.algo.ts:150","pc":[497]},{"teal":503,"source":"contracts/Mamm.algo.ts:150","pc":[498,499,500]},{"teal":504,"source":"contracts/Mamm.algo.ts:150","pc":[501,502]},{"teal":508,"source":"contracts/Mamm.algo.ts:151","pc":[503]},{"teal":509,"source":"contracts/Mamm.algo.ts:151","pc":[504,505]},{"teal":512,"source":"contracts/Mamm.algo.ts:145","pc":[506]},{"teal":513,"source":"contracts/Mamm.algo.ts:145","pc":[507,508]},{"teal":514,"source":"contracts/Mamm.algo.ts:145","pc":[509,510]},{"teal":518,"source":"contracts/Mamm.algo.ts:153","pc":[511,512]},{"teal":519,"source":"contracts/Mamm.algo.ts:153","pc":[513,514]},{"teal":520,"source":"contracts/Mamm.algo.ts:153","pc":[515]},{"teal":524,"source":"contracts/Mamm.algo.ts:154","pc":[516,517]},{"teal":525,"source":"contracts/Mamm.algo.ts:154","pc":[518,519]},{"teal":526,"source":"contracts/Mamm.algo.ts:154","pc":[520]},{"teal":527,"source":"contracts/Mamm.algo.ts:98","pc":[521]},{"teal":532,"source":"contracts/Mamm.algo.ts:162","pc":[522,523]},{"teal":533,"source":"contracts/Mamm.algo.ts:162","pc":[524]},{"teal":534,"source":"contracts/Mamm.algo.ts:162","pc":[525]},{"teal":535,"source":"contracts/Mamm.algo.ts:162","pc":[526]},{"teal":536,"source":"contracts/Mamm.algo.ts:162","pc":[527,528]},{"teal":537,"source":"contracts/Mamm.algo.ts:162","pc":[529]},{"teal":538,"source":"contracts/Mamm.algo.ts:162","pc":[530]},{"teal":541,"source":"contracts/Mamm.algo.ts:162","errorMessage":"argument 0 (secondaryAssetTransfer) for addLiquidity must be a axfer transaction","pc":[531]},{"teal":544,"source":"contracts/Mamm.algo.ts:161","pc":[532,533]},{"teal":545,"source":"contracts/Mamm.algo.ts:161","pc":[534,535]},{"teal":546,"source":"contracts/Mamm.algo.ts:161","pc":[536]},{"teal":547,"source":"contracts/Mamm.algo.ts:161","pc":[537]},{"teal":548,"source":"contracts/Mamm.algo.ts:161","pc":[538,539]},{"teal":549,"source":"contracts/Mamm.algo.ts:161","pc":[540]},{"teal":550,"source":"contracts/Mamm.algo.ts:161","pc":[541]},{"teal":553,"source":"contracts/Mamm.algo.ts:161","errorMessage":"argument 1 (primaryAssetTransfer) for addLiquidity must be a axfer transaction","pc":[542]},{"teal":556,"source":"contracts/Mamm.algo.ts:160","pc":[543,544,545]},{"teal":557,"source":"contracts/Mamm.algo.ts:160","pc":[546]},{"teal":560,"source":"contracts/Mamm.algo.ts:159","pc":[547,548,549]},{"teal":561,"source":"contracts/Mamm.algo.ts:159","pc":[550]},{"teal":564,"source":"contracts/Mamm.algo.ts:158","pc":[551,552,553]},{"teal":565,"source":"contracts/Mamm.algo.ts:158","pc":[554]},{"teal":566,"source":"contracts/Mamm.algo.ts:158","pc":[555]},{"teal":570,"source":"contracts/Mamm.algo.ts:158","pc":[556,557,558]},{"teal":573,"source":"contracts/Mamm.algo.ts:158","pc":[559]},{"teal":574,"source":"contracts/Mamm.algo.ts:158","pc":[560,561]},{"teal":578,"source":"contracts/Mamm.algo.ts:164","pc":[562,563]},{"teal":579,"source":"contracts/Mamm.algo.ts:164","pc":[564]},{"teal":580,"source":"contracts/Mamm.algo.ts:164","pc":[565,566]},{"teal":584,"source":"contracts/Mamm.algo.ts:165","pc":[567,568]},{"teal":585,"source":"contracts/Mamm.algo.ts:165","pc":[569]},{"teal":586,"source":"contracts/Mamm.algo.ts:165","pc":[570,571]},{"teal":590,"source":"contracts/Mamm.algo.ts:166","pc":[572,573]},{"teal":591,"source":"contracts/Mamm.algo.ts:166","pc":[574]},{"teal":592,"source":"contracts/Mamm.algo.ts:166","pc":[575,576]},{"teal":596,"source":"contracts/Mamm.algo.ts:167","pc":[577,578]},{"teal":597,"source":"contracts/Mamm.algo.ts:167","pc":[579]},{"teal":598,"source":"contracts/Mamm.algo.ts:167","pc":[580,581]},{"teal":608,"source":"contracts/Mamm.algo.ts:170","pc":[582,583]},{"teal":609,"source":"contracts/Mamm.algo.ts:171","pc":[584,585]},{"teal":610,"source":"contracts/Mamm.algo.ts:171","pc":[586,587]},{"teal":611,"source":"contracts/Mamm.algo.ts:171","pc":[588]},{"teal":614,"source":"contracts/Mamm.algo.ts:171","errorMessage":"transaction verification failed: {\"txn\":\"primaryAssetTransfer\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[589]},{"teal":617,"source":"contracts/Mamm.algo.ts:170","pc":[590,591]},{"teal":618,"source":"contracts/Mamm.algo.ts:172","pc":[592,593]},{"teal":619,"source":"contracts/Mamm.algo.ts:172","pc":[594,595]},{"teal":620,"source":"contracts/Mamm.algo.ts:172","pc":[596]},{"teal":623,"source":"contracts/Mamm.algo.ts:172","errorMessage":"transaction verification failed: {\"txn\":\"primaryAssetTransfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[597]},{"teal":626,"source":"contracts/Mamm.algo.ts:170","pc":[598,599]},{"teal":627,"source":"contracts/Mamm.algo.ts:173","pc":[600,601]},{"teal":628,"source":"contracts/Mamm.algo.ts:173","pc":[602]},{"teal":629,"source":"contracts/Mamm.algo.ts:173","pc":[603]},{"teal":630,"source":"contracts/Mamm.algo.ts:173","pc":[604]},{"teal":633,"source":"contracts/Mamm.algo.ts:173","errorMessage":"transaction verification failed: {\"txn\":\"primaryAssetTransfer\",\"field\":\"xferAsset\",\"expected\":\"AssetID.fromUint64(this.primary_token_id.value)\"}","pc":[605]},{"teal":636,"source":"contracts/Mamm.algo.ts:170","pc":[606,607]},{"teal":637,"source":"contracts/Mamm.algo.ts:174","pc":[608,609]},{"teal":638,"source":"contracts/Mamm.algo.ts:174","pc":[610,611]},{"teal":639,"source":"contracts/Mamm.algo.ts:174","pc":[612]},{"teal":642,"source":"contracts/Mamm.algo.ts:174","errorMessage":"transaction verification failed: {\"txn\":\"primaryAssetTransfer\",\"field\":\"assetAmount\",\"expected\":\"primaryAmount\"}","pc":[613]},{"teal":652,"source":"contracts/Mamm.algo.ts:176","pc":[614,615]},{"teal":653,"source":"contracts/Mamm.algo.ts:177","pc":[616,617]},{"teal":654,"source":"contracts/Mamm.algo.ts:177","pc":[618,619]},{"teal":655,"source":"contracts/Mamm.algo.ts:177","pc":[620]},{"teal":658,"source":"contracts/Mamm.algo.ts:177","errorMessage":"transaction verification failed: {\"txn\":\"secondaryAssetTransfer\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[621]},{"teal":661,"source":"contracts/Mamm.algo.ts:176","pc":[622,623]},{"teal":662,"source":"contracts/Mamm.algo.ts:178","pc":[624,625]},{"teal":663,"source":"contracts/Mamm.algo.ts:178","pc":[626,627]},{"teal":664,"source":"contracts/Mamm.algo.ts:178","pc":[628]},{"teal":667,"source":"contracts/Mamm.algo.ts:178","errorMessage":"transaction verification failed: {\"txn\":\"secondaryAssetTransfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[629]},{"teal":670,"source":"contracts/Mamm.algo.ts:176","pc":[630,631]},{"teal":671,"source":"contracts/Mamm.algo.ts:179","pc":[632,633]},{"teal":672,"source":"contracts/Mamm.algo.ts:179","pc":[634]},{"teal":673,"source":"contracts/Mamm.algo.ts:179","pc":[635]},{"teal":674,"source":"contracts/Mamm.algo.ts:179","pc":[636]},{"teal":677,"source":"contracts/Mamm.algo.ts:179","errorMessage":"transaction verification failed: {\"txn\":\"secondaryAssetTransfer\",\"field\":\"xferAsset\",\"expected\":\"AssetID.fromUint64(this.secondary_token_id.value)\"}","pc":[637]},{"teal":680,"source":"contracts/Mamm.algo.ts:176","pc":[638,639]},{"teal":681,"source":"contracts/Mamm.algo.ts:180","pc":[640,641]},{"teal":682,"source":"contracts/Mamm.algo.ts:180","pc":[642,643]},{"teal":683,"source":"contracts/Mamm.algo.ts:180","pc":[644]},{"teal":686,"source":"contracts/Mamm.algo.ts:180","errorMessage":"transaction verification failed: {\"txn\":\"secondaryAssetTransfer\",\"field\":\"assetAmount\",\"expected\":\"secondaryAmount\"}","pc":[645]},{"teal":691,"source":"contracts/Mamm.algo.ts:186","pc":[646,647]},{"teal":692,"source":"contracts/Mamm.algo.ts:186","pc":[648]},{"teal":693,"source":"contracts/Mamm.algo.ts:186","pc":[649]},{"teal":694,"source":"contracts/Mamm.algo.ts:186","pc":[650,651,652]},{"teal":699,"source":"contracts/Mamm.algo.ts:187","pc":[653,654]},{"teal":700,"source":"contracts/Mamm.algo.ts:187","pc":[655,656]},{"teal":701,"source":"contracts/Mamm.algo.ts:187","pc":[657]},{"teal":702,"source":"contracts/Mamm.algo.ts:187","pc":[658]},{"teal":703,"source":"contracts/Mamm.algo.ts:187","pc":[659,660]},{"teal":704,"source":"contracts/Mamm.algo.ts:186","pc":[661,662,663]},{"teal":709,"source":"contracts/Mamm.algo.ts:191","pc":[664,665]},{"teal":710,"source":"contracts/Mamm.algo.ts:191","pc":[666,667]},{"teal":711,"source":"contracts/Mamm.algo.ts:191","pc":[668]},{"teal":712,"source":"contracts/Mamm.algo.ts:191","pc":[669]},{"teal":713,"source":"contracts/Mamm.algo.ts:191","pc":[670,671]},{"teal":714,"source":"contracts/Mamm.algo.ts:191","pc":[672]},{"teal":715,"source":"contracts/Mamm.algo.ts:191","pc":[673]},{"teal":716,"source":"contracts/Mamm.algo.ts:191","pc":[674]},{"teal":717,"source":"contracts/Mamm.algo.ts:191","pc":[675]},{"teal":718,"source":"contracts/Mamm.algo.ts:191","pc":[676]},{"teal":721,"source":"contracts/Mamm.algo.ts:191","errorMessage":"wideRatio failed","pc":[677]},{"teal":722,"source":"contracts/Mamm.algo.ts:191","pc":[678,679]},{"teal":726,"source":"contracts/Mamm.algo.ts:192","pc":[680]},{"teal":727,"source":"contracts/Mamm.algo.ts:192","pc":[681,682]},{"teal":728,"source":"contracts/Mamm.algo.ts:192","pc":[683,684]},{"teal":729,"source":"contracts/Mamm.algo.ts:192","pc":[685]},{"teal":730,"source":"contracts/Mamm.algo.ts:192","pc":[686]},{"teal":731,"source":"contracts/Mamm.algo.ts:192","pc":[687,688]},{"teal":732,"source":"contracts/Mamm.algo.ts:192","pc":[689]},{"teal":733,"source":"contracts/Mamm.algo.ts:192","pc":[690]},{"teal":734,"source":"contracts/Mamm.algo.ts:192","pc":[691]},{"teal":735,"source":"contracts/Mamm.algo.ts:192","pc":[692]},{"teal":736,"source":"contracts/Mamm.algo.ts:192","pc":[693]},{"teal":739,"source":"contracts/Mamm.algo.ts:192","errorMessage":"wideRatio failed","pc":[694]},{"teal":740,"source":"contracts/Mamm.algo.ts:192","pc":[695,696]},{"teal":744,"source":"contracts/Mamm.algo.ts:193","pc":[697,698]},{"teal":745,"source":"contracts/Mamm.algo.ts:193","pc":[699,700]},{"teal":746,"source":"contracts/Mamm.algo.ts:193","pc":[701,702,703]},{"teal":747,"source":"contracts/Mamm.algo.ts:193","pc":[704,705]},{"teal":752,"source":"contracts/Mamm.algo.ts:197","pc":[706,707]},{"teal":753,"source":"contracts/Mamm.algo.ts:197","pc":[708,709]},{"teal":754,"source":"contracts/Mamm.algo.ts:197","pc":[710,711]},{"teal":755,"source":"contracts/Mamm.algo.ts:197","pc":[712]},{"teal":756,"source":"contracts/Mamm.algo.ts:197","pc":[713]},{"teal":760,"source":"contracts/Mamm.algo.ts:198","pc":[714,715]},{"teal":761,"source":"contracts/Mamm.algo.ts:198","pc":[716,717]},{"teal":762,"source":"contracts/Mamm.algo.ts:198","pc":[718,719]},{"teal":763,"source":"contracts/Mamm.algo.ts:198","pc":[720]},{"teal":764,"source":"contracts/Mamm.algo.ts:198","pc":[721]},{"teal":768,"source":"contracts/Mamm.algo.ts:199","pc":[722,723]},{"teal":769,"source":"contracts/Mamm.algo.ts:199","pc":[724,725]},{"teal":770,"source":"contracts/Mamm.algo.ts:199","pc":[726,727]},{"teal":771,"source":"contracts/Mamm.algo.ts:199","pc":[728]},{"teal":772,"source":"contracts/Mamm.algo.ts:199","pc":[729]},{"teal":776,"source":"contracts/Mamm.algo.ts:200","pc":[730,731]},{"teal":777,"source":"contracts/Mamm.algo.ts:200","pc":[732,733]},{"teal":778,"source":"contracts/Mamm.algo.ts:200","pc":[734,735]},{"teal":779,"source":"contracts/Mamm.algo.ts:200","pc":[736]},{"teal":780,"source":"contracts/Mamm.algo.ts:200","pc":[737,738]},{"teal":781,"source":"contracts/Mamm.algo.ts:200","pc":[739,740]},{"teal":782,"source":"contracts/Mamm.algo.ts:200","pc":[741]},{"teal":783,"source":"contracts/Mamm.algo.ts:200","pc":[742]},{"teal":784,"source":"contracts/Mamm.algo.ts:200","pc":[743]},{"teal":788,"source":"contracts/Mamm.algo.ts:201","pc":[744,745]},{"teal":789,"source":"contracts/Mamm.algo.ts:201","pc":[746,747]},{"teal":790,"source":"contracts/Mamm.algo.ts:201","pc":[748,749]},{"teal":791,"source":"contracts/Mamm.algo.ts:201","pc":[750]},{"teal":792,"source":"contracts/Mamm.algo.ts:201","pc":[751]},{"teal":800,"source":"contracts/Mamm.algo.ts:204","pc":[752]},{"teal":801,"source":"contracts/Mamm.algo.ts:204","pc":[753]},{"teal":802,"source":"contracts/Mamm.algo.ts:204","pc":[754,755]},{"teal":806,"source":"contracts/Mamm.algo.ts:205","pc":[756,757]},{"teal":807,"source":"contracts/Mamm.algo.ts:205","pc":[758]},{"teal":808,"source":"contracts/Mamm.algo.ts:205","pc":[759,760]},{"teal":812,"source":"contracts/Mamm.algo.ts:206","pc":[761,762]},{"teal":813,"source":"contracts/Mamm.algo.ts:206","pc":[763,764]},{"teal":817,"source":"contracts/Mamm.algo.ts:207","pc":[765,766]},{"teal":818,"source":"contracts/Mamm.algo.ts:207","pc":[767,768]},{"teal":821,"source":"contracts/Mamm.algo.ts:204","pc":[769]},{"teal":822,"source":"contracts/Mamm.algo.ts:204","pc":[770,771]},{"teal":825,"source":"contracts/Mamm.algo.ts:204","pc":[772]},{"teal":826,"source":"contracts/Mamm.algo.ts:158","pc":[773]},{"teal":831,"source":"contracts/Mamm.algo.ts:211","pc":[774,775,776]},{"teal":832,"source":"contracts/Mamm.algo.ts:211","pc":[777]},{"teal":835,"source":"contracts/Mamm.algo.ts:211","pc":[778,779]},{"teal":836,"source":"contracts/Mamm.algo.ts:211","pc":[780]},{"teal":837,"source":"contracts/Mamm.algo.ts:211","pc":[781]},{"teal":838,"source":"contracts/Mamm.algo.ts:211","pc":[782]},{"teal":839,"source":"contracts/Mamm.algo.ts:211","pc":[783,784]},{"teal":840,"source":"contracts/Mamm.algo.ts:211","pc":[785]},{"teal":841,"source":"contracts/Mamm.algo.ts:211","pc":[786]},{"teal":844,"source":"contracts/Mamm.algo.ts:211","errorMessage":"argument 1 (burnTxn) for removeLiquidity must be a axfer transaction","pc":[787]},{"teal":847,"source":"contracts/Mamm.algo.ts:211","pc":[788,789,790]},{"teal":848,"source":"contracts/Mamm.algo.ts:211","pc":[791]},{"teal":849,"source":"contracts/Mamm.algo.ts:211","pc":[792]},{"teal":853,"source":"contracts/Mamm.algo.ts:211","pc":[793,794,795]},{"teal":856,"source":"contracts/Mamm.algo.ts:211","pc":[796]},{"teal":857,"source":"contracts/Mamm.algo.ts:211","pc":[797,798]},{"teal":861,"source":"contracts/Mamm.algo.ts:212","pc":[799,800]},{"teal":862,"source":"contracts/Mamm.algo.ts:212","pc":[801]},{"teal":863,"source":"contracts/Mamm.algo.ts:212","pc":[802,803]},{"teal":867,"source":"contracts/Mamm.algo.ts:213","pc":[804,805]},{"teal":868,"source":"contracts/Mamm.algo.ts:213","pc":[806]},{"teal":869,"source":"contracts/Mamm.algo.ts:213","pc":[807,808]},{"teal":873,"source":"contracts/Mamm.algo.ts:214","pc":[809,810]},{"teal":874,"source":"contracts/Mamm.algo.ts:214","pc":[811]},{"teal":875,"source":"contracts/Mamm.algo.ts:214","pc":[812,813]},{"teal":879,"source":"contracts/Mamm.algo.ts:217","pc":[814,815]},{"teal":880,"source":"contracts/Mamm.algo.ts:217","pc":[816]},{"teal":881,"source":"contracts/Mamm.algo.ts:217","pc":[817]},{"teal":884,"source":"contracts/Mamm.algo.ts:217","errorMessage":"Invalid LP amount","pc":[818]},{"teal":888,"source":"contracts/Mamm.algo.ts:218","pc":[819,820]},{"teal":889,"source":"contracts/Mamm.algo.ts:218","pc":[821,822]},{"teal":890,"source":"contracts/Mamm.algo.ts:218","pc":[823]},{"teal":893,"source":"contracts/Mamm.algo.ts:218","errorMessage":"Not enough LP supply","pc":[824]},{"teal":903,"source":"contracts/Mamm.algo.ts:220","pc":[825,826]},{"teal":904,"source":"contracts/Mamm.algo.ts:221","pc":[827,828]},{"teal":905,"source":"contracts/Mamm.algo.ts:221","pc":[829,830]},{"teal":906,"source":"contracts/Mamm.algo.ts:221","pc":[831]},{"teal":909,"source":"contracts/Mamm.algo.ts:221","errorMessage":"transaction verification failed: {\"txn\":\"burnTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[832]},{"teal":912,"source":"contracts/Mamm.algo.ts:220","pc":[833,834]},{"teal":913,"source":"contracts/Mamm.algo.ts:222","pc":[835,836]},{"teal":914,"source":"contracts/Mamm.algo.ts:222","pc":[837,838]},{"teal":915,"source":"contracts/Mamm.algo.ts:222","pc":[839]},{"teal":918,"source":"contracts/Mamm.algo.ts:222","errorMessage":"transaction verification failed: {\"txn\":\"burnTxn\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[840]},{"teal":921,"source":"contracts/Mamm.algo.ts:220","pc":[841,842]},{"teal":922,"source":"contracts/Mamm.algo.ts:223","pc":[843,844]},{"teal":923,"source":"contracts/Mamm.algo.ts:223","pc":[845,846]},{"teal":924,"source":"contracts/Mamm.algo.ts:223","pc":[847]},{"teal":925,"source":"contracts/Mamm.algo.ts:223","pc":[848]},{"teal":928,"source":"contracts/Mamm.algo.ts:223","errorMessage":"transaction verification failed: {\"txn\":\"burnTxn\",\"field\":\"xferAsset\",\"expected\":\"AssetID.fromUint64(this.lp_token_id.value)\"}","pc":[849]},{"teal":931,"source":"contracts/Mamm.algo.ts:220","pc":[850,851]},{"teal":932,"source":"contracts/Mamm.algo.ts:224","pc":[852,853]},{"teal":933,"source":"contracts/Mamm.algo.ts:224","pc":[854,855]},{"teal":934,"source":"contracts/Mamm.algo.ts:224","pc":[856]},{"teal":937,"source":"contracts/Mamm.algo.ts:224","errorMessage":"transaction verification failed: {\"txn\":\"burnTxn\",\"field\":\"assetAmount\",\"expected\":\"lpTokensBurned\"}","pc":[857]},{"teal":941,"source":"contracts/Mamm.algo.ts:228","pc":[858,859]},{"teal":942,"source":"contracts/Mamm.algo.ts:228","pc":[860,861]},{"teal":943,"source":"contracts/Mamm.algo.ts:228","pc":[862]},{"teal":944,"source":"contracts/Mamm.algo.ts:228","pc":[863]},{"teal":945,"source":"contracts/Mamm.algo.ts:228","pc":[864,865]},{"teal":946,"source":"contracts/Mamm.algo.ts:228","pc":[866]},{"teal":947,"source":"contracts/Mamm.algo.ts:228","pc":[867]},{"teal":948,"source":"contracts/Mamm.algo.ts:228","pc":[868]},{"teal":949,"source":"contracts/Mamm.algo.ts:228","pc":[869]},{"teal":950,"source":"contracts/Mamm.algo.ts:228","pc":[870]},{"teal":953,"source":"contracts/Mamm.algo.ts:228","errorMessage":"wideRatio failed","pc":[871]},{"teal":954,"source":"contracts/Mamm.algo.ts:228","pc":[872,873]},{"teal":958,"source":"contracts/Mamm.algo.ts:229","pc":[874,875]},{"teal":959,"source":"contracts/Mamm.algo.ts:229","pc":[876,877]},{"teal":960,"source":"contracts/Mamm.algo.ts:229","pc":[878]},{"teal":961,"source":"contracts/Mamm.algo.ts:229","pc":[879]},{"teal":962,"source":"contracts/Mamm.algo.ts:229","pc":[880,881]},{"teal":963,"source":"contracts/Mamm.algo.ts:229","pc":[882]},{"teal":964,"source":"contracts/Mamm.algo.ts:229","pc":[883]},{"teal":965,"source":"contracts/Mamm.algo.ts:229","pc":[884]},{"teal":966,"source":"contracts/Mamm.algo.ts:229","pc":[885]},{"teal":967,"source":"contracts/Mamm.algo.ts:229","pc":[886]},{"teal":970,"source":"contracts/Mamm.algo.ts:229","errorMessage":"wideRatio failed","pc":[887]},{"teal":971,"source":"contracts/Mamm.algo.ts:229","pc":[888,889]},{"teal":975,"source":"contracts/Mamm.algo.ts:232","pc":[890,891]},{"teal":976,"source":"contracts/Mamm.algo.ts:232","pc":[892,893]},{"teal":977,"source":"contracts/Mamm.algo.ts:232","pc":[894,895]},{"teal":978,"source":"contracts/Mamm.algo.ts:232","pc":[896]},{"teal":979,"source":"contracts/Mamm.algo.ts:232","pc":[897]},{"teal":983,"source":"contracts/Mamm.algo.ts:233","pc":[898,899]},{"teal":984,"source":"contracts/Mamm.algo.ts:233","pc":[900,901]},{"teal":985,"source":"contracts/Mamm.algo.ts:233","pc":[902,903]},{"teal":986,"source":"contracts/Mamm.algo.ts:233","pc":[904]},{"teal":987,"source":"contracts/Mamm.algo.ts:233","pc":[905]},{"teal":991,"source":"contracts/Mamm.algo.ts:234","pc":[906,907]},{"teal":992,"source":"contracts/Mamm.algo.ts:234","pc":[908,909]},{"teal":993,"source":"contracts/Mamm.algo.ts:234","pc":[910,911]},{"teal":994,"source":"contracts/Mamm.algo.ts:234","pc":[912]},{"teal":995,"source":"contracts/Mamm.algo.ts:234","pc":[913]},{"teal":999,"source":"contracts/Mamm.algo.ts:235","pc":[914,915]},{"teal":1000,"source":"contracts/Mamm.algo.ts:235","pc":[916,917]},{"teal":1001,"source":"contracts/Mamm.algo.ts:235","pc":[918,919]},{"teal":1002,"source":"contracts/Mamm.algo.ts:235","pc":[920]},{"teal":1003,"source":"contracts/Mamm.algo.ts:235","pc":[921,922]},{"teal":1004,"source":"contracts/Mamm.algo.ts:235","pc":[923,924]},{"teal":1005,"source":"contracts/Mamm.algo.ts:235","pc":[925]},{"teal":1006,"source":"contracts/Mamm.algo.ts:235","pc":[926]},{"teal":1007,"source":"contracts/Mamm.algo.ts:235","pc":[927]},{"teal":1011,"source":"contracts/Mamm.algo.ts:238","pc":[928,929]},{"teal":1012,"source":"contracts/Mamm.algo.ts:238","pc":[930]},{"teal":1013,"source":"contracts/Mamm.algo.ts:238","pc":[931]},{"teal":1014,"source":"contracts/Mamm.algo.ts:238","pc":[932,933]},{"teal":1015,"source":"contracts/Mamm.algo.ts:238","pc":[934]},{"teal":1016,"source":"contracts/Mamm.algo.ts:238","pc":[935]},{"teal":1020,"source":"contracts/Mamm.algo.ts:239","pc":[936,937]},{"teal":1021,"source":"contracts/Mamm.algo.ts:239","pc":[938]},{"teal":1022,"source":"contracts/Mamm.algo.ts:239","pc":[939]},{"teal":1023,"source":"contracts/Mamm.algo.ts:239","pc":[940,941]},{"teal":1024,"source":"contracts/Mamm.algo.ts:239","pc":[942]},{"teal":1025,"source":"contracts/Mamm.algo.ts:239","pc":[943]},{"teal":1030,"source":"contracts/Mamm.algo.ts:242","pc":[944]},{"teal":1031,"source":"contracts/Mamm.algo.ts:242","pc":[945]},{"teal":1032,"source":"contracts/Mamm.algo.ts:242","pc":[946]},{"teal":1033,"source":"contracts/Mamm.algo.ts:242","pc":[947]},{"teal":1034,"source":"contracts/Mamm.algo.ts:242","pc":[948,949,950]},{"teal":1043,"source":"contracts/Mamm.algo.ts:243","pc":[951]},{"teal":1044,"source":"contracts/Mamm.algo.ts:243","pc":[952]},{"teal":1045,"source":"contracts/Mamm.algo.ts:243","pc":[953,954]},{"teal":1049,"source":"contracts/Mamm.algo.ts:244","pc":[955]},{"teal":1050,"source":"contracts/Mamm.algo.ts:244","pc":[956]},{"teal":1051,"source":"contracts/Mamm.algo.ts:244","pc":[957,958]},{"teal":1055,"source":"contracts/Mamm.algo.ts:245","pc":[959,960]},{"teal":1056,"source":"contracts/Mamm.algo.ts:245","pc":[961,962]},{"teal":1060,"source":"contracts/Mamm.algo.ts:246","pc":[963,964]},{"teal":1061,"source":"contracts/Mamm.algo.ts:246","pc":[965,966]},{"teal":1064,"source":"contracts/Mamm.algo.ts:243","pc":[967]},{"teal":1065,"source":"contracts/Mamm.algo.ts:243","pc":[968,969]},{"teal":1068,"source":"contracts/Mamm.algo.ts:243","pc":[970]},{"teal":1069,"source":"contracts/Mamm.algo.ts:242","pc":[971,972,973]},{"teal":1077,"source":"contracts/Mamm.algo.ts:249","pc":[974]},{"teal":1078,"source":"contracts/Mamm.algo.ts:249","pc":[975]},{"teal":1079,"source":"contracts/Mamm.algo.ts:249","pc":[976,977]},{"teal":1083,"source":"contracts/Mamm.algo.ts:250","pc":[978,979]},{"teal":1084,"source":"contracts/Mamm.algo.ts:250","pc":[980,981]},{"teal":1088,"source":"contracts/Mamm.algo.ts:251","pc":[982,983]},{"teal":1089,"source":"contracts/Mamm.algo.ts:251","pc":[984,985]},{"teal":1092,"source":"contracts/Mamm.algo.ts:249","pc":[986]},{"teal":1093,"source":"contracts/Mamm.algo.ts:249","pc":[987,988]},{"teal":1096,"source":"contracts/Mamm.algo.ts:249","pc":[989]},{"teal":1102,"source":"contracts/Mamm.algo.ts:254","pc":[990]},{"teal":1103,"source":"contracts/Mamm.algo.ts:254","pc":[991]},{"teal":1104,"source":"contracts/Mamm.algo.ts:254","pc":[992]},{"teal":1105,"source":"contracts/Mamm.algo.ts:254","pc":[993]},{"teal":1106,"source":"contracts/Mamm.algo.ts:254","pc":[994,995,996]},{"teal":1115,"source":"contracts/Mamm.algo.ts:255","pc":[997]},{"teal":1116,"source":"contracts/Mamm.algo.ts:255","pc":[998]},{"teal":1117,"source":"contracts/Mamm.algo.ts:255","pc":[999,1000]},{"teal":1121,"source":"contracts/Mamm.algo.ts:256","pc":[1001]},{"teal":1122,"source":"contracts/Mamm.algo.ts:256","pc":[1002]},{"teal":1123,"source":"contracts/Mamm.algo.ts:256","pc":[1003,1004]},{"teal":1127,"source":"contracts/Mamm.algo.ts:257","pc":[1005,1006]},{"teal":1128,"source":"contracts/Mamm.algo.ts:257","pc":[1007,1008]},{"teal":1132,"source":"contracts/Mamm.algo.ts:258","pc":[1009,1010]},{"teal":1133,"source":"contracts/Mamm.algo.ts:258","pc":[1011,1012]},{"teal":1136,"source":"contracts/Mamm.algo.ts:255","pc":[1013]},{"teal":1137,"source":"contracts/Mamm.algo.ts:255","pc":[1014,1015]},{"teal":1140,"source":"contracts/Mamm.algo.ts:255","pc":[1016]},{"teal":1141,"source":"contracts/Mamm.algo.ts:254","pc":[1017,1018,1019]},{"teal":1149,"source":"contracts/Mamm.algo.ts:261","pc":[1020]},{"teal":1150,"source":"contracts/Mamm.algo.ts:261","pc":[1021]},{"teal":1151,"source":"contracts/Mamm.algo.ts:261","pc":[1022,1023]},{"teal":1155,"source":"contracts/Mamm.algo.ts:262","pc":[1024,1025]},{"teal":1156,"source":"contracts/Mamm.algo.ts:262","pc":[1026,1027]},{"teal":1160,"source":"contracts/Mamm.algo.ts:263","pc":[1028,1029]},{"teal":1161,"source":"contracts/Mamm.algo.ts:263","pc":[1030,1031]},{"teal":1164,"source":"contracts/Mamm.algo.ts:261","pc":[1032]},{"teal":1165,"source":"contracts/Mamm.algo.ts:261","pc":[1033,1034]},{"teal":1168,"source":"contracts/Mamm.algo.ts:261","pc":[1035]},{"teal":1171,"source":"contracts/Mamm.algo.ts:211","pc":[1036]},{"teal":1176,"source":"contracts/Mamm.algo.ts:270","pc":[1037,1038,1039]},{"teal":1177,"source":"contracts/Mamm.algo.ts:270","pc":[1040]},{"teal":1180,"source":"contracts/Mamm.algo.ts:270","pc":[1041,1042,1043]},{"teal":1181,"source":"contracts/Mamm.algo.ts:270","pc":[1044]},{"teal":1184,"source":"contracts/Mamm.algo.ts:270","pc":[1045,1046,1047]},{"teal":1185,"source":"contracts/Mamm.algo.ts:270","pc":[1048]},{"teal":1186,"source":"contracts/Mamm.algo.ts:270","pc":[1049]},{"teal":1190,"source":"contracts/Mamm.algo.ts:270","pc":[1050,1051,1052]},{"teal":1193,"source":"contracts/Mamm.algo.ts:270","pc":[1053]},{"teal":1194,"source":"contracts/Mamm.algo.ts:270","pc":[1054,1055]},{"teal":1198,"source":"contracts/Mamm.algo.ts:271","pc":[1056,1057]},{"teal":1199,"source":"contracts/Mamm.algo.ts:271","pc":[1058]},{"teal":1200,"source":"contracts/Mamm.algo.ts:271","pc":[1059,1060]},{"teal":1204,"source":"contracts/Mamm.algo.ts:272","pc":[1061,1062]},{"teal":1205,"source":"contracts/Mamm.algo.ts:272","pc":[1063]},{"teal":1206,"source":"contracts/Mamm.algo.ts:272","pc":[1064,1065]},{"teal":1210,"source":"contracts/Mamm.algo.ts:273","pc":[1066,1067]},{"teal":1211,"source":"contracts/Mamm.algo.ts:273","pc":[1068]},{"teal":1212,"source":"contracts/Mamm.algo.ts:273","pc":[1069,1070]},{"teal":1216,"source":"contracts/Mamm.algo.ts:274","pc":[1071,1072]},{"teal":1217,"source":"contracts/Mamm.algo.ts:274","pc":[1073]},{"teal":1218,"source":"contracts/Mamm.algo.ts:274","pc":[1074,1075]},{"teal":1222,"source":"contracts/Mamm.algo.ts:275","pc":[1076,1077]},{"teal":1223,"source":"contracts/Mamm.algo.ts:275","pc":[1078]},{"teal":1224,"source":"contracts/Mamm.algo.ts:275","pc":[1079,1080]},{"teal":1228,"source":"contracts/Mamm.algo.ts:277","pc":[1081]},{"teal":1229,"source":"contracts/Mamm.algo.ts:277","pc":[1082,1083]},{"teal":1233,"source":"contracts/Mamm.algo.ts:278","pc":[1084]},{"teal":1234,"source":"contracts/Mamm.algo.ts:278","pc":[1085,1086]},{"teal":1239,"source":"contracts/Mamm.algo.ts:281","pc":[1087,1088]},{"teal":1240,"source":"contracts/Mamm.algo.ts:281","pc":[1089]},{"teal":1241,"source":"contracts/Mamm.algo.ts:281","pc":[1090]},{"teal":1242,"source":"contracts/Mamm.algo.ts:281","pc":[1091,1092,1093]},{"teal":1247,"source":"contracts/Mamm.algo.ts:282","pc":[1094,1095]},{"teal":1248,"source":"contracts/Mamm.algo.ts:282","pc":[1096,1097]},{"teal":1252,"source":"contracts/Mamm.algo.ts:283","pc":[1098,1099]},{"teal":1253,"source":"contracts/Mamm.algo.ts:283","pc":[1100,1101]},{"teal":1254,"source":"contracts/Mamm.algo.ts:281","pc":[1102,1103,1104]},{"teal":1259,"source":"contracts/Mamm.algo.ts:284","pc":[1105,1106]},{"teal":1260,"source":"contracts/Mamm.algo.ts:284","pc":[1107]},{"teal":1261,"source":"contracts/Mamm.algo.ts:284","pc":[1108]},{"teal":1262,"source":"contracts/Mamm.algo.ts:284","pc":[1109,1110,1111]},{"teal":1267,"source":"contracts/Mamm.algo.ts:285","pc":[1112,1113]},{"teal":1268,"source":"contracts/Mamm.algo.ts:285","pc":[1114,1115]},{"teal":1272,"source":"contracts/Mamm.algo.ts:286","pc":[1116,1117]},{"teal":1273,"source":"contracts/Mamm.algo.ts:286","pc":[1118,1119]},{"teal":1274,"source":"contracts/Mamm.algo.ts:284","pc":[1120,1121,1122]},{"teal":1279,"source":"contracts/Mamm.algo.ts:288","pc":[1123]},{"teal":1282,"source":"contracts/Mamm.algo.ts:288","errorMessage":"Invalid swap type","pc":[1124]},{"teal":1287,"source":"contracts/Mamm.algo.ts:292","pc":[1125,1126]},{"teal":1288,"source":"contracts/Mamm.algo.ts:292","pc":[1127]},{"teal":1289,"source":"contracts/Mamm.algo.ts:292","pc":[1128]},{"teal":1292,"source":"contracts/Mamm.algo.ts:292","errorMessage":"Invalid input amount","pc":[1129]},{"teal":1296,"source":"contracts/Mamm.algo.ts:296","pc":[1130,1131]},{"teal":1297,"source":"contracts/Mamm.algo.ts:296","pc":[1132,1133]},{"teal":1298,"source":"contracts/Mamm.algo.ts:296","pc":[1134]},{"teal":1299,"source":"contracts/Mamm.algo.ts:296","pc":[1135]},{"teal":1300,"source":"contracts/Mamm.algo.ts:296","pc":[1136,1137,1138]},{"teal":1301,"source":"contracts/Mamm.algo.ts:296","pc":[1139]},{"teal":1302,"source":"contracts/Mamm.algo.ts:296","pc":[1140]},{"teal":1303,"source":"contracts/Mamm.algo.ts:296","pc":[1141]},{"teal":1304,"source":"contracts/Mamm.algo.ts:296","pc":[1142]},{"teal":1305,"source":"contracts/Mamm.algo.ts:296","pc":[1143]},{"teal":1308,"source":"contracts/Mamm.algo.ts:296","errorMessage":"wideRatio failed","pc":[1144]},{"teal":1309,"source":"contracts/Mamm.algo.ts:296","pc":[1145,1146]},{"teal":1313,"source":"contracts/Mamm.algo.ts:297","pc":[1147,1148]},{"teal":1314,"source":"contracts/Mamm.algo.ts:297","pc":[1149,1150]},{"teal":1315,"source":"contracts/Mamm.algo.ts:297","pc":[1151]},{"teal":1316,"source":"contracts/Mamm.algo.ts:297","pc":[1152]},{"teal":1317,"source":"contracts/Mamm.algo.ts:297","pc":[1153,1154]},{"teal":1318,"source":"contracts/Mamm.algo.ts:297","pc":[1155]},{"teal":1319,"source":"contracts/Mamm.algo.ts:297","pc":[1156]},{"teal":1320,"source":"contracts/Mamm.algo.ts:297","pc":[1157]},{"teal":1321,"source":"contracts/Mamm.algo.ts:297","pc":[1158]},{"teal":1322,"source":"contracts/Mamm.algo.ts:297","pc":[1159]},{"teal":1325,"source":"contracts/Mamm.algo.ts:297","errorMessage":"wideRatio failed","pc":[1160]},{"teal":1326,"source":"contracts/Mamm.algo.ts:297","pc":[1161,1162]},{"teal":1330,"source":"contracts/Mamm.algo.ts:298","pc":[1163,1164]},{"teal":1331,"source":"contracts/Mamm.algo.ts:298","pc":[1165,1166]},{"teal":1332,"source":"contracts/Mamm.algo.ts:298","pc":[1167]},{"teal":1333,"source":"contracts/Mamm.algo.ts:298","pc":[1168,1169]},{"teal":1337,"source":"contracts/Mamm.algo.ts:301","pc":[1170,1171]},{"teal":1338,"source":"contracts/Mamm.algo.ts:301","pc":[1172,1173]},{"teal":1339,"source":"contracts/Mamm.algo.ts:301","pc":[1174]},{"teal":1340,"source":"contracts/Mamm.algo.ts:301","pc":[1175,1176]},{"teal":1344,"source":"contracts/Mamm.algo.ts:304","pc":[1177,1178]},{"teal":1345,"source":"contracts/Mamm.algo.ts:304","pc":[1179,1180]},{"teal":1346,"source":"contracts/Mamm.algo.ts:304","pc":[1181]},{"teal":1347,"source":"contracts/Mamm.algo.ts:304","pc":[1182,1183]},{"teal":1351,"source":"contracts/Mamm.algo.ts:305","pc":[1184,1185]},{"teal":1352,"source":"contracts/Mamm.algo.ts:305","pc":[1186,1187]},{"teal":1353,"source":"contracts/Mamm.algo.ts:305","pc":[1188]},{"teal":1354,"source":"contracts/Mamm.algo.ts:305","pc":[1189,1190]},{"teal":1358,"source":"contracts/Mamm.algo.ts:306","pc":[1191,1192]},{"teal":1359,"source":"contracts/Mamm.algo.ts:306","pc":[1193,1194]},{"teal":1360,"source":"contracts/Mamm.algo.ts:306","pc":[1195]},{"teal":1361,"source":"contracts/Mamm.algo.ts:306","pc":[1196,1197]},{"teal":1365,"source":"contracts/Mamm.algo.ts:309","pc":[1198,1199]},{"teal":1366,"source":"contracts/Mamm.algo.ts:309","pc":[1200]},{"teal":1367,"source":"contracts/Mamm.algo.ts:309","pc":[1201]},{"teal":1370,"source":"contracts/Mamm.algo.ts:309","errorMessage":"Swap too small","pc":[1202]},{"teal":1374,"source":"contracts/Mamm.algo.ts:312","pc":[1203,1204]},{"teal":1375,"source":"contracts/Mamm.algo.ts:312","pc":[1205,1206]},{"teal":1376,"source":"contracts/Mamm.algo.ts:312","pc":[1207]},{"teal":1377,"source":"contracts/Mamm.algo.ts:312","pc":[1208,1209]},{"teal":1378,"source":"contracts/Mamm.algo.ts:312","pc":[1210]},{"teal":1379,"source":"contracts/Mamm.algo.ts:312","pc":[1211,1212]},{"teal":1383,"source":"contracts/Mamm.algo.ts:313","pc":[1213,1214]},{"teal":1384,"source":"contracts/Mamm.algo.ts:313","pc":[1215,1216]},{"teal":1385,"source":"contracts/Mamm.algo.ts:313","pc":[1217]},{"teal":1386,"source":"contracts/Mamm.algo.ts:313","pc":[1218,1219]},{"teal":1391,"source":"contracts/Mamm.algo.ts:315","pc":[1220,1221]},{"teal":1392,"source":"contracts/Mamm.algo.ts:315","pc":[1222]},{"teal":1393,"source":"contracts/Mamm.algo.ts:315","pc":[1223]},{"teal":1394,"source":"contracts/Mamm.algo.ts:315","pc":[1224,1225,1226]},{"teal":1399,"source":"contracts/Mamm.algo.ts:316","pc":[1227,1228]},{"teal":1400,"source":"contracts/Mamm.algo.ts:316","pc":[1229,1230]},{"teal":1401,"source":"contracts/Mamm.algo.ts:316","pc":[1231]},{"teal":1405,"source":"contracts/Mamm.algo.ts:317","pc":[1232,1233]},{"teal":1406,"source":"contracts/Mamm.algo.ts:317","pc":[1234,1235]},{"teal":1407,"source":"contracts/Mamm.algo.ts:317","pc":[1236]},{"teal":1408,"source":"contracts/Mamm.algo.ts:315","pc":[1237,1238,1239]},{"teal":1413,"source":"contracts/Mamm.algo.ts:319","pc":[1240,1241]},{"teal":1414,"source":"contracts/Mamm.algo.ts:319","pc":[1242,1243]},{"teal":1415,"source":"contracts/Mamm.algo.ts:319","pc":[1244]},{"teal":1419,"source":"contracts/Mamm.algo.ts:320","pc":[1245,1246]},{"teal":1420,"source":"contracts/Mamm.algo.ts:320","pc":[1247,1248]},{"teal":1421,"source":"contracts/Mamm.algo.ts:320","pc":[1249]},{"teal":1426,"source":"contracts/Mamm.algo.ts:324","pc":[1250,1251]},{"teal":1427,"source":"contracts/Mamm.algo.ts:324","pc":[1252,1253]},{"teal":1428,"source":"contracts/Mamm.algo.ts:324","pc":[1254,1255]},{"teal":1429,"source":"contracts/Mamm.algo.ts:324","pc":[1256]},{"teal":1430,"source":"contracts/Mamm.algo.ts:324","pc":[1257]},{"teal":1435,"source":"contracts/Mamm.algo.ts:327","pc":[1258,1259]},{"teal":1436,"source":"contracts/Mamm.algo.ts:327","pc":[1260]},{"teal":1437,"source":"contracts/Mamm.algo.ts:327","pc":[1261]},{"teal":1438,"source":"contracts/Mamm.algo.ts:327","pc":[1262,1263,1264]},{"teal":1444,"source":"contracts/Mamm.algo.ts:328","pc":[1265,1266]},{"teal":1445,"source":"contracts/Mamm.algo.ts:328","pc":[1267]},{"teal":1446,"source":"contracts/Mamm.algo.ts:328","pc":[1268]},{"teal":1447,"source":"contracts/Mamm.algo.ts:328","pc":[1269,1270,1271]},{"teal":1453,"source":"contracts/Mamm.algo.ts:329","pc":[1272]},{"teal":1454,"source":"contracts/Mamm.algo.ts:329","pc":[1273]},{"teal":1455,"source":"contracts/Mamm.algo.ts:329","pc":[1274]},{"teal":1456,"source":"contracts/Mamm.algo.ts:329","pc":[1275]},{"teal":1457,"source":"contracts/Mamm.algo.ts:329","pc":[1276,1277,1278]},{"teal":1466,"source":"contracts/Mamm.algo.ts:330","pc":[1279]},{"teal":1467,"source":"contracts/Mamm.algo.ts:330","pc":[1280]},{"teal":1468,"source":"contracts/Mamm.algo.ts:330","pc":[1281,1282]},{"teal":1472,"source":"contracts/Mamm.algo.ts:331","pc":[1283]},{"teal":1473,"source":"contracts/Mamm.algo.ts:331","pc":[1284]},{"teal":1474,"source":"contracts/Mamm.algo.ts:331","pc":[1285,1286]},{"teal":1478,"source":"contracts/Mamm.algo.ts:332","pc":[1287,1288]},{"teal":1479,"source":"contracts/Mamm.algo.ts:332","pc":[1289,1290]},{"teal":1483,"source":"contracts/Mamm.algo.ts:333","pc":[1291,1292]},{"teal":1484,"source":"contracts/Mamm.algo.ts:333","pc":[1293,1294]},{"teal":1487,"source":"contracts/Mamm.algo.ts:330","pc":[1295]},{"teal":1488,"source":"contracts/Mamm.algo.ts:330","pc":[1296,1297]},{"teal":1491,"source":"contracts/Mamm.algo.ts:330","pc":[1298]},{"teal":1492,"source":"contracts/Mamm.algo.ts:329","pc":[1299,1300,1301]},{"teal":1500,"source":"contracts/Mamm.algo.ts:336","pc":[1302]},{"teal":1501,"source":"contracts/Mamm.algo.ts:336","pc":[1303]},{"teal":1502,"source":"contracts/Mamm.algo.ts:336","pc":[1304,1305]},{"teal":1506,"source":"contracts/Mamm.algo.ts:337","pc":[1306,1307]},{"teal":1507,"source":"contracts/Mamm.algo.ts:337","pc":[1308,1309]},{"teal":1511,"source":"contracts/Mamm.algo.ts:338","pc":[1310,1311]},{"teal":1512,"source":"contracts/Mamm.algo.ts:338","pc":[1312,1313]},{"teal":1515,"source":"contracts/Mamm.algo.ts:336","pc":[1314]},{"teal":1516,"source":"contracts/Mamm.algo.ts:336","pc":[1315,1316]},{"teal":1519,"source":"contracts/Mamm.algo.ts:336","pc":[1317]},{"teal":1522,"source":"contracts/Mamm.algo.ts:328","pc":[1318,1319,1320]},{"teal":1528,"source":"contracts/Mamm.algo.ts:342","pc":[1321]},{"teal":1529,"source":"contracts/Mamm.algo.ts:342","pc":[1322]},{"teal":1530,"source":"contracts/Mamm.algo.ts:342","pc":[1323]},{"teal":1531,"source":"contracts/Mamm.algo.ts:342","pc":[1324]},{"teal":1532,"source":"contracts/Mamm.algo.ts:342","pc":[1325,1326,1327]},{"teal":1541,"source":"contracts/Mamm.algo.ts:343","pc":[1328]},{"teal":1542,"source":"contracts/Mamm.algo.ts:343","pc":[1329]},{"teal":1543,"source":"contracts/Mamm.algo.ts:343","pc":[1330,1331]},{"teal":1547,"source":"contracts/Mamm.algo.ts:344","pc":[1332]},{"teal":1548,"source":"contracts/Mamm.algo.ts:344","pc":[1333]},{"teal":1549,"source":"contracts/Mamm.algo.ts:344","pc":[1334,1335]},{"teal":1553,"source":"contracts/Mamm.algo.ts:345","pc":[1336,1337]},{"teal":1554,"source":"contracts/Mamm.algo.ts:345","pc":[1338,1339]},{"teal":1558,"source":"contracts/Mamm.algo.ts:346","pc":[1340,1341]},{"teal":1559,"source":"contracts/Mamm.algo.ts:346","pc":[1342,1343]},{"teal":1562,"source":"contracts/Mamm.algo.ts:343","pc":[1344]},{"teal":1563,"source":"contracts/Mamm.algo.ts:343","pc":[1345,1346]},{"teal":1566,"source":"contracts/Mamm.algo.ts:343","pc":[1347]},{"teal":1567,"source":"contracts/Mamm.algo.ts:342","pc":[1348,1349,1350]},{"teal":1575,"source":"contracts/Mamm.algo.ts:349","pc":[1351]},{"teal":1576,"source":"contracts/Mamm.algo.ts:349","pc":[1352]},{"teal":1577,"source":"contracts/Mamm.algo.ts:349","pc":[1353,1354]},{"teal":1581,"source":"contracts/Mamm.algo.ts:350","pc":[1355,1356]},{"teal":1582,"source":"contracts/Mamm.algo.ts:350","pc":[1357,1358]},{"teal":1586,"source":"contracts/Mamm.algo.ts:351","pc":[1359,1360]},{"teal":1587,"source":"contracts/Mamm.algo.ts:351","pc":[1361,1362]},{"teal":1590,"source":"contracts/Mamm.algo.ts:349","pc":[1363]},{"teal":1591,"source":"contracts/Mamm.algo.ts:349","pc":[1364,1365]},{"teal":1594,"source":"contracts/Mamm.algo.ts:349","pc":[1366]},{"teal":1604,"source":"contracts/Mamm.algo.ts:358","pc":[1367,1368]},{"teal":1605,"source":"contracts/Mamm.algo.ts:358","pc":[1369]},{"teal":1606,"source":"contracts/Mamm.algo.ts:358","pc":[1370]},{"teal":1607,"source":"contracts/Mamm.algo.ts:358","pc":[1371,1372,1373]},{"teal":1613,"source":"contracts/Mamm.algo.ts:359","pc":[1374]},{"teal":1614,"source":"contracts/Mamm.algo.ts:359","pc":[1375]},{"teal":1615,"source":"contracts/Mamm.algo.ts:359","pc":[1376]},{"teal":1616,"source":"contracts/Mamm.algo.ts:359","pc":[1377]},{"teal":1617,"source":"contracts/Mamm.algo.ts:359","pc":[1378,1379,1380]},{"teal":1625,"source":"contracts/Mamm.algo.ts:360","pc":[1381]},{"teal":1626,"source":"contracts/Mamm.algo.ts:360","pc":[1382]},{"teal":1627,"source":"contracts/Mamm.algo.ts:360","pc":[1383,1384]},{"teal":1631,"source":"contracts/Mamm.algo.ts:361","pc":[1385,1386]},{"teal":1632,"source":"contracts/Mamm.algo.ts:361","pc":[1387,1388]},{"teal":1636,"source":"contracts/Mamm.algo.ts:362","pc":[1389,1390]},{"teal":1637,"source":"contracts/Mamm.algo.ts:362","pc":[1391,1392]},{"teal":1640,"source":"contracts/Mamm.algo.ts:360","pc":[1393]},{"teal":1641,"source":"contracts/Mamm.algo.ts:360","pc":[1394,1395]},{"teal":1644,"source":"contracts/Mamm.algo.ts:360","pc":[1396]},{"teal":1645,"source":"contracts/Mamm.algo.ts:359","pc":[1397,1398,1399]},{"teal":1654,"source":"contracts/Mamm.algo.ts:365","pc":[1400]},{"teal":1655,"source":"contracts/Mamm.algo.ts:365","pc":[1401]},{"teal":1656,"source":"contracts/Mamm.algo.ts:365","pc":[1402,1403]},{"teal":1660,"source":"contracts/Mamm.algo.ts:366","pc":[1404]},{"teal":1661,"source":"contracts/Mamm.algo.ts:366","pc":[1405]},{"teal":1662,"source":"contracts/Mamm.algo.ts:366","pc":[1406,1407]},{"teal":1666,"source":"contracts/Mamm.algo.ts:367","pc":[1408,1409]},{"teal":1667,"source":"contracts/Mamm.algo.ts:367","pc":[1410,1411]},{"teal":1671,"source":"contracts/Mamm.algo.ts:368","pc":[1412,1413]},{"teal":1672,"source":"contracts/Mamm.algo.ts:368","pc":[1414,1415]},{"teal":1675,"source":"contracts/Mamm.algo.ts:365","pc":[1416]},{"teal":1676,"source":"contracts/Mamm.algo.ts:365","pc":[1417,1418]},{"teal":1679,"source":"contracts/Mamm.algo.ts:365","pc":[1419]},{"teal":1687,"source":"contracts/Mamm.algo.ts:372","pc":[1420,1421]},{"teal":1688,"source":"contracts/Mamm.algo.ts:372","pc":[1422]},{"teal":1689,"source":"contracts/Mamm.algo.ts:372","pc":[1423]},{"teal":1690,"source":"contracts/Mamm.algo.ts:372","pc":[1424,1425,1426]},{"teal":1696,"source":"contracts/Mamm.algo.ts:373","pc":[1427]},{"teal":1697,"source":"contracts/Mamm.algo.ts:373","pc":[1428]},{"teal":1698,"source":"contracts/Mamm.algo.ts:373","pc":[1429]},{"teal":1699,"source":"contracts/Mamm.algo.ts:373","pc":[1430]},{"teal":1700,"source":"contracts/Mamm.algo.ts:373","pc":[1431,1432,1433]},{"teal":1708,"source":"contracts/Mamm.algo.ts:374","pc":[1434]},{"teal":1709,"source":"contracts/Mamm.algo.ts:374","pc":[1435]},{"teal":1710,"source":"contracts/Mamm.algo.ts:374","pc":[1436,1437]},{"teal":1714,"source":"contracts/Mamm.algo.ts:375","pc":[1438,1439]},{"teal":1715,"source":"contracts/Mamm.algo.ts:375","pc":[1440,1441]},{"teal":1719,"source":"contracts/Mamm.algo.ts:376","pc":[1442,1443]},{"teal":1720,"source":"contracts/Mamm.algo.ts:376","pc":[1444,1445]},{"teal":1723,"source":"contracts/Mamm.algo.ts:374","pc":[1446]},{"teal":1724,"source":"contracts/Mamm.algo.ts:374","pc":[1447,1448]},{"teal":1727,"source":"contracts/Mamm.algo.ts:374","pc":[1449]},{"teal":1728,"source":"contracts/Mamm.algo.ts:373","pc":[1450,1451,1452]},{"teal":1737,"source":"contracts/Mamm.algo.ts:379","pc":[1453]},{"teal":1738,"source":"contracts/Mamm.algo.ts:379","pc":[1454]},{"teal":1739,"source":"contracts/Mamm.algo.ts:379","pc":[1455,1456]},{"teal":1743,"source":"contracts/Mamm.algo.ts:380","pc":[1457]},{"teal":1744,"source":"contracts/Mamm.algo.ts:380","pc":[1458]},{"teal":1745,"source":"contracts/Mamm.algo.ts:380","pc":[1459,1460]},{"teal":1749,"source":"contracts/Mamm.algo.ts:381","pc":[1461,1462]},{"teal":1750,"source":"contracts/Mamm.algo.ts:381","pc":[1463,1464]},{"teal":1754,"source":"contracts/Mamm.algo.ts:382","pc":[1465,1466]},{"teal":1755,"source":"contracts/Mamm.algo.ts:382","pc":[1467,1468]},{"teal":1758,"source":"contracts/Mamm.algo.ts:379","pc":[1469]},{"teal":1759,"source":"contracts/Mamm.algo.ts:379","pc":[1470,1471]},{"teal":1762,"source":"contracts/Mamm.algo.ts:379","pc":[1472]},{"teal":1767,"source":"contracts/Mamm.algo.ts:270","pc":[1473]},{"teal":1771,"source":"contracts/Mamm.algo.ts:389","pc":[1474,1475,1476]},{"teal":1775,"source":"contracts/Mamm.algo.ts:390","pc":[1477,1478]},{"teal":1776,"source":"contracts/Mamm.algo.ts:390","pc":[1479,1480]},{"teal":1777,"source":"contracts/Mamm.algo.ts:390","pc":[1481]},{"teal":1778,"source":"contracts/Mamm.algo.ts:390","pc":[1482,1483,1484]},{"teal":1779,"source":"contracts/Mamm.algo.ts:390","pc":[1485,1486]},{"teal":1780,"source":"contracts/Mamm.algo.ts:390","pc":[1487,1488,1489]},{"teal":1783,"source":"contracts/Mamm.algo.ts:390","pc":[1490,1491]},{"teal":1786,"source":"contracts/Mamm.algo.ts:389","pc":[1492]},{"teal":1791,"source":"contracts/Mamm.algo.ts:396","pc":[1493,1494,1495]},{"teal":1792,"source":"contracts/Mamm.algo.ts:396","pc":[1496]},{"teal":1795,"source":"contracts/Mamm.algo.ts:396","pc":[1497,1498,1499]},{"teal":1796,"source":"contracts/Mamm.algo.ts:396","pc":[1500]},{"teal":1797,"source":"contracts/Mamm.algo.ts:396","pc":[1501]},{"teal":1801,"source":"contracts/Mamm.algo.ts:396","pc":[1502,1503,1504]},{"teal":1805,"source":"contracts/Mamm.algo.ts:397","pc":[1505]},{"teal":1806,"source":"contracts/Mamm.algo.ts:397","pc":[1506]},{"teal":1807,"source":"contracts/Mamm.algo.ts:397","pc":[1507,1508]},{"teal":1808,"source":"contracts/Mamm.algo.ts:397","pc":[1509]},{"teal":1811,"source":"contracts/Mamm.algo.ts:397","errorMessage":"Only admin can update the swap fee","pc":[1510]},{"teal":1815,"source":"contracts/Mamm.algo.ts:398","pc":[1511,1512]},{"teal":1816,"source":"contracts/Mamm.algo.ts:398","pc":[1513,1514]},{"teal":1817,"source":"contracts/Mamm.algo.ts:398","pc":[1515]},{"teal":1818,"source":"contracts/Mamm.algo.ts:396","pc":[1516]},{"teal":1823,"source":"contracts/Mamm.algo.ts:402","pc":[1517,1518,1519]},{"teal":1824,"source":"contracts/Mamm.algo.ts:402","pc":[1520]},{"teal":1827,"source":"contracts/Mamm.algo.ts:402","pc":[1521,1522,1523]},{"teal":1828,"source":"contracts/Mamm.algo.ts:402","pc":[1524]},{"teal":1829,"source":"contracts/Mamm.algo.ts:402","pc":[1525]},{"teal":1833,"source":"contracts/Mamm.algo.ts:402","pc":[1526,1527,1528]},{"teal":1837,"source":"contracts/Mamm.algo.ts:403","pc":[1529]},{"teal":1838,"source":"contracts/Mamm.algo.ts:403","pc":[1530]},{"teal":1839,"source":"contracts/Mamm.algo.ts:403","pc":[1531,1532]},{"teal":1840,"source":"contracts/Mamm.algo.ts:403","pc":[1533]},{"teal":1843,"source":"contracts/Mamm.algo.ts:403","errorMessage":"Only admin can update the protocol fee","pc":[1534]},{"teal":1847,"source":"contracts/Mamm.algo.ts:404","pc":[1535,1536]},{"teal":1848,"source":"contracts/Mamm.algo.ts:404","pc":[1537,1538]},{"teal":1849,"source":"contracts/Mamm.algo.ts:404","pc":[1539]},{"teal":1850,"source":"contracts/Mamm.algo.ts:402","pc":[1540]},{"teal":1855,"source":"contracts/Mamm.algo.ts:408","pc":[1541,1542,1543]},{"teal":1856,"source":"contracts/Mamm.algo.ts:408","pc":[1544]},{"teal":1857,"source":"contracts/Mamm.algo.ts:408","pc":[1545]},{"teal":1858,"source":"contracts/Mamm.algo.ts:408","pc":[1546,1547]},{"teal":1859,"source":"contracts/Mamm.algo.ts:408","pc":[1548]},{"teal":1862,"source":"contracts/Mamm.algo.ts:408","errorMessage":"argument 0 (newAdmin) for updateAdmin must be a address","pc":[1549]},{"teal":1865,"source":"contracts/Mamm.algo.ts:408","pc":[1550,1551,1552]},{"teal":1866,"source":"contracts/Mamm.algo.ts:408","pc":[1553]},{"teal":1867,"source":"contracts/Mamm.algo.ts:408","pc":[1554]},{"teal":1871,"source":"contracts/Mamm.algo.ts:408","pc":[1555,1556,1557]},{"teal":1875,"source":"contracts/Mamm.algo.ts:409","pc":[1558]},{"teal":1876,"source":"contracts/Mamm.algo.ts:409","pc":[1559]},{"teal":1877,"source":"contracts/Mamm.algo.ts:409","pc":[1560,1561]},{"teal":1878,"source":"contracts/Mamm.algo.ts:409","pc":[1562]},{"teal":1881,"source":"contracts/Mamm.algo.ts:409","errorMessage":"Only admin can update the admin address","pc":[1563]},{"teal":1885,"source":"contracts/Mamm.algo.ts:410","pc":[1564]},{"teal":1886,"source":"contracts/Mamm.algo.ts:410","pc":[1565,1566]},{"teal":1887,"source":"contracts/Mamm.algo.ts:410","pc":[1567]},{"teal":1888,"source":"contracts/Mamm.algo.ts:408","pc":[1568]},{"teal":1893,"source":"contracts/Mamm.algo.ts:414","pc":[1569,1570,1571]},{"teal":1894,"source":"contracts/Mamm.algo.ts:414","pc":[1572]},{"teal":1895,"source":"contracts/Mamm.algo.ts:414","pc":[1573]},{"teal":1896,"source":"contracts/Mamm.algo.ts:414","pc":[1574,1575]},{"teal":1897,"source":"contracts/Mamm.algo.ts:414","pc":[1576]},{"teal":1900,"source":"contracts/Mamm.algo.ts:414","errorMessage":"argument 0 (newTreasury) for updateTreasury must be a address","pc":[1577]},{"teal":1903,"source":"contracts/Mamm.algo.ts:414","pc":[1578,1579,1580]},{"teal":1904,"source":"contracts/Mamm.algo.ts:414","pc":[1581]},{"teal":1905,"source":"contracts/Mamm.algo.ts:414","pc":[1582]},{"teal":1909,"source":"contracts/Mamm.algo.ts:414","pc":[1583,1584,1585]},{"teal":1913,"source":"contracts/Mamm.algo.ts:415","pc":[1586]},{"teal":1914,"source":"contracts/Mamm.algo.ts:415","pc":[1587]},{"teal":1915,"source":"contracts/Mamm.algo.ts:415","pc":[1588,1589]},{"teal":1916,"source":"contracts/Mamm.algo.ts:415","pc":[1590]},{"teal":1919,"source":"contracts/Mamm.algo.ts:415","errorMessage":"Only admin can update the treasury address","pc":[1591]},{"teal":1923,"source":"contracts/Mamm.algo.ts:416","pc":[1592,1593]},{"teal":1924,"source":"contracts/Mamm.algo.ts:416","pc":[1594,1595]},{"teal":1925,"source":"contracts/Mamm.algo.ts:416","pc":[1596]},{"teal":1926,"source":"contracts/Mamm.algo.ts:414","pc":[1597]},{"teal":1931,"source":"contracts/Mamm.algo.ts:420","pc":[1598,1599,1600]},{"teal":1932,"source":"contracts/Mamm.algo.ts:420","pc":[1601]},{"teal":1935,"source":"contracts/Mamm.algo.ts:420","pc":[1602,1603,1604]},{"teal":1936,"source":"contracts/Mamm.algo.ts:420","pc":[1605]},{"teal":1937,"source":"contracts/Mamm.algo.ts:420","pc":[1606]},{"teal":1941,"source":"contracts/Mamm.algo.ts:420","pc":[1607,1608,1609]},{"teal":1945,"source":"contracts/Mamm.algo.ts:421","pc":[1610]},{"teal":1946,"source":"contracts/Mamm.algo.ts:421","pc":[1611]},{"teal":1947,"source":"contracts/Mamm.algo.ts:421","pc":[1612,1613]},{"teal":1948,"source":"contracts/Mamm.algo.ts:421","pc":[1614]},{"teal":1951,"source":"contracts/Mamm.algo.ts:421","errorMessage":"Only admin can update the minimum balance requirement","pc":[1615]},{"teal":1955,"source":"contracts/Mamm.algo.ts:422","pc":[1616,1617]},{"teal":1956,"source":"contracts/Mamm.algo.ts:422","pc":[1618,1619]},{"teal":1957,"source":"contracts/Mamm.algo.ts:422","pc":[1620]},{"teal":1958,"source":"contracts/Mamm.algo.ts:420","pc":[1621]},{"teal":1963,"source":"contracts/Mamm.algo.ts:425","pc":[1622,1623,1624]},{"teal":1964,"source":"contracts/Mamm.algo.ts:425","pc":[1625]},{"teal":1967,"source":"contracts/Mamm.algo.ts:425","pc":[1626,1627,1628]},{"teal":1968,"source":"contracts/Mamm.algo.ts:425","pc":[1629]},{"teal":1969,"source":"contracts/Mamm.algo.ts:425","pc":[1630]},{"teal":1973,"source":"contracts/Mamm.algo.ts:425","pc":[1631,1632,1633]},{"teal":1977,"source":"contracts/Mamm.algo.ts:426","pc":[1634]},{"teal":1978,"source":"contracts/Mamm.algo.ts:426","pc":[1635]},{"teal":1979,"source":"contracts/Mamm.algo.ts:426","pc":[1636,1637]},{"teal":1980,"source":"contracts/Mamm.algo.ts:426","pc":[1638]},{"teal":1983,"source":"contracts/Mamm.algo.ts:426","errorMessage":"Only admin can update the contract ending","pc":[1639]},{"teal":1987,"source":"contracts/Mamm.algo.ts:427","pc":[1640,1641]},{"teal":1988,"source":"contracts/Mamm.algo.ts:427","pc":[1642,1643]},{"teal":1989,"source":"contracts/Mamm.algo.ts:427","pc":[1644]},{"teal":1990,"source":"contracts/Mamm.algo.ts:425","pc":[1645]},{"teal":1993,"source":"contracts/Mamm.algo.ts:15","pc":[1646,1647,1648,1649,1650,1651]},{"teal":1994,"source":"contracts/Mamm.algo.ts:15","pc":[1652,1653,1654]},{"teal":1995,"source":"contracts/Mamm.algo.ts:15","pc":[1655,1656,1657,1658]},{"teal":1998,"source":"contracts/Mamm.algo.ts:15","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1659]},{"teal":2001,"source":"contracts/Mamm.algo.ts:15","pc":[1660,1661,1662,1663,1664,1665]},{"teal":2002,"source":"contracts/Mamm.algo.ts:15","pc":[1666,1667,1668,1669,1670,1671]},{"teal":2003,"source":"contracts/Mamm.algo.ts:15","pc":[1672,1673,1674,1675,1676,1677]},{"teal":2004,"source":"contracts/Mamm.algo.ts:15","pc":[1678,1679,1680,1681,1682,1683]},{"teal":2005,"source":"contracts/Mamm.algo.ts:15","pc":[1684,1685,1686,1687,1688,1689]},{"teal":2006,"source":"contracts/Mamm.algo.ts:15","pc":[1690,1691,1692,1693,1694,1695]},{"teal":2007,"source":"contracts/Mamm.algo.ts:15","pc":[1696,1697,1698,1699,1700,1701]},{"teal":2008,"source":"contracts/Mamm.algo.ts:15","pc":[1702,1703,1704,1705,1706,1707]},{"teal":2009,"source":"contracts/Mamm.algo.ts:15","pc":[1708,1709,1710,1711,1712,1713]},{"teal":2010,"source":"contracts/Mamm.algo.ts:15","pc":[1714,1715,1716,1717,1718,1719]},{"teal":2011,"source":"contracts/Mamm.algo.ts:15","pc":[1720,1721,1722]},{"teal":2012,"source":"contracts/Mamm.algo.ts:15","pc":[1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744]},{"teal":2015,"source":"contracts/Mamm.algo.ts:15","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1745]},{"teal":2018,"source":"contracts/Mamm.algo.ts:15","pc":[1746,1747,1748,1749,1750,1751]},{"teal":2019,"source":"contracts/Mamm.algo.ts:15","pc":[1752,1753,1754]},{"teal":2020,"source":"contracts/Mamm.algo.ts:15","pc":[1755,1756,1757,1758]},{"teal":2023,"source":"contracts/Mamm.algo.ts:15","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[1759]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"byteCode":{"approval":"CyAHAAEE6Acg///og7HeFgYmEwAFYWRtaW4DcHRpA3N0aQNwdHIDc3RyBHRscHMEbHB0aQJscAFrCHRyZWFzdXJ5Bm1pbmJhbAVzZmJwcwVwZmJwcwNlbmQDbHBuA2xwcwNscGQDbHB1MRgUIQYLMRkIjQwF8AAAAAAAAAAABkYF4gAAAAAAAAAAAAAAiAACI0OKAAApMQBniYgAAiNDigAAKWQxABJEJw5kIxJEJwRkIhJEJwVkIhJEsSSyECpkshEpZLIUIrISKWSyFSWyAbOxJLIQK2SyESlkshQishIpZLIVJbIBsycLgcCaDGeI/62JNhoHSRUhBBJENhoGFzYaBRc2GgRXAgA2GgNXAgA2GgIXNhoBFzEWIwlJOBAjEkSIAAIjQ4oIACgpZDEAEkQnBCJnJwUiZycGImcnCSJnJwgiZycPi/xJFRZXBgJMUGcnEIAFAANNTFBnJxEhBmcnEov7SRUWVwYCTFBngAd2ZXJzaW9ugegHZycLgYC1GGcnDIv6ZycNi/lnJwqL+GeL/zgHMgoSRIv/OAiBuMwYEkQqi/5nK4v9Z7EkshAqZLIRMgqyFCKyEiWyAbOxJLIQK2SyETIKshQishIlsgGzsYEDshAhBbIiJxFksiMnD2RXAgCyJicQZFcCALIlJxJkVwIAsiclsgGztDyMACcIiwBnJwYhBWeJMRYjCUk4ECQSRDEWgQIJSTgQJBJENhoCFzYaAReIAAIjQ4oEAChHBicEZIwAJwVkjAEnBmSMAicHZIwDi/04ADEAEkSL/TgUMgoSRIv9OBEqZBJEi/04Eov/EkSL/DgAMQASRIv8OBQyChJEi/w4EStkEkSL/DgSi/4SRIsDIhJBAAuL/4v+C5KMBEIAKov/iwIdIosAH0hITBREjAUii/6LAgsiiwEfSEhMFESMBosGiwWIAwKMBCcEiwCL/whnJwWLAYv+CGcnBosCiwQJZycJiwCL/wiLAYv+CAtnJweLA4sECGexJLIQJwhkshExALIUiwSyEiKyAbOJNhoBFzEWIwlJOBAkEkSIAAIjQ4oCAChHBCcEZIwAJwVkjAEnBmSMAov+Ig1Ei/6LAg5Ei/84ADEAEkSL/zgUMgoSRIv/OBEnCGQSRIv/OBKL/hJEi/6LAB0iiwIfSEhMFESMA4v+iwEdIosCH0hITBREjAQnBIsAiwMJZycFiwGLBAlnJwaLAov+CWcnCYsAiwMJiwGLBAkLZycGSWSL/ghnJwdJZIv+CWcqZCITQQAXsSSyECpkshExALIUiwOyEiKyAbNCABCxI7IQMQCyB4sDsggisgGzK2QiE0EAF7EkshArZLIRMQCyFIsEshIisgGzQgAQsSOyEDEAsgeLBLIIIrIBs4k2GgIXNhoBF4gAAiNDigIAKEcPJwRkjAAnBWSMAScMZIwCJw1kjAMnCmSMBCKMBSKMBov+IhJBAAuLAIwFiwGMBkIAFIv+IxJBAAuLAYwFiwCMBkIAAiJEi/8iDUSL/4sCHSKBkE4fSEhMFESMB4sHiwMdIosCH0hITBREjAiLB4sICYwJi/+LBwmMCosGiwoLjAuLBYsKCIwMiwuLDAqMDYsNIg1EiwWLCgiLCQiMDosGiw0JjA+L/iISQQANJwSLDmcnBYsPZ0IACicFiw5nJwSLD2cnCYsOiw8LZ4sIIg1BAGaL/iISQQAxKmQiE0EAF7EkshAqZLIRiwSyFIsIshIisgGzQgAQsSOyEIsEsgeLCLIIIrIBs0IALitkIhNBABexJLIQK2SyEYsEshSLCLISIrIBs0IAELEjshCLBLIHiwiyCCKyAbOL/iISQQAuK2QiEkEAE7EjshAxALIHiw2yCCKyAbNCABSxJLIQK2SyETEAshSLDbISIrIBs4v+IxJBAC4qZCISQQATsSOyEDEAsgeLDbIIIrIBs0IAFLEkshAqZLIRMQCyFIsNshIisgGziYoCAYv/i/4MQQAFi/9CAAKL/ok2GgEXiAACI0OKAQApZDEAEkQnDIv/Z4k2GgEXiAACI0OKAQApZDEAEkQnDYv/Z4k2GgFJFSEEEkSIAAIjQ4oBAClkMQASRCmL/2eJNhoBSRUhBBJEiAACI0OKAQApZDEAEkQnCov/Z4k2GgEXiAACI0OKAQApZDEAEkQnC4v/Z4k2GgEXiAACI0OKAQApZDEAEkQnDov/Z4mABLhEezY2GgCOAfoSAIAEDC/6eYAE/CKNI4AEElbcSIAEr1B1JIAE4c6FTYAE9hVV34AE7tGhwIAEYcJ0r4AEc2qpJIAEGknZujYaAI4K+iL7Ofw1/Tz/BP8c/zT/UP9t/4UAgAQkh8MsNhoAjgH5uwA=","clear":"Cw=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Mamm contract
 */
export type MammArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'deleteApplication()void': Record<string, never>
    'initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void': {
      mbrTxn: AppMethodCallTransactionArgument
      primaryAssetId: bigint | number
      secondaryAssetId: bigint | number
      lpAssetName: string
      lpAssetUrl: string
      swapFeeBps: bigint | number
      protocolFeeBps: bigint | number
      treasuryAddress: string
    }
    'addLiquidity(uint64,uint64,axfer,axfer)void': {
      primaryAmount: bigint | number
      secondaryAmount: bigint | number
      primaryAssetTransfer: AppMethodCallTransactionArgument
      secondaryAssetTransfer: AppMethodCallTransactionArgument
    }
    'removeLiquidity(axfer,uint64)void': {
      burnTxn: AppMethodCallTransactionArgument
      lpTokensBurned: bigint | number
    }
    'swap(uint64,uint64)void': {
      inputAmount: bigint | number
      swapType: bigint | number
    }
    'updateSwapFee(uint64)void': {
      newFee: bigint | number
    }
    'updateProtocolFee(uint64)void': {
      newFee: bigint | number
    }
    'updateAdmin(address)void': {
      newAdmin: string
    }
    'updateTreasury(address)void': {
      newTreasury: string
    }
    'updateMinimumBalance(uint64)void': {
      newMbr: bigint | number
    }
    'updateContractEnding(uint64)void': {
      newEnding: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'deleteApplication()void': []
    'initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void': [mbrTxn: AppMethodCallTransactionArgument, primaryAssetId: bigint | number, secondaryAssetId: bigint | number, lpAssetName: string, lpAssetUrl: string, swapFeeBps: bigint | number, protocolFeeBps: bigint | number, treasuryAddress: string]
    'addLiquidity(uint64,uint64,axfer,axfer)void': [primaryAmount: bigint | number, secondaryAmount: bigint | number, primaryAssetTransfer: AppMethodCallTransactionArgument, secondaryAssetTransfer: AppMethodCallTransactionArgument]
    'removeLiquidity(axfer,uint64)void': [burnTxn: AppMethodCallTransactionArgument, lpTokensBurned: bigint | number]
    'swap(uint64,uint64)void': [inputAmount: bigint | number, swapType: bigint | number]
    'updateSwapFee(uint64)void': [newFee: bigint | number]
    'updateProtocolFee(uint64)void': [newFee: bigint | number]
    'updateAdmin(address)void': [newAdmin: string]
    'updateTreasury(address)void': [newTreasury: string]
    'updateMinimumBalance(uint64)void': [newMbr: bigint | number]
    'updateContractEnding(uint64)void': [newEnding: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type MammReturns = {
  'createApplication()void': void
  'deleteApplication()void': void
  'initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void': void
  'addLiquidity(uint64,uint64,axfer,axfer)void': void
  'removeLiquidity(axfer,uint64)void': void
  'swap(uint64,uint64)void': void
  'updateSwapFee(uint64)void': void
  'updateProtocolFee(uint64)void': void
  'updateAdmin(address)void': void
  'updateTreasury(address)void': void
  'updateMinimumBalance(uint64)void': void
  'updateContractEnding(uint64)void': void
}

/**
 * Defines the types of available calls and state of the Mamm smart contract.
 */
export type MammTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: MammArgs['obj']['createApplication()void']
      argsTuple: MammArgs['tuple']['createApplication()void']
      returns: MammReturns['createApplication()void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: MammArgs['obj']['deleteApplication()void']
      argsTuple: MammArgs['tuple']['deleteApplication()void']
      returns: MammReturns['deleteApplication()void']
    }>
    & Record<'initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void' | 'initApplication', {
      argsObj: MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']
      argsTuple: MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']
      returns: MammReturns['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']
    }>
    & Record<'addLiquidity(uint64,uint64,axfer,axfer)void' | 'addLiquidity', {
      argsObj: MammArgs['obj']['addLiquidity(uint64,uint64,axfer,axfer)void']
      argsTuple: MammArgs['tuple']['addLiquidity(uint64,uint64,axfer,axfer)void']
      returns: MammReturns['addLiquidity(uint64,uint64,axfer,axfer)void']
    }>
    & Record<'removeLiquidity(axfer,uint64)void' | 'removeLiquidity', {
      argsObj: MammArgs['obj']['removeLiquidity(axfer,uint64)void']
      argsTuple: MammArgs['tuple']['removeLiquidity(axfer,uint64)void']
      returns: MammReturns['removeLiquidity(axfer,uint64)void']
    }>
    & Record<'swap(uint64,uint64)void' | 'swap', {
      argsObj: MammArgs['obj']['swap(uint64,uint64)void']
      argsTuple: MammArgs['tuple']['swap(uint64,uint64)void']
      returns: MammReturns['swap(uint64,uint64)void']
    }>
    & Record<'updateSwapFee(uint64)void' | 'updateSwapFee', {
      argsObj: MammArgs['obj']['updateSwapFee(uint64)void']
      argsTuple: MammArgs['tuple']['updateSwapFee(uint64)void']
      returns: MammReturns['updateSwapFee(uint64)void']
    }>
    & Record<'updateProtocolFee(uint64)void' | 'updateProtocolFee', {
      argsObj: MammArgs['obj']['updateProtocolFee(uint64)void']
      argsTuple: MammArgs['tuple']['updateProtocolFee(uint64)void']
      returns: MammReturns['updateProtocolFee(uint64)void']
    }>
    & Record<'updateAdmin(address)void' | 'updateAdmin', {
      argsObj: MammArgs['obj']['updateAdmin(address)void']
      argsTuple: MammArgs['tuple']['updateAdmin(address)void']
      returns: MammReturns['updateAdmin(address)void']
    }>
    & Record<'updateTreasury(address)void' | 'updateTreasury', {
      argsObj: MammArgs['obj']['updateTreasury(address)void']
      argsTuple: MammArgs['tuple']['updateTreasury(address)void']
      returns: MammReturns['updateTreasury(address)void']
    }>
    & Record<'updateMinimumBalance(uint64)void' | 'updateMinimumBalance', {
      argsObj: MammArgs['obj']['updateMinimumBalance(uint64)void']
      argsTuple: MammArgs['tuple']['updateMinimumBalance(uint64)void']
      returns: MammReturns['updateMinimumBalance(uint64)void']
    }>
    & Record<'updateContractEnding(uint64)void' | 'updateContractEnding', {
      argsObj: MammArgs['obj']['updateContractEnding(uint64)void']
      argsTuple: MammArgs['tuple']['updateContractEnding(uint64)void']
      returns: MammReturns['updateContractEnding(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        primaryTokenReserve: bigint
        secondaryTokenReserve: bigint
        primaryTokenId: bigint
        secondaryTokenId: bigint
        totalLpSupply: bigint
        lpTokensIssued: bigint
        kValue: bigint
        lpTokenId: bigint
        lpTokenName: string
        lpTokenSymbol: string
        lpTokenDecimals: bigint
        lpTokenUrl: string
        swapFeeBps: bigint
        protocolFeeBps: bigint
        admin: string
        treasuryAddress: string
        minimumBalance: bigint
        contractEnding: bigint
        contractVersion: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type MammSignatures = keyof MammTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MammNonVoidMethodSignatures = keyof MammTypes['methods'] extends infer T ? T extends keyof MammTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Mamm smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MammSignatures> = MammTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Mamm smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MammSignatures> = MammTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = MammTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type MammCreateCallParams =
  | Expand<CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type MammDeleteCallParams =
  | Expand<CallParams<MammArgs['obj']['deleteApplication()void'] | MammArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<MammArgs['obj']['deleteApplication()void'] | MammArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type MammDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MammCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: MammDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Mamm smart contract
 */
export abstract class MammParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends MammCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return MammParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Mamm smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends MammDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return MammParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the Mamm smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<MammArgs['obj']['deleteApplication()void'] | MammArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn, params.args.primaryAssetId, params.args.secondaryAssetId, params.args.lpAssetName, params.args.lpAssetUrl, params.args.swapFeeBps, params.args.protocolFeeBps, params.args.treasuryAddress],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64,axfer,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64,axfer,axfer)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64,axfer,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64,axfer,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.primaryAmount, params.args.secondaryAmount, params.args.primaryAssetTransfer, params.args.secondaryAssetTransfer],
    }
  }
  /**
   * Constructs a no op call for the removeLiquidity(axfer,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLiquidity(params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeLiquidity(axfer,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.burnTxn, params.args.lpTokensBurned],
    }
  }
  /**
   * Constructs a no op call for the swap(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swap(params: CallParams<MammArgs['obj']['swap(uint64,uint64)void'] | MammArgs['tuple']['swap(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.inputAmount, params.args.swapType],
    }
  }
  /**
   * Constructs a no op call for the updateSwapFee(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateSwapFee(params: CallParams<MammArgs['obj']['updateSwapFee(uint64)void'] | MammArgs['tuple']['updateSwapFee(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateSwapFee(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newFee],
    }
  }
  /**
   * Constructs a no op call for the updateProtocolFee(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateProtocolFee(params: CallParams<MammArgs['obj']['updateProtocolFee(uint64)void'] | MammArgs['tuple']['updateProtocolFee(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateProtocolFee(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newFee],
    }
  }
  /**
   * Constructs a no op call for the updateAdmin(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAdmin(params: CallParams<MammArgs['obj']['updateAdmin(address)void'] | MammArgs['tuple']['updateAdmin(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAdmin(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the updateTreasury(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateTreasury(params: CallParams<MammArgs['obj']['updateTreasury(address)void'] | MammArgs['tuple']['updateTreasury(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateTreasury(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newTreasury],
    }
  }
  /**
   * Constructs a no op call for the updateMinimumBalance(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateMinimumBalance(params: CallParams<MammArgs['obj']['updateMinimumBalance(uint64)void'] | MammArgs['tuple']['updateMinimumBalance(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateMinimumBalance(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newMbr],
    }
  }
  /**
   * Constructs a no op call for the updateContractEnding(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateContractEnding(params: CallParams<MammArgs['obj']['updateContractEnding(uint64)void'] | MammArgs['tuple']['updateContractEnding(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateContractEnding(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newEnding],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Mamm smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MammFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MammFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MammClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MammClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Mamm smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MammDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? MammParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (MammCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? MammParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (MammDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new MammClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mamm smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(MammParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the Mamm smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<MammArgs['obj']['deleteApplication()void'] | MammArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(MammParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mamm smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(MammParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mamm smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<MammArgs['obj']['createApplication()void'] | MammArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(MammParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | MammReturns['createApplication()void']) }, appClient: new MammClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Mamm smart contract
 */
export class MammClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MammClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Mamm app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MammClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MammNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MammClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MammClient> {
    return new MammClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MammClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MammClient> {
    return new MammClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Mamm smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<MammArgs['obj']['deleteApplication()void'] | MammArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(MammParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Mamm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Mamm smart contract using the `initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `addLiquidity(uint64,uint64,axfer,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64,axfer,axfer)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64,axfer,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `removeLiquidity(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeLiquidity: (params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.removeLiquidity(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `swap(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swap: (params: CallParams<MammArgs['obj']['swap(uint64,uint64)void'] | MammArgs['tuple']['swap(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.swap(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateSwapFee(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateSwapFee: (params: CallParams<MammArgs['obj']['updateSwapFee(uint64)void'] | MammArgs['tuple']['updateSwapFee(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.updateSwapFee(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateProtocolFee(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateProtocolFee: (params: CallParams<MammArgs['obj']['updateProtocolFee(uint64)void'] | MammArgs['tuple']['updateProtocolFee(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.updateProtocolFee(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateAdmin(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAdmin: (params: CallParams<MammArgs['obj']['updateAdmin(address)void'] | MammArgs['tuple']['updateAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.updateAdmin(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateTreasury(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateTreasury: (params: CallParams<MammArgs['obj']['updateTreasury(address)void'] | MammArgs['tuple']['updateTreasury(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.updateTreasury(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateMinimumBalance(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateMinimumBalance: (params: CallParams<MammArgs['obj']['updateMinimumBalance(uint64)void'] | MammArgs['tuple']['updateMinimumBalance(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.updateMinimumBalance(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateContractEnding(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateContractEnding: (params: CallParams<MammArgs['obj']['updateContractEnding(uint64)void'] | MammArgs['tuple']['updateContractEnding(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MammParamsFactory.updateContractEnding(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Mamm smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<MammArgs['obj']['deleteApplication()void'] | MammArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(MammParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Mamm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Mamm smart contract using the `initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `addLiquidity(uint64,uint64,axfer,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64,axfer,axfer)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64,axfer,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `removeLiquidity(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeLiquidity: (params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.removeLiquidity(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `swap(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swap: (params: CallParams<MammArgs['obj']['swap(uint64,uint64)void'] | MammArgs['tuple']['swap(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.swap(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateSwapFee(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateSwapFee: (params: CallParams<MammArgs['obj']['updateSwapFee(uint64)void'] | MammArgs['tuple']['updateSwapFee(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.updateSwapFee(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateProtocolFee(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateProtocolFee: (params: CallParams<MammArgs['obj']['updateProtocolFee(uint64)void'] | MammArgs['tuple']['updateProtocolFee(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.updateProtocolFee(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateAdmin(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAdmin: (params: CallParams<MammArgs['obj']['updateAdmin(address)void'] | MammArgs['tuple']['updateAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.updateAdmin(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateTreasury(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateTreasury: (params: CallParams<MammArgs['obj']['updateTreasury(address)void'] | MammArgs['tuple']['updateTreasury(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.updateTreasury(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateMinimumBalance(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateMinimumBalance: (params: CallParams<MammArgs['obj']['updateMinimumBalance(uint64)void'] | MammArgs['tuple']['updateMinimumBalance(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.updateMinimumBalance(params))
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateContractEnding(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateContractEnding: (params: CallParams<MammArgs['obj']['updateContractEnding(uint64)void'] | MammArgs['tuple']['updateContractEnding(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MammParamsFactory.updateContractEnding(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Mamm smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<MammArgs['obj']['deleteApplication()void'] | MammArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(MammParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | MammReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Mamm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Mamm smart contract using the `initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `addLiquidity(uint64,uint64,axfer,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64,axfer,axfer)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64,axfer,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['addLiquidity(uint64,uint64,axfer,axfer)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `removeLiquidity(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeLiquidity: async (params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.removeLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['removeLiquidity(axfer,uint64)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `swap(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swap: async (params: CallParams<MammArgs['obj']['swap(uint64,uint64)void'] | MammArgs['tuple']['swap(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.swap(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['swap(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateSwapFee(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateSwapFee: async (params: CallParams<MammArgs['obj']['updateSwapFee(uint64)void'] | MammArgs['tuple']['updateSwapFee(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.updateSwapFee(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['updateSwapFee(uint64)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateProtocolFee(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateProtocolFee: async (params: CallParams<MammArgs['obj']['updateProtocolFee(uint64)void'] | MammArgs['tuple']['updateProtocolFee(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.updateProtocolFee(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['updateProtocolFee(uint64)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateAdmin(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAdmin: async (params: CallParams<MammArgs['obj']['updateAdmin(address)void'] | MammArgs['tuple']['updateAdmin(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.updateAdmin(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['updateAdmin(address)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateTreasury(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateTreasury: async (params: CallParams<MammArgs['obj']['updateTreasury(address)void'] | MammArgs['tuple']['updateTreasury(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.updateTreasury(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['updateTreasury(address)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateMinimumBalance(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateMinimumBalance: async (params: CallParams<MammArgs['obj']['updateMinimumBalance(uint64)void'] | MammArgs['tuple']['updateMinimumBalance(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.updateMinimumBalance(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['updateMinimumBalance(uint64)void'])}
    },

    /**
     * Makes a call to the Mamm smart contract using the `updateContractEnding(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateContractEnding: async (params: CallParams<MammArgs['obj']['updateContractEnding(uint64)void'] | MammArgs['tuple']['updateContractEnding(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MammParamsFactory.updateContractEnding(params))
      return {...result, return: result.return as unknown as (undefined | MammReturns['updateContractEnding(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MammClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Mamm app
   */
  state = {
    /**
     * Methods to access global state for the current Mamm app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          primaryTokenReserve: result.primary_token_reserve,
          secondaryTokenReserve: result.secondary_token_reserve,
          primaryTokenId: result.primary_token_id,
          secondaryTokenId: result.secondary_token_id,
          totalLpSupply: result.total_lp_supply,
          lpTokensIssued: result.lp_tokens_issued,
          kValue: result.k_value,
          lpTokenId: result.lp_token_id,
          lpTokenName: result.lp_token_name,
          lpTokenSymbol: result.lp_token_symbol,
          lpTokenDecimals: result.lp_token_decimals,
          lpTokenUrl: result.lp_token_url,
          swapFeeBps: result.swap_fee_bps,
          protocolFeeBps: result.protocol_fee_bps,
          admin: result.admin,
          treasuryAddress: result.treasury_address,
          minimumBalance: result.minimum_balance,
          contractEnding: result.contract_ending,
          contractVersion: result.contract_version,
        }
      },
      /**
       * Get the current value of the primary_token_reserve key in global state
       */
      primaryTokenReserve: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("primary_token_reserve")) as bigint | undefined },
      /**
       * Get the current value of the secondary_token_reserve key in global state
       */
      secondaryTokenReserve: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("secondary_token_reserve")) as bigint | undefined },
      /**
       * Get the current value of the primary_token_id key in global state
       */
      primaryTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("primary_token_id")) as bigint | undefined },
      /**
       * Get the current value of the secondary_token_id key in global state
       */
      secondaryTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("secondary_token_id")) as bigint | undefined },
      /**
       * Get the current value of the total_lp_supply key in global state
       */
      totalLpSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_lp_supply")) as bigint | undefined },
      /**
       * Get the current value of the lp_tokens_issued key in global state
       */
      lpTokensIssued: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lp_tokens_issued")) as bigint | undefined },
      /**
       * Get the current value of the k_value key in global state
       */
      kValue: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("k_value")) as bigint | undefined },
      /**
       * Get the current value of the lp_token_id key in global state
       */
      lpTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lp_token_id")) as bigint | undefined },
      /**
       * Get the current value of the lp_token_name key in global state
       */
      lpTokenName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lp_token_name")) as string | undefined },
      /**
       * Get the current value of the lp_token_symbol key in global state
       */
      lpTokenSymbol: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lp_token_symbol")) as string | undefined },
      /**
       * Get the current value of the lp_token_decimals key in global state
       */
      lpTokenDecimals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lp_token_decimals")) as bigint | undefined },
      /**
       * Get the current value of the lp_token_url key in global state
       */
      lpTokenUrl: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lp_token_url")) as string | undefined },
      /**
       * Get the current value of the swap_fee_bps key in global state
       */
      swapFeeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("swap_fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the protocol_fee_bps key in global state
       */
      protocolFeeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("protocol_fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the treasury_address key in global state
       */
      treasuryAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("treasury_address")) as string | undefined },
      /**
       * Get the current value of the minimum_balance key in global state
       */
      minimumBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minimum_balance")) as bigint | undefined },
      /**
       * Get the current value of the contract_ending key in global state
       */
      contractEnding: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contract_ending")) as bigint | undefined },
      /**
       * Get the current value of the contract_version key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contract_version")) as bigint | undefined },
    },
  }

  public newGroup(): MammComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void method call against the Mamm contract
       */
      initApplication(params: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64,axfer,axfer)void method call against the Mamm contract
       */
      addLiquidity(params: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64,axfer,axfer)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64,axfer,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeLiquidity(axfer,uint64)void method call against the Mamm contract
       */
      removeLiquidity(params: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeLiquidity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a swap(uint64,uint64)void method call against the Mamm contract
       */
      swap(params: CallParams<MammArgs['obj']['swap(uint64,uint64)void'] | MammArgs['tuple']['swap(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateSwapFee(uint64)void method call against the Mamm contract
       */
      updateSwapFee(params: CallParams<MammArgs['obj']['updateSwapFee(uint64)void'] | MammArgs['tuple']['updateSwapFee(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateSwapFee(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateProtocolFee(uint64)void method call against the Mamm contract
       */
      updateProtocolFee(params: CallParams<MammArgs['obj']['updateProtocolFee(uint64)void'] | MammArgs['tuple']['updateProtocolFee(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateProtocolFee(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateAdmin(address)void method call against the Mamm contract
       */
      updateAdmin(params: CallParams<MammArgs['obj']['updateAdmin(address)void'] | MammArgs['tuple']['updateAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateTreasury(address)void method call against the Mamm contract
       */
      updateTreasury(params: CallParams<MammArgs['obj']['updateTreasury(address)void'] | MammArgs['tuple']['updateTreasury(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateTreasury(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateMinimumBalance(uint64)void method call against the Mamm contract
       */
      updateMinimumBalance(params: CallParams<MammArgs['obj']['updateMinimumBalance(uint64)void'] | MammArgs['tuple']['updateMinimumBalance(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateMinimumBalance(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateContractEnding(uint64)void method call against the Mamm contract
       */
      updateContractEnding(params: CallParams<MammArgs['obj']['updateContractEnding(uint64)void'] | MammArgs['tuple']['updateContractEnding(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateContractEnding(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<MammArgs['obj']['deleteApplication()void'] | MammArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Mamm contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MammComposer
  }
}
export type MammComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<MammArgs['obj']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | MammArgs['tuple']['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void']>): MammComposer<[...TReturns, MammReturns['initApplication(pay,uint64,uint64,string,string,uint64,uint64,address)void'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64,axfer,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<MammArgs['obj']['addLiquidity(uint64,uint64,axfer,axfer)void'] | MammArgs['tuple']['addLiquidity(uint64,uint64,axfer,axfer)void']>): MammComposer<[...TReturns, MammReturns['addLiquidity(uint64,uint64,axfer,axfer)void'] | undefined]>

  /**
   * Calls the removeLiquidity(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidity(params?: CallParams<MammArgs['obj']['removeLiquidity(axfer,uint64)void'] | MammArgs['tuple']['removeLiquidity(axfer,uint64)void']>): MammComposer<[...TReturns, MammReturns['removeLiquidity(axfer,uint64)void'] | undefined]>

  /**
   * Calls the swap(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(params?: CallParams<MammArgs['obj']['swap(uint64,uint64)void'] | MammArgs['tuple']['swap(uint64,uint64)void']>): MammComposer<[...TReturns, MammReturns['swap(uint64,uint64)void'] | undefined]>

  /**
   * Calls the updateSwapFee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateSwapFee(params?: CallParams<MammArgs['obj']['updateSwapFee(uint64)void'] | MammArgs['tuple']['updateSwapFee(uint64)void']>): MammComposer<[...TReturns, MammReturns['updateSwapFee(uint64)void'] | undefined]>

  /**
   * Calls the updateProtocolFee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateProtocolFee(params?: CallParams<MammArgs['obj']['updateProtocolFee(uint64)void'] | MammArgs['tuple']['updateProtocolFee(uint64)void']>): MammComposer<[...TReturns, MammReturns['updateProtocolFee(uint64)void'] | undefined]>

  /**
   * Calls the updateAdmin(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdmin(params?: CallParams<MammArgs['obj']['updateAdmin(address)void'] | MammArgs['tuple']['updateAdmin(address)void']>): MammComposer<[...TReturns, MammReturns['updateAdmin(address)void'] | undefined]>

  /**
   * Calls the updateTreasury(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTreasury(params?: CallParams<MammArgs['obj']['updateTreasury(address)void'] | MammArgs['tuple']['updateTreasury(address)void']>): MammComposer<[...TReturns, MammReturns['updateTreasury(address)void'] | undefined]>

  /**
   * Calls the updateMinimumBalance(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateMinimumBalance(params?: CallParams<MammArgs['obj']['updateMinimumBalance(uint64)void'] | MammArgs['tuple']['updateMinimumBalance(uint64)void']>): MammComposer<[...TReturns, MammReturns['updateMinimumBalance(uint64)void'] | undefined]>

  /**
   * Calls the updateContractEnding(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateContractEnding(params?: CallParams<MammArgs['obj']['updateContractEnding(uint64)void'] | MammArgs['tuple']['updateContractEnding(uint64)void']>): MammComposer<[...TReturns, MammReturns['updateContractEnding(uint64)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Mamm smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<MammArgs['obj']['deleteApplication()void'] | MammArgs['tuple']['deleteApplication()void']>): MammComposer<[...TReturns, MammReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Mamm smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MammComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MammComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MammComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MammComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MammComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MammComposerResults<TReturns>>
}
export type MammComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

